
Ldisp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d10  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08006e20  08006e20  00016e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a0  080074a0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074a8  080074a8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a8  080074a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080074b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000422c  200001d8  08007684  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000a04  20004404  08007684  00024404  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152f3  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003510  00000000  00000000  000354f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000086cc  00000000  00000000  00038a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000d50  00000000  00000000  000410d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d70  00000000  00000000  00041e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00005537  00000000  00000000  00042b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000c200  00000000  00000000  000480c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0005ee47  00000000  00000000  000542c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000b310e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cd4  00000000  00000000  000b318c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e08 	.word	0x08006e08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08006e08 	.word	0x08006e08

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_uldivmod>:
 8000ac8:	b953      	cbnz	r3, 8000ae0 <__aeabi_uldivmod+0x18>
 8000aca:	b94a      	cbnz	r2, 8000ae0 <__aeabi_uldivmod+0x18>
 8000acc:	2900      	cmp	r1, #0
 8000ace:	bf08      	it	eq
 8000ad0:	2800      	cmpeq	r0, #0
 8000ad2:	bf1c      	itt	ne
 8000ad4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ad8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000adc:	f000 b974 	b.w	8000dc8 <__aeabi_idiv0>
 8000ae0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae8:	f000 f806 	bl	8000af8 <__udivmoddi4>
 8000aec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af4:	b004      	add	sp, #16
 8000af6:	4770      	bx	lr

08000af8 <__udivmoddi4>:
 8000af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000afc:	468c      	mov	ip, r1
 8000afe:	4604      	mov	r4, r0
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d14b      	bne.n	8000b9e <__udivmoddi4+0xa6>
 8000b06:	428a      	cmp	r2, r1
 8000b08:	4615      	mov	r5, r2
 8000b0a:	d967      	bls.n	8000bdc <__udivmoddi4+0xe4>
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	b14a      	cbz	r2, 8000b26 <__udivmoddi4+0x2e>
 8000b12:	f1c2 0720 	rsb	r7, r2, #32
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b1e:	4095      	lsls	r5, r2
 8000b20:	ea47 0c03 	orr.w	ip, r7, r3
 8000b24:	4094      	lsls	r4, r2
 8000b26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2a:	fbbc f7fe 	udiv	r7, ip, lr
 8000b2e:	fa1f f885 	uxth.w	r8, r5
 8000b32:	fb0e c317 	mls	r3, lr, r7, ip
 8000b36:	fb07 f908 	mul.w	r9, r7, r8
 8000b3a:	0c21      	lsrs	r1, r4, #16
 8000b3c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b40:	4599      	cmp	r9, r3
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x60>
 8000b44:	18eb      	adds	r3, r5, r3
 8000b46:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000b4a:	f080 811c 	bcs.w	8000d86 <__udivmoddi4+0x28e>
 8000b4e:	4599      	cmp	r9, r3
 8000b50:	f240 8119 	bls.w	8000d86 <__udivmoddi4+0x28e>
 8000b54:	3f02      	subs	r7, #2
 8000b56:	442b      	add	r3, r5
 8000b58:	eba3 0309 	sub.w	r3, r3, r9
 8000b5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b64:	fb00 f108 	mul.w	r1, r0, r8
 8000b68:	b2a4      	uxth	r4, r4
 8000b6a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6e:	42a1      	cmp	r1, r4
 8000b70:	d909      	bls.n	8000b86 <__udivmoddi4+0x8e>
 8000b72:	192c      	adds	r4, r5, r4
 8000b74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b78:	f080 8107 	bcs.w	8000d8a <__udivmoddi4+0x292>
 8000b7c:	42a1      	cmp	r1, r4
 8000b7e:	f240 8104 	bls.w	8000d8a <__udivmoddi4+0x292>
 8000b82:	3802      	subs	r0, #2
 8000b84:	442c      	add	r4, r5
 8000b86:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b8a:	2700      	movs	r7, #0
 8000b8c:	1a64      	subs	r4, r4, r1
 8000b8e:	b11e      	cbz	r6, 8000b98 <__udivmoddi4+0xa0>
 8000b90:	2300      	movs	r3, #0
 8000b92:	40d4      	lsrs	r4, r2
 8000b94:	e9c6 4300 	strd	r4, r3, [r6]
 8000b98:	4639      	mov	r1, r7
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d909      	bls.n	8000bb6 <__udivmoddi4+0xbe>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	f000 80ec 	beq.w	8000d80 <__udivmoddi4+0x288>
 8000ba8:	2700      	movs	r7, #0
 8000baa:	e9c6 0100 	strd	r0, r1, [r6]
 8000bae:	4638      	mov	r0, r7
 8000bb0:	4639      	mov	r1, r7
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	fab3 f783 	clz	r7, r3
 8000bba:	2f00      	cmp	r7, #0
 8000bbc:	d148      	bne.n	8000c50 <__udivmoddi4+0x158>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xd0>
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	f200 80fb 	bhi.w	8000dbe <__udivmoddi4+0x2c6>
 8000bc8:	1a84      	subs	r4, r0, r2
 8000bca:	eb61 0303 	sbc.w	r3, r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	469c      	mov	ip, r3
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d0e0      	beq.n	8000b98 <__udivmoddi4+0xa0>
 8000bd6:	e9c6 4c00 	strd	r4, ip, [r6]
 8000bda:	e7dd      	b.n	8000b98 <__udivmoddi4+0xa0>
 8000bdc:	b902      	cbnz	r2, 8000be0 <__udivmoddi4+0xe8>
 8000bde:	deff      	udf	#255	; 0xff
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	f040 808f 	bne.w	8000d08 <__udivmoddi4+0x210>
 8000bea:	2701      	movs	r7, #1
 8000bec:	1b49      	subs	r1, r1, r5
 8000bee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bf2:	fa1f f985 	uxth.w	r9, r5
 8000bf6:	fbb1 fef8 	udiv	lr, r1, r8
 8000bfa:	fb08 111e 	mls	r1, r8, lr, r1
 8000bfe:	fb09 f00e 	mul.w	r0, r9, lr
 8000c02:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000c06:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000c0a:	4298      	cmp	r0, r3
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x126>
 8000c0e:	18eb      	adds	r3, r5, r3
 8000c10:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000c14:	d202      	bcs.n	8000c1c <__udivmoddi4+0x124>
 8000c16:	4298      	cmp	r0, r3
 8000c18:	f200 80cd 	bhi.w	8000db6 <__udivmoddi4+0x2be>
 8000c1c:	468e      	mov	lr, r1
 8000c1e:	1a1b      	subs	r3, r3, r0
 8000c20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c24:	fb08 3310 	mls	r3, r8, r0, r3
 8000c28:	fb09 f900 	mul.w	r9, r9, r0
 8000c2c:	b2a4      	uxth	r4, r4
 8000c2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c32:	45a1      	cmp	r9, r4
 8000c34:	d907      	bls.n	8000c46 <__udivmoddi4+0x14e>
 8000c36:	192c      	adds	r4, r5, r4
 8000c38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3c:	d202      	bcs.n	8000c44 <__udivmoddi4+0x14c>
 8000c3e:	45a1      	cmp	r9, r4
 8000c40:	f200 80b6 	bhi.w	8000db0 <__udivmoddi4+0x2b8>
 8000c44:	4618      	mov	r0, r3
 8000c46:	eba4 0409 	sub.w	r4, r4, r9
 8000c4a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c4e:	e79e      	b.n	8000b8e <__udivmoddi4+0x96>
 8000c50:	f1c7 0520 	rsb	r5, r7, #32
 8000c54:	40bb      	lsls	r3, r7
 8000c56:	fa22 fc05 	lsr.w	ip, r2, r5
 8000c5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5e:	fa21 f405 	lsr.w	r4, r1, r5
 8000c62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c66:	fbb4 f9fe 	udiv	r9, r4, lr
 8000c6a:	fa1f f88c 	uxth.w	r8, ip
 8000c6e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000c72:	fa20 f305 	lsr.w	r3, r0, r5
 8000c76:	40b9      	lsls	r1, r7
 8000c78:	fb09 fa08 	mul.w	sl, r9, r8
 8000c7c:	4319      	orrs	r1, r3
 8000c7e:	0c0b      	lsrs	r3, r1, #16
 8000c80:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c84:	45a2      	cmp	sl, r4
 8000c86:	fa02 f207 	lsl.w	r2, r2, r7
 8000c8a:	fa00 f307 	lsl.w	r3, r0, r7
 8000c8e:	d90b      	bls.n	8000ca8 <__udivmoddi4+0x1b0>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c98:	f080 8088 	bcs.w	8000dac <__udivmoddi4+0x2b4>
 8000c9c:	45a2      	cmp	sl, r4
 8000c9e:	f240 8085 	bls.w	8000dac <__udivmoddi4+0x2b4>
 8000ca2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ca6:	4464      	add	r4, ip
 8000ca8:	eba4 040a 	sub.w	r4, r4, sl
 8000cac:	fbb4 f0fe 	udiv	r0, r4, lr
 8000cb0:	fb0e 4410 	mls	r4, lr, r0, r4
 8000cb4:	fb00 fa08 	mul.w	sl, r0, r8
 8000cb8:	b289      	uxth	r1, r1
 8000cba:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x1dc>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cca:	d26b      	bcs.n	8000da4 <__udivmoddi4+0x2ac>
 8000ccc:	45a2      	cmp	sl, r4
 8000cce:	d969      	bls.n	8000da4 <__udivmoddi4+0x2ac>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4464      	add	r4, ip
 8000cd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cd8:	fba0 8902 	umull	r8, r9, r0, r2
 8000cdc:	eba4 040a 	sub.w	r4, r4, sl
 8000ce0:	454c      	cmp	r4, r9
 8000ce2:	4641      	mov	r1, r8
 8000ce4:	46ce      	mov	lr, r9
 8000ce6:	d354      	bcc.n	8000d92 <__udivmoddi4+0x29a>
 8000ce8:	d051      	beq.n	8000d8e <__udivmoddi4+0x296>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d069      	beq.n	8000dc2 <__udivmoddi4+0x2ca>
 8000cee:	1a5a      	subs	r2, r3, r1
 8000cf0:	eb64 040e 	sbc.w	r4, r4, lr
 8000cf4:	fa04 f505 	lsl.w	r5, r4, r5
 8000cf8:	fa22 f307 	lsr.w	r3, r2, r7
 8000cfc:	40fc      	lsrs	r4, r7
 8000cfe:	431d      	orrs	r5, r3
 8000d00:	e9c6 5400 	strd	r5, r4, [r6]
 8000d04:	2700      	movs	r7, #0
 8000d06:	e747      	b.n	8000b98 <__udivmoddi4+0xa0>
 8000d08:	4095      	lsls	r5, r2
 8000d0a:	f1c2 0320 	rsb	r3, r2, #32
 8000d0e:	fa21 f003 	lsr.w	r0, r1, r3
 8000d12:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000d16:	fbb0 f7f8 	udiv	r7, r0, r8
 8000d1a:	fa1f f985 	uxth.w	r9, r5
 8000d1e:	fb08 0017 	mls	r0, r8, r7, r0
 8000d22:	fa24 f303 	lsr.w	r3, r4, r3
 8000d26:	4091      	lsls	r1, r2
 8000d28:	fb07 fc09 	mul.w	ip, r7, r9
 8000d2c:	430b      	orrs	r3, r1
 8000d2e:	0c19      	lsrs	r1, r3, #16
 8000d30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d34:	458c      	cmp	ip, r1
 8000d36:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x254>
 8000d3c:	1869      	adds	r1, r5, r1
 8000d3e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d42:	d231      	bcs.n	8000da8 <__udivmoddi4+0x2b0>
 8000d44:	458c      	cmp	ip, r1
 8000d46:	d92f      	bls.n	8000da8 <__udivmoddi4+0x2b0>
 8000d48:	3f02      	subs	r7, #2
 8000d4a:	4429      	add	r1, r5
 8000d4c:	eba1 010c 	sub.w	r1, r1, ip
 8000d50:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d54:	fb08 1c10 	mls	ip, r8, r0, r1
 8000d58:	fb00 fe09 	mul.w	lr, r0, r9
 8000d5c:	b299      	uxth	r1, r3
 8000d5e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d62:	458e      	cmp	lr, r1
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x27e>
 8000d66:	1869      	adds	r1, r5, r1
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	d218      	bcs.n	8000da0 <__udivmoddi4+0x2a8>
 8000d6e:	458e      	cmp	lr, r1
 8000d70:	d916      	bls.n	8000da0 <__udivmoddi4+0x2a8>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4429      	add	r1, r5
 8000d76:	eba1 010e 	sub.w	r1, r1, lr
 8000d7a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d7e:	e73a      	b.n	8000bf6 <__udivmoddi4+0xfe>
 8000d80:	4637      	mov	r7, r6
 8000d82:	4630      	mov	r0, r6
 8000d84:	e708      	b.n	8000b98 <__udivmoddi4+0xa0>
 8000d86:	460f      	mov	r7, r1
 8000d88:	e6e6      	b.n	8000b58 <__udivmoddi4+0x60>
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	e6fb      	b.n	8000b86 <__udivmoddi4+0x8e>
 8000d8e:	4543      	cmp	r3, r8
 8000d90:	d2ab      	bcs.n	8000cea <__udivmoddi4+0x1f2>
 8000d92:	ebb8 0102 	subs.w	r1, r8, r2
 8000d96:	eb69 020c 	sbc.w	r2, r9, ip
 8000d9a:	3801      	subs	r0, #1
 8000d9c:	4696      	mov	lr, r2
 8000d9e:	e7a4      	b.n	8000cea <__udivmoddi4+0x1f2>
 8000da0:	4618      	mov	r0, r3
 8000da2:	e7e8      	b.n	8000d76 <__udivmoddi4+0x27e>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e795      	b.n	8000cd4 <__udivmoddi4+0x1dc>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e7cf      	b.n	8000d4c <__udivmoddi4+0x254>
 8000dac:	4681      	mov	r9, r0
 8000dae:	e77b      	b.n	8000ca8 <__udivmoddi4+0x1b0>
 8000db0:	3802      	subs	r0, #2
 8000db2:	442c      	add	r4, r5
 8000db4:	e747      	b.n	8000c46 <__udivmoddi4+0x14e>
 8000db6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dba:	442b      	add	r3, r5
 8000dbc:	e72f      	b.n	8000c1e <__udivmoddi4+0x126>
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	e707      	b.n	8000bd2 <__udivmoddi4+0xda>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	e6e8      	b.n	8000b98 <__udivmoddi4+0xa0>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000dcc:	b538      	push	{r3, r4, r5, lr}
 8000dce:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000dd0:	f010 0f07 	tst.w	r0, #7
 8000dd4:	d002      	beq.n	8000ddc <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000dd6:	f020 0407 	bic.w	r4, r0, #7
 8000dda:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
 8000ddc:	f000 fdfe 	bl	80019dc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <pvPortMalloc+0x54>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	b18b      	cbz	r3, 8000e0a <pvPortMalloc+0x3e>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <pvPortMalloc+0x58>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	441c      	add	r4, r3
 8000dec:	f243 72f7 	movw	r2, #14327	; 0x37f7
 8000df0:	4294      	cmp	r4, r2
 8000df2:	d810      	bhi.n	8000e16 <pvPortMalloc+0x4a>
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d210      	bcs.n	8000e1a <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8000df8:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <pvPortMalloc+0x54>)
 8000dfa:	6815      	ldr	r5, [r2, #0]
 8000dfc:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <pvPortMalloc+0x58>)
 8000e00:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000e02:	f000 fe79 	bl	8001af8 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 8000e06:	4628      	mov	r0, r5
 8000e08:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <pvPortMalloc+0x5c>)
 8000e0c:	f023 0307 	bic.w	r3, r3, #7
 8000e10:	4a03      	ldr	r2, [pc, #12]	; (8000e20 <pvPortMalloc+0x54>)
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	e7e7      	b.n	8000de6 <pvPortMalloc+0x1a>
void *pvReturn = NULL;
 8000e16:	2500      	movs	r5, #0
 8000e18:	e7f3      	b.n	8000e02 <pvPortMalloc+0x36>
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	e7f1      	b.n	8000e02 <pvPortMalloc+0x36>
 8000e1e:	bf00      	nop
 8000e20:	200001f4 	.word	0x200001f4
 8000e24:	200039f8 	.word	0x200039f8
 8000e28:	20000200 	.word	0x20000200

08000e2c <vPortFree>:
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
 8000e2c:	4770      	bx	lr

08000e2e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e2e:	f100 0308 	add.w	r3, r0, #8
 8000e32:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e38:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e3a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e3c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000e42:	4770      	bx	lr

08000e44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000e48:	4770      	bx	lr

08000e4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000e4a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000e4c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000e56:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000e58:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000e5a:	6803      	ldr	r3, [r0, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	6003      	str	r3, [r0, #0]
}
 8000e60:	4770      	bx	lr

08000e62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000e62:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000e64:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000e66:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8000e6a:	d002      	beq.n	8000e72 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000e6c:	f100 0208 	add.w	r2, r0, #8
 8000e70:	e002      	b.n	8000e78 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8000e72:	6902      	ldr	r2, [r0, #16]
 8000e74:	e004      	b.n	8000e80 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000e76:	461a      	mov	r2, r3
 8000e78:	6853      	ldr	r3, [r2, #4]
 8000e7a:	681c      	ldr	r4, [r3, #0]
 8000e7c:	42ac      	cmp	r4, r5
 8000e7e:	d9fa      	bls.n	8000e76 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000e80:	6853      	ldr	r3, [r2, #4]
 8000e82:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000e84:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000e86:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000e88:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000e8a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000e8c:	6803      	ldr	r3, [r0, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	6003      	str	r3, [r0, #0]
}
 8000e92:	bc30      	pop	{r4, r5}
 8000e94:	4770      	bx	lr

08000e96 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000e96:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e98:	6842      	ldr	r2, [r0, #4]
 8000e9a:	6881      	ldr	r1, [r0, #8]
 8000e9c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e9e:	6882      	ldr	r2, [r0, #8]
 8000ea0:	6841      	ldr	r1, [r0, #4]
 8000ea2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	d006      	beq.n	8000eb8 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000eaa:	2200      	movs	r2, #0
 8000eac:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	3a01      	subs	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000eb4:	6818      	ldr	r0, [r3, #0]
}
 8000eb6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000eb8:	6882      	ldr	r2, [r0, #8]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	e7f5      	b.n	8000eaa <uxListRemove+0x14>

08000ebe <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000ebe:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	9301      	str	r3, [sp, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ec4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000ec8:	f383 8811 	msr	BASEPRI, r3
 8000ecc:	f3bf 8f6f 	isb	sy
 8000ed0:	f3bf 8f4f 	dsb	sy

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000ed4:	9b01      	ldr	r3, [sp, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0fc      	beq.n	8000ed4 <prvTaskExitError+0x16>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000eda:	b002      	add	sp, #8
 8000edc:	4770      	bx	lr
	...

08000ee0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000ee0:	4806      	ldr	r0, [pc, #24]	; (8000efc <prvPortStartFirstTask+0x1c>)
 8000ee2:	6800      	ldr	r0, [r0, #0]
 8000ee4:	6800      	ldr	r0, [r0, #0]
 8000ee6:	f380 8808 	msr	MSP, r0
 8000eea:	b662      	cpsie	i
 8000eec:	b661      	cpsie	f
 8000eee:	f3bf 8f4f 	dsb	sy
 8000ef2:	f3bf 8f6f 	isb	sy
 8000ef6:	df00      	svc	0
 8000ef8:	bf00      	nop
 8000efa:	0000      	.short	0x0000
 8000efc:	e000ed08 	.word	0xe000ed08

08000f00 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f04:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000f08:	f021 0101 	bic.w	r1, r1, #1
 8000f0c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <pxPortInitialiseStack+0x20>)
 8000f12:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000f16:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8000f1a:	3840      	subs	r0, #64	; 0x40
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	08000ebf 	.word	0x08000ebf
	...

08000f30 <SVC_Handler>:
	__asm volatile (
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <pxCurrentTCBConst2>)
 8000f32:	6819      	ldr	r1, [r3, #0]
 8000f34:	6808      	ldr	r0, [r1, #0]
 8000f36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f3a:	f380 8809 	msr	PSP, r0
 8000f3e:	f3bf 8f6f 	isb	sy
 8000f42:	f04f 0000 	mov.w	r0, #0
 8000f46:	f380 8811 	msr	BASEPRI, r0
 8000f4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000f4e:	4770      	bx	lr

08000f50 <pxCurrentTCBConst2>:
 8000f50:	200039fc 	.word	0x200039fc

08000f54 <vPortEnterCritical>:
 8000f54:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000f58:	f383 8811 	msr	BASEPRI, r3
 8000f5c:	f3bf 8f6f 	isb	sy
 8000f60:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000f64:	4a02      	ldr	r2, [pc, #8]	; (8000f70 <vPortEnterCritical+0x1c>)
 8000f66:	6813      	ldr	r3, [r2, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000000 	.word	0x20000000

08000f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8000f74:	4a03      	ldr	r2, [pc, #12]	; (8000f84 <vPortExitCritical+0x10>)
 8000f76:	6813      	ldr	r3, [r2, #0]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000f7c:	b90b      	cbnz	r3, 8000f82 <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000f7e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000f82:	4770      	bx	lr
 8000f84:	20000000 	.word	0x20000000
	...

08000f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000f90:	f3ef 8009 	mrs	r0, PSP
 8000f94:	f3bf 8f6f 	isb	sy
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <pxCurrentTCBConst>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000fa0:	6010      	str	r0, [r2, #0]
 8000fa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000fa6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8000faa:	f380 8811 	msr	BASEPRI, r0
 8000fae:	f000 fe2f 	bl	8001c10 <vTaskSwitchContext>
 8000fb2:	f04f 0000 	mov.w	r0, #0
 8000fb6:	f380 8811 	msr	BASEPRI, r0
 8000fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000fbe:	6819      	ldr	r1, [r3, #0]
 8000fc0:	6808      	ldr	r0, [r1, #0]
 8000fc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000fc6:	f380 8809 	msr	PSP, r0
 8000fca:	f3bf 8f6f 	isb	sy
 8000fce:	4770      	bx	lr

08000fd0 <pxCurrentTCBConst>:
 8000fd0:	200039fc 	.word	0x200039fc

08000fd4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000fd4:	b508      	push	{r3, lr}
	__asm volatile
 8000fd6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000fda:	f383 8811 	msr	BASEPRI, r3
 8000fde:	f3bf 8f6f 	isb	sy
 8000fe2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000fe6:	f000 fd07 	bl	80019f8 <xTaskIncrementTick>
 8000fea:	b118      	cbz	r0, 8000ff4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <SysTick_Handler+0x28>)
 8000fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ff2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000ffa:	bd08      	pop	{r3, pc}
 8000ffc:	e000ed04 	.word	0xe000ed04

08001000 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <vPortSetupTimerInterrupt+0x18>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001006:	4905      	ldr	r1, [pc, #20]	; (800101c <vPortSetupTimerInterrupt+0x1c>)
 8001008:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <vPortSetupTimerInterrupt+0x20>)
 800100c:	4905      	ldr	r1, [pc, #20]	; (8001024 <vPortSetupTimerInterrupt+0x24>)
 800100e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010
 800101c:	e000e018 	.word	0xe000e018
 8001020:	e000e014 	.word	0xe000e014
 8001024:	0001193f 	.word	0x0001193f

08001028 <xPortStartScheduler>:
{
 8001028:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <xPortStartScheduler+0x30>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	f442 027a 	orr.w	r2, r2, #16384000	; 0xfa0000
 8001032:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	f042 427a 	orr.w	r2, r2, #4194304000	; 0xfa000000
 800103a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800103c:	f7ff ffe0 	bl	8001000 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001040:	2400      	movs	r4, #0
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <xPortStartScheduler+0x34>)
 8001044:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8001046:	f7ff ff4b 	bl	8000ee0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800104a:	f000 fde1 	bl	8001c10 <vTaskSwitchContext>
	prvTaskExitError();
 800104e:	f7ff ff36 	bl	8000ebe <prvTaskExitError>
}
 8001052:	4620      	mov	r0, r4
 8001054:	bd10      	pop	{r4, pc}
 8001056:	bf00      	nop
 8001058:	e000ed20 	.word	0xe000ed20
 800105c:	20000000 	.word	0x20000000

08001060 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001060:	b510      	push	{r4, lr}
 8001062:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001064:	f7ff ff76 	bl	8000f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001068:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800106a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800106c:	429a      	cmp	r2, r3
 800106e:	d004      	beq.n	800107a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8001070:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8001072:	f7ff ff7f 	bl	8000f74 <vPortExitCritical>

	return xReturn;
}
 8001076:	4620      	mov	r0, r4
 8001078:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800107a:	2401      	movs	r4, #1
 800107c:	e7f9      	b.n	8001072 <prvIsQueueFull+0x12>

0800107e <prvIsQueueEmpty>:
{
 800107e:	b510      	push	{r4, lr}
 8001080:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001082:	f7ff ff67 	bl	8000f54 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001086:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001088:	b123      	cbz	r3, 8001094 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 800108a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800108c:	f7ff ff72 	bl	8000f74 <vPortExitCritical>
}
 8001090:	4620      	mov	r0, r4
 8001092:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001094:	2401      	movs	r4, #1
 8001096:	e7f9      	b.n	800108c <prvIsQueueEmpty+0xe>

08001098 <prvCopyDataToQueue>:
{
 8001098:	b570      	push	{r4, r5, r6, lr}
 800109a:	4604      	mov	r4, r0
 800109c:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800109e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80010a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010a2:	b1ea      	cbz	r2, 80010e0 <prvCopyDataToQueue+0x48>
	else if( xPosition == queueSEND_TO_BACK )
 80010a4:	b966      	cbnz	r6, 80010c0 <prvCopyDataToQueue+0x28>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80010a6:	6840      	ldr	r0, [r0, #4]
 80010a8:	f003 fdcd 	bl	8004c46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80010ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010ae:	6863      	ldr	r3, [r4, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80010b4:	68a2      	ldr	r2, [r4, #8]
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d312      	bcc.n	80010e0 <prvCopyDataToQueue+0x48>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	6063      	str	r3, [r4, #4]
 80010be:	e00f      	b.n	80010e0 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80010c0:	68c0      	ldr	r0, [r0, #12]
 80010c2:	f003 fdc0 	bl	8004c46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80010c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010c8:	4252      	negs	r2, r2
 80010ca:	68e3      	ldr	r3, [r4, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80010d0:	6821      	ldr	r1, [r4, #0]
 80010d2:	428b      	cmp	r3, r1
 80010d4:	d202      	bcs.n	80010dc <prvCopyDataToQueue+0x44>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80010d6:	68a3      	ldr	r3, [r4, #8]
 80010d8:	441a      	add	r2, r3
 80010da:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80010dc:	2e02      	cmp	r6, #2
 80010de:	d003      	beq.n	80010e8 <prvCopyDataToQueue+0x50>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80010e0:	3501      	adds	r5, #1
 80010e2:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80010e4:	2000      	movs	r0, #0
 80010e6:	bd70      	pop	{r4, r5, r6, pc}
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80010e8:	2d00      	cmp	r5, #0
 80010ea:	d0f9      	beq.n	80010e0 <prvCopyDataToQueue+0x48>
				--uxMessagesWaiting;
 80010ec:	3d01      	subs	r5, #1
 80010ee:	e7f7      	b.n	80010e0 <prvCopyDataToQueue+0x48>

080010f0 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80010f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010f2:	b172      	cbz	r2, 8001112 <prvCopyDataFromQueue+0x22>
{
 80010f4:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80010f6:	68c3      	ldr	r3, [r0, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80010fc:	6884      	ldr	r4, [r0, #8]
 80010fe:	42a3      	cmp	r3, r4
 8001100:	d301      	bcc.n	8001106 <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001102:	6803      	ldr	r3, [r0, #0]
 8001104:	60c3      	str	r3, [r0, #12]
 8001106:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001108:	68c1      	ldr	r1, [r0, #12]
 800110a:	4620      	mov	r0, r4
 800110c:	f003 fd9b 	bl	8004c46 <memcpy>
}
 8001110:	bd10      	pop	{r4, pc}
 8001112:	4770      	bx	lr

08001114 <prvUnlockQueue>:
{
 8001114:	b538      	push	{r3, r4, r5, lr}
 8001116:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8001118:	f7ff ff1c 	bl	8000f54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800111c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8001120:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001122:	e003      	b.n	800112c <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8001124:	f000 fe46 	bl	8001db4 <vTaskMissedYield>
			--cTxLock;
 8001128:	3c01      	subs	r4, #1
 800112a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800112c:	2c00      	cmp	r4, #0
 800112e:	dd08      	ble.n	8001142 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001130:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001132:	b133      	cbz	r3, 8001142 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001134:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001138:	f000 fdc8 	bl	8001ccc <xTaskRemoveFromEventList>
 800113c:	2800      	cmp	r0, #0
 800113e:	d0f3      	beq.n	8001128 <prvUnlockQueue+0x14>
 8001140:	e7f0      	b.n	8001124 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8001142:	23ff      	movs	r3, #255	; 0xff
 8001144:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001148:	f7ff ff14 	bl	8000f74 <vPortExitCritical>
	taskENTER_CRITICAL();
 800114c:	f7ff ff02 	bl	8000f54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001150:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8001154:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001156:	e003      	b.n	8001160 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8001158:	f000 fe2c 	bl	8001db4 <vTaskMissedYield>
				--cRxLock;
 800115c:	3c01      	subs	r4, #1
 800115e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001160:	2c00      	cmp	r4, #0
 8001162:	dd08      	ble.n	8001176 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001164:	692b      	ldr	r3, [r5, #16]
 8001166:	b133      	cbz	r3, 8001176 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001168:	f105 0010 	add.w	r0, r5, #16
 800116c:	f000 fdae 	bl	8001ccc <xTaskRemoveFromEventList>
 8001170:	2800      	cmp	r0, #0
 8001172:	d0f3      	beq.n	800115c <prvUnlockQueue+0x48>
 8001174:	e7f0      	b.n	8001158 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8001176:	23ff      	movs	r3, #255	; 0xff
 8001178:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800117c:	f7ff fefa 	bl	8000f74 <vPortExitCritical>
}
 8001180:	bd38      	pop	{r3, r4, r5, pc}
	...

08001184 <xQueueGenericReset>:
{
 8001184:	b538      	push	{r3, r4, r5, lr}
 8001186:	4604      	mov	r4, r0
 8001188:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800118a:	f7ff fee3 	bl	8000f54 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800118e:	6821      	ldr	r1, [r4, #0]
 8001190:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001194:	fb03 1002 	mla	r0, r3, r2, r1
 8001198:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800119a:	2000      	movs	r0, #0
 800119c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800119e:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80011a0:	3a01      	subs	r2, #1
 80011a2:	fb02 1303 	mla	r3, r2, r3, r1
 80011a6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80011a8:	23ff      	movs	r3, #255	; 0xff
 80011aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80011ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80011b2:	b9a5      	cbnz	r5, 80011de <xQueueGenericReset+0x5a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011b4:	6923      	ldr	r3, [r4, #16]
 80011b6:	b91b      	cbnz	r3, 80011c0 <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
 80011b8:	f7ff fedc 	bl	8000f74 <vPortExitCritical>
}
 80011bc:	2001      	movs	r0, #1
 80011be:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011c0:	f104 0010 	add.w	r0, r4, #16
 80011c4:	f000 fd82 	bl	8001ccc <xTaskRemoveFromEventList>
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d0f5      	beq.n	80011b8 <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <xQueueGenericReset+0x6c>)
 80011ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	f3bf 8f4f 	dsb	sy
 80011d8:	f3bf 8f6f 	isb	sy
 80011dc:	e7ec      	b.n	80011b8 <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80011de:	f104 0010 	add.w	r0, r4, #16
 80011e2:	f7ff fe24 	bl	8000e2e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80011e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80011ea:	f7ff fe20 	bl	8000e2e <vListInitialise>
 80011ee:	e7e3      	b.n	80011b8 <xQueueGenericReset+0x34>
 80011f0:	e000ed04 	.word	0xe000ed04

080011f4 <prvInitialiseNewQueue>:
{
 80011f4:	b510      	push	{r4, lr}
 80011f6:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80011f8:	460c      	mov	r4, r1
 80011fa:	b139      	cbz	r1, 800120c <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80011fc:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80011fe:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001200:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001202:	2101      	movs	r1, #1
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ffbd 	bl	8001184 <xQueueGenericReset>
}
 800120a:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800120c:	601b      	str	r3, [r3, #0]
 800120e:	e7f6      	b.n	80011fe <prvInitialiseNewQueue+0xa>

08001210 <xQueueGenericCreate>:
	{
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	b083      	sub	sp, #12
 8001214:	4605      	mov	r5, r0
 8001216:	4617      	mov	r7, r2
		if( uxItemSize == ( UBaseType_t ) 0 )
 8001218:	460e      	mov	r6, r1
 800121a:	b189      	cbz	r1, 8001240 <xQueueGenericCreate+0x30>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800121c:	fb00 f001 	mul.w	r0, r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001220:	3048      	adds	r0, #72	; 0x48
 8001222:	f7ff fdd3 	bl	8000dcc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001226:	4604      	mov	r4, r0
 8001228:	b138      	cbz	r0, 800123a <xQueueGenericCreate+0x2a>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800122a:	9000      	str	r0, [sp, #0]
 800122c:	463b      	mov	r3, r7
 800122e:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8001232:	4631      	mov	r1, r6
 8001234:	4628      	mov	r0, r5
 8001236:	f7ff ffdd 	bl	80011f4 <prvInitialiseNewQueue>
	}
 800123a:	4620      	mov	r0, r4
 800123c:	b003      	add	sp, #12
 800123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8001240:	2000      	movs	r0, #0
 8001242:	e7ed      	b.n	8001220 <xQueueGenericCreate+0x10>

08001244 <xQueueGenericSend>:
{
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	b085      	sub	sp, #20
 8001248:	4604      	mov	r4, r0
 800124a:	460f      	mov	r7, r1
 800124c:	9201      	str	r2, [sp, #4]
 800124e:	461e      	mov	r6, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001250:	2500      	movs	r5, #0
 8001252:	e039      	b.n	80012c8 <xQueueGenericSend+0x84>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001254:	4632      	mov	r2, r6
 8001256:	4639      	mov	r1, r7
 8001258:	4620      	mov	r0, r4
 800125a:	f7ff ff1d 	bl	8001098 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800125e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001260:	b96b      	cbnz	r3, 800127e <xQueueGenericSend+0x3a>
					else if( xYieldRequired != pdFALSE )
 8001262:	b138      	cbz	r0, 8001274 <xQueueGenericSend+0x30>
						queueYIELD_IF_USING_PREEMPTION();
 8001264:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <xQueueGenericSend+0x114>)
 8001266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	f3bf 8f4f 	dsb	sy
 8001270:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001274:	f7ff fe7e 	bl	8000f74 <vPortExitCritical>
				return pdPASS;
 8001278:	2001      	movs	r0, #1
}
 800127a:	b005      	add	sp, #20
 800127c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800127e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001282:	f000 fd23 	bl	8001ccc <xTaskRemoveFromEventList>
 8001286:	2800      	cmp	r0, #0
 8001288:	d0f4      	beq.n	8001274 <xQueueGenericSend+0x30>
							queueYIELD_IF_USING_PREEMPTION();
 800128a:	4b33      	ldr	r3, [pc, #204]	; (8001358 <xQueueGenericSend+0x114>)
 800128c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	f3bf 8f4f 	dsb	sy
 8001296:	f3bf 8f6f 	isb	sy
 800129a:	e7eb      	b.n	8001274 <xQueueGenericSend+0x30>
					taskEXIT_CRITICAL();
 800129c:	f7ff fe6a 	bl	8000f74 <vPortExitCritical>
					return errQUEUE_FULL;
 80012a0:	2000      	movs	r0, #0
 80012a2:	e7ea      	b.n	800127a <xQueueGenericSend+0x36>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80012a4:	a802      	add	r0, sp, #8
 80012a6:	f000 fd4d 	bl	8001d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80012aa:	2501      	movs	r5, #1
 80012ac:	e019      	b.n	80012e2 <xQueueGenericSend+0x9e>
		prvLockQueue( pxQueue );
 80012ae:	2300      	movs	r3, #0
 80012b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80012b4:	e021      	b.n	80012fa <xQueueGenericSend+0xb6>
 80012b6:	2300      	movs	r3, #0
 80012b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80012bc:	e023      	b.n	8001306 <xQueueGenericSend+0xc2>
				prvUnlockQueue( pxQueue );
 80012be:	4620      	mov	r0, r4
 80012c0:	f7ff ff28 	bl	8001114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80012c4:	f000 fc18 	bl	8001af8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80012c8:	f7ff fe44 	bl	8000f54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80012cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80012ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3bf      	bcc.n	8001254 <xQueueGenericSend+0x10>
 80012d4:	2e02      	cmp	r6, #2
 80012d6:	d0bd      	beq.n	8001254 <xQueueGenericSend+0x10>
				if( xTicksToWait == ( TickType_t ) 0 )
 80012d8:	9b01      	ldr	r3, [sp, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0de      	beq.n	800129c <xQueueGenericSend+0x58>
				else if( xEntryTimeSet == pdFALSE )
 80012de:	2d00      	cmp	r5, #0
 80012e0:	d0e0      	beq.n	80012a4 <xQueueGenericSend+0x60>
		taskEXIT_CRITICAL();
 80012e2:	f7ff fe47 	bl	8000f74 <vPortExitCritical>
		vTaskSuspendAll();
 80012e6:	f000 fb79 	bl	80019dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80012ea:	f7ff fe33 	bl	8000f54 <vPortEnterCritical>
 80012ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f8:	d0d9      	beq.n	80012ae <xQueueGenericSend+0x6a>
 80012fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001304:	d0d7      	beq.n	80012b6 <xQueueGenericSend+0x72>
 8001306:	f7ff fe35 	bl	8000f74 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800130a:	a901      	add	r1, sp, #4
 800130c:	a802      	add	r0, sp, #8
 800130e:	f000 fd25 	bl	8001d5c <xTaskCheckForTimeOut>
 8001312:	b9c8      	cbnz	r0, 8001348 <xQueueGenericSend+0x104>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff fea3 	bl	8001060 <prvIsQueueFull>
 800131a:	2800      	cmp	r0, #0
 800131c:	d0cf      	beq.n	80012be <xQueueGenericSend+0x7a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800131e:	9901      	ldr	r1, [sp, #4]
 8001320:	f104 0010 	add.w	r0, r4, #16
 8001324:	f000 fcb2 	bl	8001c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001328:	4620      	mov	r0, r4
 800132a:	f7ff fef3 	bl	8001114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800132e:	f000 fbe3 	bl	8001af8 <xTaskResumeAll>
 8001332:	2800      	cmp	r0, #0
 8001334:	d1c8      	bne.n	80012c8 <xQueueGenericSend+0x84>
					portYIELD_WITHIN_API();
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <xQueueGenericSend+0x114>)
 8001338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	f3bf 8f4f 	dsb	sy
 8001342:	f3bf 8f6f 	isb	sy
 8001346:	e7bf      	b.n	80012c8 <xQueueGenericSend+0x84>
			prvUnlockQueue( pxQueue );
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff fee3 	bl	8001114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800134e:	f000 fbd3 	bl	8001af8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8001352:	2000      	movs	r0, #0
 8001354:	e791      	b.n	800127a <xQueueGenericSend+0x36>
 8001356:	bf00      	nop
 8001358:	e000ed04 	.word	0xe000ed04

0800135c <xQueueGenericSendFromISR>:
{
 800135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm volatile
 800135e:	f3ef 8611 	mrs	r6, BASEPRI
 8001362:	f04f 04bf 	mov.w	r4, #191	; 0xbf
 8001366:	f384 8811 	msr	BASEPRI, r4
 800136a:	f3bf 8f6f 	isb	sy
 800136e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001372:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8001374:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001376:	42a5      	cmp	r5, r4
 8001378:	d305      	bcc.n	8001386 <xQueueGenericSendFromISR+0x2a>
 800137a:	2b02      	cmp	r3, #2
 800137c:	d003      	beq.n	8001386 <xQueueGenericSendFromISR+0x2a>
			xReturn = errQUEUE_FULL;
 800137e:	2000      	movs	r0, #0
	__asm volatile
 8001380:	f386 8811 	msr	BASEPRI, r6
}
 8001384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001386:	4617      	mov	r7, r2
 8001388:	4605      	mov	r5, r0
			const int8_t cTxLock = pxQueue->cTxLock;
 800138a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800138e:	b264      	sxtb	r4, r4
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001390:	461a      	mov	r2, r3
 8001392:	f7ff fe81 	bl	8001098 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001396:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800139a:	d005      	beq.n	80013a8 <xQueueGenericSendFromISR+0x4c>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800139c:	3401      	adds	r4, #1
 800139e:	b264      	sxtb	r4, r4
 80013a0:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80013a4:	2001      	movs	r0, #1
 80013a6:	e7eb      	b.n	8001380 <xQueueGenericSendFromISR+0x24>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80013aa:	b90b      	cbnz	r3, 80013b0 <xQueueGenericSendFromISR+0x54>
			xReturn = pdPASS;
 80013ac:	2001      	movs	r0, #1
 80013ae:	e7e7      	b.n	8001380 <xQueueGenericSendFromISR+0x24>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013b0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80013b4:	f000 fc8a 	bl	8001ccc <xTaskRemoveFromEventList>
 80013b8:	b118      	cbz	r0, 80013c2 <xQueueGenericSendFromISR+0x66>
							if( pxHigherPriorityTaskWoken != NULL )
 80013ba:	b127      	cbz	r7, 80013c6 <xQueueGenericSendFromISR+0x6a>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80013bc:	2001      	movs	r0, #1
 80013be:	6038      	str	r0, [r7, #0]
 80013c0:	e7de      	b.n	8001380 <xQueueGenericSendFromISR+0x24>
			xReturn = pdPASS;
 80013c2:	2001      	movs	r0, #1
 80013c4:	e7dc      	b.n	8001380 <xQueueGenericSendFromISR+0x24>
 80013c6:	2001      	movs	r0, #1
 80013c8:	e7da      	b.n	8001380 <xQueueGenericSendFromISR+0x24>
	...

080013cc <xQueueReceive>:
{
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	b085      	sub	sp, #20
 80013d0:	4604      	mov	r4, r0
 80013d2:	460f      	mov	r7, r1
 80013d4:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80013d6:	2600      	movs	r6, #0
 80013d8:	e03c      	b.n	8001454 <xQueueReceive+0x88>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80013da:	4639      	mov	r1, r7
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff fe87 	bl	80010f0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80013e2:	3d01      	subs	r5, #1
 80013e4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013e6:	6923      	ldr	r3, [r4, #16]
 80013e8:	b923      	cbnz	r3, 80013f4 <xQueueReceive+0x28>
				taskEXIT_CRITICAL();
 80013ea:	f7ff fdc3 	bl	8000f74 <vPortExitCritical>
				return pdPASS;
 80013ee:	2001      	movs	r0, #1
}
 80013f0:	b005      	add	sp, #20
 80013f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013f4:	f104 0010 	add.w	r0, r4, #16
 80013f8:	f000 fc68 	bl	8001ccc <xTaskRemoveFromEventList>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	d0f4      	beq.n	80013ea <xQueueReceive+0x1e>
						queueYIELD_IF_USING_PREEMPTION();
 8001400:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <xQueueReceive+0x108>)
 8001402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	f3bf 8f4f 	dsb	sy
 800140c:	f3bf 8f6f 	isb	sy
 8001410:	e7eb      	b.n	80013ea <xQueueReceive+0x1e>
					taskEXIT_CRITICAL();
 8001412:	f7ff fdaf 	bl	8000f74 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001416:	2000      	movs	r0, #0
 8001418:	e7ea      	b.n	80013f0 <xQueueReceive+0x24>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800141a:	a802      	add	r0, sp, #8
 800141c:	f000 fc92 	bl	8001d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001420:	2601      	movs	r6, #1
 8001422:	e021      	b.n	8001468 <xQueueReceive+0x9c>
		prvLockQueue( pxQueue );
 8001424:	2300      	movs	r3, #0
 8001426:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800142a:	e029      	b.n	8001480 <xQueueReceive+0xb4>
 800142c:	2300      	movs	r3, #0
 800142e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001432:	e02b      	b.n	800148c <xQueueReceive+0xc0>
				prvUnlockQueue( pxQueue );
 8001434:	4620      	mov	r0, r4
 8001436:	f7ff fe6d 	bl	8001114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800143a:	f000 fb5d 	bl	8001af8 <xTaskResumeAll>
 800143e:	e009      	b.n	8001454 <xQueueReceive+0x88>
			prvUnlockQueue( pxQueue );
 8001440:	4620      	mov	r0, r4
 8001442:	f7ff fe67 	bl	8001114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001446:	f000 fb57 	bl	8001af8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800144a:	4620      	mov	r0, r4
 800144c:	f7ff fe17 	bl	800107e <prvIsQueueEmpty>
 8001450:	2800      	cmp	r0, #0
 8001452:	d13d      	bne.n	80014d0 <xQueueReceive+0x104>
		taskENTER_CRITICAL();
 8001454:	f7ff fd7e 	bl	8000f54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001458:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800145a:	2d00      	cmp	r5, #0
 800145c:	d1bd      	bne.n	80013da <xQueueReceive+0xe>
				if( xTicksToWait == ( TickType_t ) 0 )
 800145e:	9b01      	ldr	r3, [sp, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0d6      	beq.n	8001412 <xQueueReceive+0x46>
				else if( xEntryTimeSet == pdFALSE )
 8001464:	2e00      	cmp	r6, #0
 8001466:	d0d8      	beq.n	800141a <xQueueReceive+0x4e>
		taskEXIT_CRITICAL();
 8001468:	f7ff fd84 	bl	8000f74 <vPortExitCritical>
		vTaskSuspendAll();
 800146c:	f000 fab6 	bl	80019dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001470:	f7ff fd70 	bl	8000f54 <vPortEnterCritical>
 8001474:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001478:	b25b      	sxtb	r3, r3
 800147a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800147e:	d0d1      	beq.n	8001424 <xQueueReceive+0x58>
 8001480:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001484:	b25b      	sxtb	r3, r3
 8001486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800148a:	d0cf      	beq.n	800142c <xQueueReceive+0x60>
 800148c:	f7ff fd72 	bl	8000f74 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001490:	a901      	add	r1, sp, #4
 8001492:	a802      	add	r0, sp, #8
 8001494:	f000 fc62 	bl	8001d5c <xTaskCheckForTimeOut>
 8001498:	2800      	cmp	r0, #0
 800149a:	d1d1      	bne.n	8001440 <xQueueReceive+0x74>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff fdee 	bl	800107e <prvIsQueueEmpty>
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d0c6      	beq.n	8001434 <xQueueReceive+0x68>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80014a6:	9901      	ldr	r1, [sp, #4]
 80014a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80014ac:	f000 fbee 	bl	8001c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff fe2f 	bl	8001114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80014b6:	f000 fb1f 	bl	8001af8 <xTaskResumeAll>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d1ca      	bne.n	8001454 <xQueueReceive+0x88>
					portYIELD_WITHIN_API();
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <xQueueReceive+0x108>)
 80014c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	f3bf 8f4f 	dsb	sy
 80014ca:	f3bf 8f6f 	isb	sy
 80014ce:	e7c1      	b.n	8001454 <xQueueReceive+0x88>
				return errQUEUE_EMPTY;
 80014d0:	2000      	movs	r0, #0
 80014d2:	e78d      	b.n	80013f0 <xQueueReceive+0x24>
 80014d4:	e000ed04 	.word	0xe000ed04

080014d8 <xQueueSemaphoreTake>:
{
 80014d8:	b530      	push	{r4, r5, lr}
 80014da:	b085      	sub	sp, #20
 80014dc:	4604      	mov	r4, r0
 80014de:	9101      	str	r1, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80014e0:	2500      	movs	r5, #0
 80014e2:	e038      	b.n	8001556 <xQueueSemaphoreTake+0x7e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80014e4:	3b01      	subs	r3, #1
 80014e6:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014e8:	6923      	ldr	r3, [r4, #16]
 80014ea:	b923      	cbnz	r3, 80014f6 <xQueueSemaphoreTake+0x1e>
				taskEXIT_CRITICAL();
 80014ec:	f7ff fd42 	bl	8000f74 <vPortExitCritical>
				return pdPASS;
 80014f0:	2001      	movs	r0, #1
}
 80014f2:	b005      	add	sp, #20
 80014f4:	bd30      	pop	{r4, r5, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014f6:	f104 0010 	add.w	r0, r4, #16
 80014fa:	f000 fbe7 	bl	8001ccc <xTaskRemoveFromEventList>
 80014fe:	2800      	cmp	r0, #0
 8001500:	d0f4      	beq.n	80014ec <xQueueSemaphoreTake+0x14>
						queueYIELD_IF_USING_PREEMPTION();
 8001502:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <xQueueSemaphoreTake+0x100>)
 8001504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	f3bf 8f4f 	dsb	sy
 800150e:	f3bf 8f6f 	isb	sy
 8001512:	e7eb      	b.n	80014ec <xQueueSemaphoreTake+0x14>
					taskEXIT_CRITICAL();
 8001514:	f7ff fd2e 	bl	8000f74 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001518:	2000      	movs	r0, #0
 800151a:	e7ea      	b.n	80014f2 <xQueueSemaphoreTake+0x1a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800151c:	a802      	add	r0, sp, #8
 800151e:	f000 fc11 	bl	8001d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001522:	2501      	movs	r5, #1
 8001524:	e021      	b.n	800156a <xQueueSemaphoreTake+0x92>
		prvLockQueue( pxQueue );
 8001526:	2300      	movs	r3, #0
 8001528:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800152c:	e029      	b.n	8001582 <xQueueSemaphoreTake+0xaa>
 800152e:	2300      	movs	r3, #0
 8001530:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001534:	e02b      	b.n	800158e <xQueueSemaphoreTake+0xb6>
				prvUnlockQueue( pxQueue );
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff fdec 	bl	8001114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800153c:	f000 fadc 	bl	8001af8 <xTaskResumeAll>
 8001540:	e009      	b.n	8001556 <xQueueSemaphoreTake+0x7e>
			prvUnlockQueue( pxQueue );
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff fde6 	bl	8001114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001548:	f000 fad6 	bl	8001af8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800154c:	4620      	mov	r0, r4
 800154e:	f7ff fd96 	bl	800107e <prvIsQueueEmpty>
 8001552:	2800      	cmp	r0, #0
 8001554:	d13d      	bne.n	80015d2 <xQueueSemaphoreTake+0xfa>
		taskENTER_CRITICAL();
 8001556:	f7ff fcfd 	bl	8000f54 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800155a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1c1      	bne.n	80014e4 <xQueueSemaphoreTake+0xc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001560:	9b01      	ldr	r3, [sp, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0d6      	beq.n	8001514 <xQueueSemaphoreTake+0x3c>
				else if( xEntryTimeSet == pdFALSE )
 8001566:	2d00      	cmp	r5, #0
 8001568:	d0d8      	beq.n	800151c <xQueueSemaphoreTake+0x44>
		taskEXIT_CRITICAL();
 800156a:	f7ff fd03 	bl	8000f74 <vPortExitCritical>
		vTaskSuspendAll();
 800156e:	f000 fa35 	bl	80019dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001572:	f7ff fcef 	bl	8000f54 <vPortEnterCritical>
 8001576:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800157a:	b25b      	sxtb	r3, r3
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001580:	d0d1      	beq.n	8001526 <xQueueSemaphoreTake+0x4e>
 8001582:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001586:	b25b      	sxtb	r3, r3
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800158c:	d0cf      	beq.n	800152e <xQueueSemaphoreTake+0x56>
 800158e:	f7ff fcf1 	bl	8000f74 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001592:	a901      	add	r1, sp, #4
 8001594:	a802      	add	r0, sp, #8
 8001596:	f000 fbe1 	bl	8001d5c <xTaskCheckForTimeOut>
 800159a:	2800      	cmp	r0, #0
 800159c:	d1d1      	bne.n	8001542 <xQueueSemaphoreTake+0x6a>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800159e:	4620      	mov	r0, r4
 80015a0:	f7ff fd6d 	bl	800107e <prvIsQueueEmpty>
 80015a4:	2800      	cmp	r0, #0
 80015a6:	d0c6      	beq.n	8001536 <xQueueSemaphoreTake+0x5e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80015a8:	9901      	ldr	r1, [sp, #4]
 80015aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80015ae:	f000 fb6d 	bl	8001c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80015b2:	4620      	mov	r0, r4
 80015b4:	f7ff fdae 	bl	8001114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80015b8:	f000 fa9e 	bl	8001af8 <xTaskResumeAll>
 80015bc:	2800      	cmp	r0, #0
 80015be:	d1ca      	bne.n	8001556 <xQueueSemaphoreTake+0x7e>
					portYIELD_WITHIN_API();
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <xQueueSemaphoreTake+0x100>)
 80015c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	f3bf 8f6f 	isb	sy
 80015d0:	e7c1      	b.n	8001556 <xQueueSemaphoreTake+0x7e>
				return errQUEUE_EMPTY;
 80015d2:	2000      	movs	r0, #0
 80015d4:	e78d      	b.n	80014f2 <xQueueSemaphoreTake+0x1a>
 80015d6:	bf00      	nop
 80015d8:	e000ed04 	.word	0xe000ed04

080015dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80015dc:	b570      	push	{r4, r5, r6, lr}
 80015de:	4604      	mov	r4, r0
 80015e0:	460d      	mov	r5, r1
 80015e2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80015e4:	f7ff fcb6 	bl	8000f54 <vPortEnterCritical>
 80015e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f2:	d00d      	beq.n	8001610 <vQueueWaitForMessageRestricted+0x34>
 80015f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015fe:	d00b      	beq.n	8001618 <vQueueWaitForMessageRestricted+0x3c>
 8001600:	f7ff fcb8 	bl	8000f74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001604:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001606:	b15b      	cbz	r3, 8001620 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001608:	4620      	mov	r0, r4
 800160a:	f7ff fd83 	bl	8001114 <prvUnlockQueue>
	}
 800160e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8001610:	2300      	movs	r3, #0
 8001612:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001616:	e7ed      	b.n	80015f4 <vQueueWaitForMessageRestricted+0x18>
 8001618:	2300      	movs	r3, #0
 800161a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800161e:	e7ef      	b.n	8001600 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001620:	4632      	mov	r2, r6
 8001622:	4629      	mov	r1, r5
 8001624:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001628:	f000 fb3e 	bl	8001ca8 <vTaskPlaceOnEventListRestricted>
 800162c:	e7ec      	b.n	8001608 <vQueueWaitForMessageRestricted+0x2c>
	...

08001630 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <prvResetNextTaskUnblockTime+0x24>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b13b      	cbz	r3, 8001648 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <prvResetNextTaskUnblockTime+0x24>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <prvResetNextTaskUnblockTime+0x28>)
 8001644:	601a      	str	r2, [r3, #0]
	}
}
 8001646:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <prvResetNextTaskUnblockTime+0x28>)
 800164a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20003a00 	.word	0x20003a00
 8001658:	20003ab0 	.word	0x20003ab0

0800165c <prvDeleteTCB>:
	{
 800165c:	b510      	push	{r4, lr}
 800165e:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8001660:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001662:	f7ff fbe3 	bl	8000e2c <vPortFree>
			vPortFree( pxTCB );
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff fbe0 	bl	8000e2c <vPortFree>
	}
 800166c:	bd10      	pop	{r4, pc}

0800166e <prvInitialiseNewTask>:
{
 800166e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001672:	4680      	mov	r8, r0
 8001674:	4699      	mov	r9, r3
 8001676:	9d08      	ldr	r5, [sp, #32]
 8001678:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800167a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800167c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800167e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001682:	3a01      	subs	r2, #1
 8001684:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001688:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800168c:	b361      	cbz	r1, 80016e8 <prvInitialiseNewTask+0x7a>
 800168e:	460a      	mov	r2, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001690:	2300      	movs	r3, #0
 8001692:	2b0f      	cmp	r3, #15
 8001694:	d807      	bhi.n	80016a6 <prvInitialiseNewTask+0x38>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001696:	5cd0      	ldrb	r0, [r2, r3]
 8001698:	18e1      	adds	r1, r4, r3
 800169a:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800169e:	5cd1      	ldrb	r1, [r2, r3]
 80016a0:	b109      	cbz	r1, 80016a6 <prvInitialiseNewTask+0x38>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016a2:	3301      	adds	r3, #1
 80016a4:	e7f5      	b.n	8001692 <prvInitialiseNewTask+0x24>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80016a6:	2300      	movs	r3, #0
 80016a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80016ac:	2d04      	cmp	r5, #4
 80016ae:	d900      	bls.n	80016b2 <prvInitialiseNewTask+0x44>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80016b0:	2504      	movs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
 80016b2:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80016b4:	1d20      	adds	r0, r4, #4
 80016b6:	f7ff fbc5 	bl	8000e44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80016ba:	f104 0018 	add.w	r0, r4, #24
 80016be:	f7ff fbc1 	bl	8000e44 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80016c2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016c4:	f1c5 0505 	rsb	r5, r5, #5
 80016c8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80016ca:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	6463      	str	r3, [r4, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80016d0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80016d4:	464a      	mov	r2, r9
 80016d6:	4641      	mov	r1, r8
 80016d8:	4630      	mov	r0, r6
 80016da:	f7ff fc11 	bl	8000f00 <pxPortInitialiseStack>
 80016de:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80016e0:	b107      	cbz	r7, 80016e4 <prvInitialiseNewTask+0x76>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80016e2:	603c      	str	r4, [r7, #0]
}
 80016e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80016ee:	e7dd      	b.n	80016ac <prvInitialiseNewTask+0x3e>

080016f0 <prvInitialiseTaskLists>:
{
 80016f0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016f2:	2400      	movs	r4, #0
 80016f4:	e007      	b.n	8001706 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80016f6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80016fa:	0093      	lsls	r3, r2, #2
 80016fc:	480e      	ldr	r0, [pc, #56]	; (8001738 <prvInitialiseTaskLists+0x48>)
 80016fe:	4418      	add	r0, r3
 8001700:	f7ff fb95 	bl	8000e2e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001704:	3401      	adds	r4, #1
 8001706:	2c04      	cmp	r4, #4
 8001708:	d9f5      	bls.n	80016f6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800170a:	4d0c      	ldr	r5, [pc, #48]	; (800173c <prvInitialiseTaskLists+0x4c>)
 800170c:	4628      	mov	r0, r5
 800170e:	f7ff fb8e 	bl	8000e2e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001712:	4c0b      	ldr	r4, [pc, #44]	; (8001740 <prvInitialiseTaskLists+0x50>)
 8001714:	4620      	mov	r0, r4
 8001716:	f7ff fb8a 	bl	8000e2e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800171a:	480a      	ldr	r0, [pc, #40]	; (8001744 <prvInitialiseTaskLists+0x54>)
 800171c:	f7ff fb87 	bl	8000e2e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001720:	4809      	ldr	r0, [pc, #36]	; (8001748 <prvInitialiseTaskLists+0x58>)
 8001722:	f7ff fb84 	bl	8000e2e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001726:	4809      	ldr	r0, [pc, #36]	; (800174c <prvInitialiseTaskLists+0x5c>)
 8001728:	f7ff fb81 	bl	8000e2e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <prvInitialiseTaskLists+0x60>)
 800172e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <prvInitialiseTaskLists+0x64>)
 8001732:	601c      	str	r4, [r3, #0]
}
 8001734:	bd38      	pop	{r3, r4, r5, pc}
 8001736:	bf00      	nop
 8001738:	20003a08 	.word	0x20003a08
 800173c:	20003a84 	.word	0x20003a84
 8001740:	20003a98 	.word	0x20003a98
 8001744:	20003ab8 	.word	0x20003ab8
 8001748:	20003ae4 	.word	0x20003ae4
 800174c:	20003ad0 	.word	0x20003ad0
 8001750:	20003a00 	.word	0x20003a00
 8001754:	20003a04 	.word	0x20003a04

08001758 <prvAddNewTaskToReadyList>:
{
 8001758:	b510      	push	{r4, lr}
 800175a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800175c:	f7ff fbfa 	bl	8000f54 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001760:	4a20      	ldr	r2, [pc, #128]	; (80017e4 <prvAddNewTaskToReadyList+0x8c>)
 8001762:	6813      	ldr	r3, [r2, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <prvAddNewTaskToReadyList+0x90>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b15b      	cbz	r3, 8001786 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <prvAddNewTaskToReadyList+0x94>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	b96b      	cbnz	r3, 8001790 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <prvAddNewTaskToReadyList+0x90>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800177a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800177c:	429a      	cmp	r2, r3
 800177e:	d807      	bhi.n	8001790 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <prvAddNewTaskToReadyList+0x90>)
 8001782:	601c      	str	r4, [r3, #0]
 8001784:	e004      	b.n	8001790 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <prvAddNewTaskToReadyList+0x90>)
 8001788:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800178a:	6813      	ldr	r3, [r2, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d026      	beq.n	80017de <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <prvAddNewTaskToReadyList+0x98>)
 8001792:	6813      	ldr	r3, [r2, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001798:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800179a:	2201      	movs	r2, #1
 800179c:	409a      	lsls	r2, r3
 800179e:	4915      	ldr	r1, [pc, #84]	; (80017f4 <prvAddNewTaskToReadyList+0x9c>)
 80017a0:	6808      	ldr	r0, [r1, #0]
 80017a2:	4302      	orrs	r2, r0
 80017a4:	600a      	str	r2, [r1, #0]
 80017a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017aa:	009a      	lsls	r2, r3, #2
 80017ac:	1d21      	adds	r1, r4, #4
 80017ae:	4812      	ldr	r0, [pc, #72]	; (80017f8 <prvAddNewTaskToReadyList+0xa0>)
 80017b0:	4410      	add	r0, r2
 80017b2:	f7ff fb4a 	bl	8000e4a <vListInsertEnd>
	taskEXIT_CRITICAL();
 80017b6:	f7ff fbdd 	bl	8000f74 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <prvAddNewTaskToReadyList+0x94>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b16b      	cbz	r3, 80017dc <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <prvAddNewTaskToReadyList+0x90>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d207      	bcs.n	80017dc <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <prvAddNewTaskToReadyList+0xa4>)
 80017ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f3bf 8f4f 	dsb	sy
 80017d8:	f3bf 8f6f 	isb	sy
}
 80017dc:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80017de:	f7ff ff87 	bl	80016f0 <prvInitialiseTaskLists>
 80017e2:	e7d5      	b.n	8001790 <prvAddNewTaskToReadyList+0x38>
 80017e4:	20003a6c 	.word	0x20003a6c
 80017e8:	200039fc 	.word	0x200039fc
 80017ec:	20003acc 	.word	0x20003acc
 80017f0:	20003a7c 	.word	0x20003a7c
 80017f4:	20003a80 	.word	0x20003a80
 80017f8:	20003a08 	.word	0x20003a08
 80017fc:	e000ed04 	.word	0xe000ed04

08001800 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <prvCheckTasksWaitingTermination+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	b1d3      	cbz	r3, 800183c <prvCheckTasksWaitingTermination+0x3c>
{
 8001806:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8001808:	f7ff fba4 	bl	8000f54 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <prvCheckTasksWaitingTermination+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001812:	1d20      	adds	r0, r4, #4
 8001814:	f7ff fb3f 	bl	8000e96 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <prvCheckTasksWaitingTermination+0x48>)
 800181a:	6813      	ldr	r3, [r2, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001820:	4a07      	ldr	r2, [pc, #28]	; (8001840 <prvCheckTasksWaitingTermination+0x40>)
 8001822:	6813      	ldr	r3, [r2, #0]
 8001824:	3b01      	subs	r3, #1
 8001826:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8001828:	f7ff fba4 	bl	8000f74 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800182c:	4620      	mov	r0, r4
 800182e:	f7ff ff15 	bl	800165c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001832:	4b03      	ldr	r3, [pc, #12]	; (8001840 <prvCheckTasksWaitingTermination+0x40>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1e6      	bne.n	8001808 <prvCheckTasksWaitingTermination+0x8>
}
 800183a:	bd10      	pop	{r4, pc}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20003a70 	.word	0x20003a70
 8001844:	20003ae4 	.word	0x20003ae4
 8001848:	20003a6c 	.word	0x20003a6c

0800184c <prvIdleTask>:
{
 800184c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800184e:	f7ff ffd7 	bl	8001800 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <prvIdleTask+0x20>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d9f9      	bls.n	800184e <prvIdleTask+0x2>
				taskYIELD();
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <prvIdleTask+0x24>)
 800185c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f3bf 8f4f 	dsb	sy
 8001866:	f3bf 8f6f 	isb	sy
 800186a:	e7f0      	b.n	800184e <prvIdleTask+0x2>
 800186c:	20003a08 	.word	0x20003a08
 8001870:	e000ed04 	.word	0xe000ed04

08001874 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001874:	b570      	push	{r4, r5, r6, lr}
 8001876:	4604      	mov	r4, r0
 8001878:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <prvAddCurrentTaskToDelayedList+0x7c>)
 800187c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800187e:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <prvAddCurrentTaskToDelayedList+0x80>)
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	3004      	adds	r0, #4
 8001884:	f7ff fb07 	bl	8000e96 <uxListRemove>
 8001888:	b950      	cbnz	r0, 80018a0 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <prvAddCurrentTaskToDelayedList+0x80>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001890:	2301      	movs	r3, #1
 8001892:	fa03 f202 	lsl.w	r2, r3, r2
 8001896:	4918      	ldr	r1, [pc, #96]	; (80018f8 <prvAddCurrentTaskToDelayedList+0x84>)
 8001898:	680b      	ldr	r3, [r1, #0]
 800189a:	ea23 0302 	bic.w	r3, r3, r2
 800189e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80018a0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80018a4:	d013      	beq.n	80018ce <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80018a6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <prvAddCurrentTaskToDelayedList+0x80>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80018ae:	42a5      	cmp	r5, r4
 80018b0:	d816      	bhi.n	80018e0 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <prvAddCurrentTaskToDelayedList+0x88>)
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <prvAddCurrentTaskToDelayedList+0x80>)
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	3104      	adds	r1, #4
 80018bc:	f7ff fad1 	bl	8000e62 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <prvAddCurrentTaskToDelayedList+0x8c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	42a3      	cmp	r3, r4
 80018c6:	d912      	bls.n	80018ee <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <prvAddCurrentTaskToDelayedList+0x8c>)
 80018ca:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80018cc:	e00f      	b.n	80018ee <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80018ce:	2e00      	cmp	r6, #0
 80018d0:	d0e9      	beq.n	80018a6 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <prvAddCurrentTaskToDelayedList+0x80>)
 80018d4:	6819      	ldr	r1, [r3, #0]
 80018d6:	3104      	adds	r1, #4
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <prvAddCurrentTaskToDelayedList+0x90>)
 80018da:	f7ff fab6 	bl	8000e4a <vListInsertEnd>
 80018de:	e006      	b.n	80018ee <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <prvAddCurrentTaskToDelayedList+0x94>)
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <prvAddCurrentTaskToDelayedList+0x80>)
 80018e6:	6819      	ldr	r1, [r3, #0]
 80018e8:	3104      	adds	r1, #4
 80018ea:	f7ff faba 	bl	8000e62 <vListInsert>
}
 80018ee:	bd70      	pop	{r4, r5, r6, pc}
 80018f0:	20003af8 	.word	0x20003af8
 80018f4:	200039fc 	.word	0x200039fc
 80018f8:	20003a80 	.word	0x20003a80
 80018fc:	20003a00 	.word	0x20003a00
 8001900:	20003ab0 	.word	0x20003ab0
 8001904:	20003ad0 	.word	0x20003ad0
 8001908:	20003a04 	.word	0x20003a04

0800190c <xTaskCreate>:
	{
 800190c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001910:	b085      	sub	sp, #20
 8001912:	4607      	mov	r7, r0
 8001914:	4688      	mov	r8, r1
 8001916:	4615      	mov	r5, r2
 8001918:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800191a:	0090      	lsls	r0, r2, #2
 800191c:	f7ff fa56 	bl	8000dcc <pvPortMalloc>
			if( pxStack != NULL )
 8001920:	b1f8      	cbz	r0, 8001962 <xTaskCreate+0x56>
 8001922:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001924:	204c      	movs	r0, #76	; 0x4c
 8001926:	f7ff fa51 	bl	8000dcc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800192a:	4604      	mov	r4, r0
 800192c:	b1a8      	cbz	r0, 800195a <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800192e:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8001930:	b1d4      	cbz	r4, 8001968 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001932:	2300      	movs	r3, #0
 8001934:	9303      	str	r3, [sp, #12]
 8001936:	9402      	str	r4, [sp, #8]
 8001938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	464b      	mov	r3, r9
 8001942:	462a      	mov	r2, r5
 8001944:	4641      	mov	r1, r8
 8001946:	4638      	mov	r0, r7
 8001948:	f7ff fe91 	bl	800166e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800194c:	4620      	mov	r0, r4
 800194e:	f7ff ff03 	bl	8001758 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001952:	2001      	movs	r0, #1
	}
 8001954:	b005      	add	sp, #20
 8001956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800195a:	4630      	mov	r0, r6
 800195c:	f7ff fa66 	bl	8000e2c <vPortFree>
 8001960:	e7e6      	b.n	8001930 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001966:	e7f5      	b.n	8001954 <xTaskCreate+0x48>
 8001968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800196c:	e7f2      	b.n	8001954 <xTaskCreate+0x48>
	...

08001970 <vTaskStartScheduler>:
{
 8001970:	b500      	push	{lr}
 8001972:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <vTaskStartScheduler+0x54>)
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	2300      	movs	r3, #0
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	4912      	ldr	r1, [pc, #72]	; (80019c8 <vTaskStartScheduler+0x58>)
 8001980:	4812      	ldr	r0, [pc, #72]	; (80019cc <vTaskStartScheduler+0x5c>)
 8001982:	f7ff ffc3 	bl	800190c <xTaskCreate>
		if( xReturn == pdPASS )
 8001986:	2801      	cmp	r0, #1
 8001988:	d004      	beq.n	8001994 <vTaskStartScheduler+0x24>
	if( xReturn == pdPASS )
 800198a:	2801      	cmp	r0, #1
 800198c:	d005      	beq.n	800199a <vTaskStartScheduler+0x2a>
}
 800198e:	b003      	add	sp, #12
 8001990:	f85d fb04 	ldr.w	pc, [sp], #4
			xReturn = xTimerCreateTimerTask();
 8001994:	f000 fa9c 	bl	8001ed0 <xTimerCreateTimerTask>
 8001998:	e7f7      	b.n	800198a <vTaskStartScheduler+0x1a>
	__asm volatile
 800199a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800199e:	f383 8811 	msr	BASEPRI, r3
 80019a2:	f3bf 8f6f 	isb	sy
 80019a6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <vTaskStartScheduler+0x60>)
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <vTaskStartScheduler+0x64>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <vTaskStartScheduler+0x68>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80019be:	f7ff fb33 	bl	8001028 <xPortStartScheduler>
}
 80019c2:	e7e4      	b.n	800198e <vTaskStartScheduler+0x1e>
 80019c4:	20003aac 	.word	0x20003aac
 80019c8:	08006e24 	.word	0x08006e24
 80019cc:	0800184d 	.word	0x0800184d
 80019d0:	20003ab0 	.word	0x20003ab0
 80019d4:	20003acc 	.word	0x20003acc
 80019d8:	20003af8 	.word	0x20003af8

080019dc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80019dc:	4a02      	ldr	r2, [pc, #8]	; (80019e8 <vTaskSuspendAll+0xc>)
 80019de:	6813      	ldr	r3, [r2, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20003a78 	.word	0x20003a78

080019ec <xTaskGetTickCount>:
		xTicks = xTickCount;
 80019ec:	4b01      	ldr	r3, [pc, #4]	; (80019f4 <xTaskGetTickCount+0x8>)
 80019ee:	6818      	ldr	r0, [r3, #0]
}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20003af8 	.word	0x20003af8

080019f8 <xTaskIncrementTick>:
{
 80019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019fa:	4b34      	ldr	r3, [pc, #208]	; (8001acc <xTaskIncrementTick+0xd4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d158      	bne.n	8001ab4 <xTaskIncrementTick+0xbc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a02:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <xTaskIncrementTick+0xd8>)
 8001a04:	681d      	ldr	r5, [r3, #0]
 8001a06:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8001a08:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a0a:	b185      	cbz	r5, 8001a2e <xTaskIncrementTick+0x36>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a0c:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <xTaskIncrementTick+0xdc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	42ab      	cmp	r3, r5
 8001a12:	d945      	bls.n	8001aa0 <xTaskIncrementTick+0xa8>
BaseType_t xSwitchRequired = pdFALSE;
 8001a14:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <xTaskIncrementTick+0xe0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a20:	009a      	lsls	r2, r3, #2
 8001a22:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <xTaskIncrementTick+0xe4>)
 8001a24:	589b      	ldr	r3, [r3, r2]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d949      	bls.n	8001abe <xTaskIncrementTick+0xc6>
				xSwitchRequired = pdTRUE;
 8001a2a:	2701      	movs	r7, #1
 8001a2c:	e047      	b.n	8001abe <xTaskIncrementTick+0xc6>
			taskSWITCH_DELAYED_LISTS();
 8001a2e:	4a2c      	ldr	r2, [pc, #176]	; (8001ae0 <xTaskIncrementTick+0xe8>)
 8001a30:	6811      	ldr	r1, [r2, #0]
 8001a32:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <xTaskIncrementTick+0xec>)
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	6010      	str	r0, [r2, #0]
 8001a38:	6019      	str	r1, [r3, #0]
 8001a3a:	4a2b      	ldr	r2, [pc, #172]	; (8001ae8 <xTaskIncrementTick+0xf0>)
 8001a3c:	6813      	ldr	r3, [r2, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	f7ff fdf5 	bl	8001630 <prvResetNextTaskUnblockTime>
 8001a46:	e7e1      	b.n	8001a0c <xTaskIncrementTick+0x14>
							xSwitchRequired = pdTRUE;
 8001a48:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <xTaskIncrementTick+0xe8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b343      	cbz	r3, 8001aa4 <xTaskIncrementTick+0xac>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a52:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <xTaskIncrementTick+0xe8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a5a:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8001a5c:	429d      	cmp	r5, r3
 8001a5e:	d326      	bcc.n	8001aae <xTaskIncrementTick+0xb6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a60:	1d26      	adds	r6, r4, #4
 8001a62:	4630      	mov	r0, r6
 8001a64:	f7ff fa17 	bl	8000e96 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a6a:	b11b      	cbz	r3, 8001a74 <xTaskIncrementTick+0x7c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a6c:	f104 0018 	add.w	r0, r4, #24
 8001a70:	f7ff fa11 	bl	8000e96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a76:	2201      	movs	r2, #1
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	491c      	ldr	r1, [pc, #112]	; (8001aec <xTaskIncrementTick+0xf4>)
 8001a7c:	6808      	ldr	r0, [r1, #0]
 8001a7e:	4302      	orrs	r2, r0
 8001a80:	600a      	str	r2, [r1, #0]
 8001a82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a86:	009a      	lsls	r2, r3, #2
 8001a88:	4631      	mov	r1, r6
 8001a8a:	4814      	ldr	r0, [pc, #80]	; (8001adc <xTaskIncrementTick+0xe4>)
 8001a8c:	4410      	add	r0, r2
 8001a8e:	f7ff f9dc 	bl	8000e4a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <xTaskIncrementTick+0xe0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d2d4      	bcs.n	8001a48 <xTaskIncrementTick+0x50>
 8001a9e:	e7d4      	b.n	8001a4a <xTaskIncrementTick+0x52>
BaseType_t xSwitchRequired = pdFALSE;
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	e7d2      	b.n	8001a4a <xTaskIncrementTick+0x52>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <xTaskIncrementTick+0xdc>)
 8001aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aaa:	601a      	str	r2, [r3, #0]
					break;
 8001aac:	e7b3      	b.n	8001a16 <xTaskIncrementTick+0x1e>
						xNextTaskUnblockTime = xItemValue;
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <xTaskIncrementTick+0xdc>)
 8001ab0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001ab2:	e7b0      	b.n	8001a16 <xTaskIncrementTick+0x1e>
		++uxPendedTicks;
 8001ab4:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <xTaskIncrementTick+0xf8>)
 8001ab6:	6813      	ldr	r3, [r2, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001abc:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <xTaskIncrementTick+0xfc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	b103      	cbz	r3, 8001ac6 <xTaskIncrementTick+0xce>
			xSwitchRequired = pdTRUE;
 8001ac4:	2701      	movs	r7, #1
}
 8001ac6:	4638      	mov	r0, r7
 8001ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20003a78 	.word	0x20003a78
 8001ad0:	20003af8 	.word	0x20003af8
 8001ad4:	20003ab0 	.word	0x20003ab0
 8001ad8:	200039fc 	.word	0x200039fc
 8001adc:	20003a08 	.word	0x20003a08
 8001ae0:	20003a00 	.word	0x20003a00
 8001ae4:	20003a04 	.word	0x20003a04
 8001ae8:	20003ab4 	.word	0x20003ab4
 8001aec:	20003a80 	.word	0x20003a80
 8001af0:	20003a74 	.word	0x20003a74
 8001af4:	20003afc 	.word	0x20003afc

08001af8 <xTaskResumeAll>:
{
 8001af8:	b538      	push	{r3, r4, r5, lr}
	taskENTER_CRITICAL();
 8001afa:	f7ff fa2b 	bl	8000f54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001afe:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <xTaskResumeAll+0xc0>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	3a01      	subs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d14d      	bne.n	8001ba8 <xTaskResumeAll+0xb0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <xTaskResumeAll+0xc4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	b33b      	cbz	r3, 8001b62 <xTaskResumeAll+0x6a>
TCB_t *pxTCB = NULL;
 8001b12:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <xTaskResumeAll+0xc8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	b32b      	cbz	r3, 8001b66 <xTaskResumeAll+0x6e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b1a:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <xTaskResumeAll+0xc8>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b20:	f104 0018 	add.w	r0, r4, #24
 8001b24:	f7ff f9b7 	bl	8000e96 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b28:	1d25      	adds	r5, r4, #4
 8001b2a:	4628      	mov	r0, r5
 8001b2c:	f7ff f9b3 	bl	8000e96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b32:	2201      	movs	r2, #1
 8001b34:	409a      	lsls	r2, r3
 8001b36:	4923      	ldr	r1, [pc, #140]	; (8001bc4 <xTaskResumeAll+0xcc>)
 8001b38:	6808      	ldr	r0, [r1, #0]
 8001b3a:	4302      	orrs	r2, r0
 8001b3c:	600a      	str	r2, [r1, #0]
 8001b3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b42:	009a      	lsls	r2, r3, #2
 8001b44:	4629      	mov	r1, r5
 8001b46:	4820      	ldr	r0, [pc, #128]	; (8001bc8 <xTaskResumeAll+0xd0>)
 8001b48:	4410      	add	r0, r2
 8001b4a:	f7ff f97e 	bl	8000e4a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <xTaskResumeAll+0xd4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d3dc      	bcc.n	8001b14 <xTaskResumeAll+0x1c>
						xYieldPending = pdTRUE;
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <xTaskResumeAll+0xd8>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e7d8      	b.n	8001b14 <xTaskResumeAll+0x1c>
BaseType_t xAlreadyYielded = pdFALSE;
 8001b62:	2400      	movs	r4, #0
 8001b64:	e021      	b.n	8001baa <xTaskResumeAll+0xb2>
				if( pxTCB != NULL )
 8001b66:	b10c      	cbz	r4, 8001b6c <xTaskResumeAll+0x74>
					prvResetNextTaskUnblockTime();
 8001b68:	f7ff fd62 	bl	8001630 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <xTaskResumeAll+0xdc>)
 8001b6e:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001b70:	b974      	cbnz	r4, 8001b90 <xTaskResumeAll+0x98>
				if( xYieldPending != pdFALSE )
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <xTaskResumeAll+0xd8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b1e3      	cbz	r3, 8001bb2 <xTaskResumeAll+0xba>
					taskYIELD_IF_USING_PREEMPTION();
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <xTaskResumeAll+0xe0>)
 8001b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f3bf 8f4f 	dsb	sy
 8001b84:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001b88:	2401      	movs	r4, #1
 8001b8a:	e00e      	b.n	8001baa <xTaskResumeAll+0xb2>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001b8c:	3c01      	subs	r4, #1
 8001b8e:	d007      	beq.n	8001ba0 <xTaskResumeAll+0xa8>
							if( xTaskIncrementTick() != pdFALSE )
 8001b90:	f7ff ff32 	bl	80019f8 <xTaskIncrementTick>
 8001b94:	2800      	cmp	r0, #0
 8001b96:	d0f9      	beq.n	8001b8c <xTaskResumeAll+0x94>
								xYieldPending = pdTRUE;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <xTaskResumeAll+0xd8>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e7f5      	b.n	8001b8c <xTaskResumeAll+0x94>
						uxPendedTicks = 0;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <xTaskResumeAll+0xdc>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	e7e4      	b.n	8001b72 <xTaskResumeAll+0x7a>
BaseType_t xAlreadyYielded = pdFALSE;
 8001ba8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001baa:	f7ff f9e3 	bl	8000f74 <vPortExitCritical>
}
 8001bae:	4620      	mov	r0, r4
 8001bb0:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8001bb2:	2400      	movs	r4, #0
 8001bb4:	e7f9      	b.n	8001baa <xTaskResumeAll+0xb2>
 8001bb6:	bf00      	nop
 8001bb8:	20003a78 	.word	0x20003a78
 8001bbc:	20003a6c 	.word	0x20003a6c
 8001bc0:	20003ab8 	.word	0x20003ab8
 8001bc4:	20003a80 	.word	0x20003a80
 8001bc8:	20003a08 	.word	0x20003a08
 8001bcc:	200039fc 	.word	0x200039fc
 8001bd0:	20003afc 	.word	0x20003afc
 8001bd4:	20003a74 	.word	0x20003a74
 8001bd8:	e000ed04 	.word	0xe000ed04

08001bdc <vTaskDelay>:
	{
 8001bdc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001bde:	b940      	cbnz	r0, 8001bf2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <vTaskDelay+0x30>)
 8001be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f3bf 8f4f 	dsb	sy
 8001bec:	f3bf 8f6f 	isb	sy
	}
 8001bf0:	bd10      	pop	{r4, pc}
 8001bf2:	4604      	mov	r4, r0
			vTaskSuspendAll();
 8001bf4:	f7ff fef2 	bl	80019dc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7ff fe3a 	bl	8001874 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001c00:	f7ff ff7a 	bl	8001af8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001c04:	2800      	cmp	r0, #0
 8001c06:	d0eb      	beq.n	8001be0 <vTaskDelay+0x4>
 8001c08:	e7f2      	b.n	8001bf0 <vTaskDelay+0x14>
 8001c0a:	bf00      	nop
 8001c0c:	e000ed04 	.word	0xe000ed04

08001c10 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <vTaskSwitchContext+0x68>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	bb1b      	cbnz	r3, 8001c5e <vTaskSwitchContext+0x4e>
{
 8001c16:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <vTaskSwitchContext+0x6c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <vTaskSwitchContext+0x70>)
 8001c20:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f1c3 031f 	rsb	r3, r3, #31
 8001c2c:	4815      	ldr	r0, [pc, #84]	; (8001c84 <vTaskSwitchContext+0x74>)
 8001c2e:	009a      	lsls	r2, r3, #2
 8001c30:	18d4      	adds	r4, r2, r3
 8001c32:	00a1      	lsls	r1, r4, #2
 8001c34:	4401      	add	r1, r0
 8001c36:	684c      	ldr	r4, [r1, #4]
 8001c38:	6864      	ldr	r4, [r4, #4]
 8001c3a:	604c      	str	r4, [r1, #4]
 8001c3c:	441a      	add	r2, r3
 8001c3e:	0091      	lsls	r1, r2, #2
 8001c40:	3108      	adds	r1, #8
 8001c42:	4408      	add	r0, r1
 8001c44:	4284      	cmp	r4, r0
 8001c46:	d00e      	beq.n	8001c66 <vTaskSwitchContext+0x56>
 8001c48:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001c4c:	009a      	lsls	r2, r3, #2
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <vTaskSwitchContext+0x74>)
 8001c50:	4413      	add	r3, r2
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <vTaskSwitchContext+0x78>)
 8001c58:	601a      	str	r2, [r3, #0]
}
 8001c5a:	bc10      	pop	{r4}
 8001c5c:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <vTaskSwitchContext+0x6c>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c66:	6860      	ldr	r0, [r4, #4]
 8001c68:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001c6c:	0091      	lsls	r1, r2, #2
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <vTaskSwitchContext+0x74>)
 8001c70:	440a      	add	r2, r1
 8001c72:	6050      	str	r0, [r2, #4]
 8001c74:	e7e8      	b.n	8001c48 <vTaskSwitchContext+0x38>
 8001c76:	bf00      	nop
 8001c78:	20003a78 	.word	0x20003a78
 8001c7c:	20003afc 	.word	0x20003afc
 8001c80:	20003a80 	.word	0x20003a80
 8001c84:	20003a08 	.word	0x20003a08
 8001c88:	200039fc 	.word	0x200039fc

08001c8c <vTaskPlaceOnEventList>:
{
 8001c8c:	b510      	push	{r4, lr}
 8001c8e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <vTaskPlaceOnEventList+0x18>)
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	3118      	adds	r1, #24
 8001c96:	f7ff f8e4 	bl	8000e62 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7ff fde9 	bl	8001874 <prvAddCurrentTaskToDelayedList>
}
 8001ca2:	bd10      	pop	{r4, pc}
 8001ca4:	200039fc 	.word	0x200039fc

08001ca8 <vTaskPlaceOnEventListRestricted>:
	{
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	460d      	mov	r5, r1
 8001cac:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <vTaskPlaceOnEventListRestricted+0x20>)
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	3118      	adds	r1, #24
 8001cb4:	f7ff f8c9 	bl	8000e4a <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8001cb8:	b10c      	cbz	r4, 8001cbe <vTaskPlaceOnEventListRestricted+0x16>
			xTicksToWait = portMAX_DELAY;
 8001cba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	f7ff fdd7 	bl	8001874 <prvAddCurrentTaskToDelayedList>
	}
 8001cc6:	bd38      	pop	{r3, r4, r5, pc}
 8001cc8:	200039fc 	.word	0x200039fc

08001ccc <xTaskRemoveFromEventList>:
{
 8001ccc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cce:	68c3      	ldr	r3, [r0, #12]
 8001cd0:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001cd2:	f104 0518 	add.w	r5, r4, #24
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	f7ff f8dd 	bl	8000e96 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <xTaskRemoveFromEventList+0x60>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	b9e3      	cbnz	r3, 8001d1c <xTaskRemoveFromEventList+0x50>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001ce2:	1d25      	adds	r5, r4, #4
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	f7ff f8d6 	bl	8000e96 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001cea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cec:	2201      	movs	r2, #1
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	490f      	ldr	r1, [pc, #60]	; (8001d30 <xTaskRemoveFromEventList+0x64>)
 8001cf2:	6808      	ldr	r0, [r1, #0]
 8001cf4:	4302      	orrs	r2, r0
 8001cf6:	600a      	str	r2, [r1, #0]
 8001cf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cfc:	009a      	lsls	r2, r3, #2
 8001cfe:	4629      	mov	r1, r5
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <xTaskRemoveFromEventList+0x68>)
 8001d02:	4410      	add	r0, r2
 8001d04:	f7ff f8a1 	bl	8000e4a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <xTaskRemoveFromEventList+0x6c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d908      	bls.n	8001d26 <xTaskRemoveFromEventList+0x5a>
		xYieldPending = pdTRUE;
 8001d14:	2001      	movs	r0, #1
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <xTaskRemoveFromEventList+0x70>)
 8001d18:	6018      	str	r0, [r3, #0]
}
 8001d1a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	4808      	ldr	r0, [pc, #32]	; (8001d40 <xTaskRemoveFromEventList+0x74>)
 8001d20:	f7ff f893 	bl	8000e4a <vListInsertEnd>
 8001d24:	e7f0      	b.n	8001d08 <xTaskRemoveFromEventList+0x3c>
		xReturn = pdFALSE;
 8001d26:	2000      	movs	r0, #0
	return xReturn;
 8001d28:	e7f7      	b.n	8001d1a <xTaskRemoveFromEventList+0x4e>
 8001d2a:	bf00      	nop
 8001d2c:	20003a78 	.word	0x20003a78
 8001d30:	20003a80 	.word	0x20003a80
 8001d34:	20003a08 	.word	0x20003a08
 8001d38:	200039fc 	.word	0x200039fc
 8001d3c:	20003afc 	.word	0x20003afc
 8001d40:	20003ab8 	.word	0x20003ab8

08001d44 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <vTaskInternalSetTimeOutState+0x10>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001d4a:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <vTaskInternalSetTimeOutState+0x14>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6043      	str	r3, [r0, #4]
}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20003ab4 	.word	0x20003ab4
 8001d58:	20003af8 	.word	0x20003af8

08001d5c <xTaskCheckForTimeOut>:
{
 8001d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5e:	4604      	mov	r4, r0
 8001d60:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8001d62:	f7ff f8f7 	bl	8000f54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <xTaskCheckForTimeOut+0x50>)
 8001d68:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001d6a:	6861      	ldr	r1, [r4, #4]
 8001d6c:	1a50      	subs	r0, r2, r1
			if( *pxTicksToWait == portMAX_DELAY )
 8001d6e:	682b      	ldr	r3, [r5, #0]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d74:	d016      	beq.n	8001da4 <xTaskCheckForTimeOut+0x48>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001d76:	6827      	ldr	r7, [r4, #0]
 8001d78:	4e0d      	ldr	r6, [pc, #52]	; (8001db0 <xTaskCheckForTimeOut+0x54>)
 8001d7a:	6836      	ldr	r6, [r6, #0]
 8001d7c:	42b7      	cmp	r7, r6
 8001d7e:	d001      	beq.n	8001d84 <xTaskCheckForTimeOut+0x28>
 8001d80:	4291      	cmp	r1, r2
 8001d82:	d911      	bls.n	8001da8 <xTaskCheckForTimeOut+0x4c>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001d84:	4283      	cmp	r3, r0
 8001d86:	d806      	bhi.n	8001d96 <xTaskCheckForTimeOut+0x3a>
			*pxTicksToWait = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8001d8c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8001d8e:	f7ff f8f1 	bl	8000f74 <vPortExitCritical>
}
 8001d92:	4620      	mov	r0, r4
 8001d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait -= xElapsedTime;
 8001d96:	1a1b      	subs	r3, r3, r0
 8001d98:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f7ff ffd2 	bl	8001d44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001da0:	2400      	movs	r4, #0
 8001da2:	e7f4      	b.n	8001d8e <xTaskCheckForTimeOut+0x32>
				xReturn = pdFALSE;
 8001da4:	2400      	movs	r4, #0
 8001da6:	e7f2      	b.n	8001d8e <xTaskCheckForTimeOut+0x32>
			xReturn = pdTRUE;
 8001da8:	2401      	movs	r4, #1
 8001daa:	e7f0      	b.n	8001d8e <xTaskCheckForTimeOut+0x32>
 8001dac:	20003af8 	.word	0x20003af8
 8001db0:	20003ab4 	.word	0x20003ab4

08001db4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8001db4:	4b01      	ldr	r3, [pc, #4]	; (8001dbc <vTaskMissedYield+0x8>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
}
 8001dba:	4770      	bx	lr
 8001dbc:	20003afc 	.word	0x20003afc

08001dc0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <xTaskGetSchedulerState+0x18>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	b133      	cbz	r3, 8001dd4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dc6:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <xTaskGetSchedulerState+0x1c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b10b      	cbz	r3, 8001dd0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8001dcc:	2000      	movs	r0, #0
	}
 8001dce:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	4770      	bx	lr
 8001dd8:	20003acc 	.word	0x20003acc
 8001ddc:	20003a78 	.word	0x20003a78

08001de0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <prvGetNextExpireTime+0x1c>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	6813      	ldr	r3, [r2, #0]
 8001de6:	b92b      	cbnz	r3, 8001df4 <prvGetNextExpireTime+0x14>
 8001de8:	2301      	movs	r3, #1
 8001dea:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8001dec:	b923      	cbnz	r3, 8001df8 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001dee:	68d3      	ldr	r3, [r2, #12]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001df4:	2300      	movs	r3, #0
 8001df6:	e7f8      	b.n	8001dea <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8001df8:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8001dfa:	4770      	bx	lr
 8001dfc:	20003b00 	.word	0x20003b00

08001e00 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8001e00:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001e02:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001e04:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8001e06:	4291      	cmp	r1, r2
 8001e08:	d80c      	bhi.n	8001e24 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e0a:	1ad2      	subs	r2, r2, r3
 8001e0c:	6983      	ldr	r3, [r0, #24]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d301      	bcc.n	8001e16 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8001e12:	2001      	movs	r0, #1
 8001e14:	e010      	b.n	8001e38 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001e16:	1d01      	adds	r1, r0, #4
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <prvInsertTimerInActiveList+0x40>)
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	f7ff f821 	bl	8000e62 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8001e20:	2000      	movs	r0, #0
 8001e22:	e009      	b.n	8001e38 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d201      	bcs.n	8001e2c <prvInsertTimerInActiveList+0x2c>
 8001e28:	4299      	cmp	r1, r3
 8001e2a:	d206      	bcs.n	8001e3a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001e2c:	1d01      	adds	r1, r0, #4
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <prvInsertTimerInActiveList+0x44>)
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	f7ff f816 	bl	8000e62 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8001e36:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8001e38:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 8001e3a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8001e3c:	e7fc      	b.n	8001e38 <prvInsertTimerInActiveList+0x38>
 8001e3e:	bf00      	nop
 8001e40:	20003b04 	.word	0x20003b04
 8001e44:	20003b00 	.word	0x20003b00

08001e48 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8001e48:	b538      	push	{r3, r4, r5, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8001e4a:	f7ff f883 	bl	8000f54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <prvCheckForValidListAndQueue+0x3c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	b113      	cbz	r3, 8001e5a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001e54:	f7ff f88e 	bl	8000f74 <vPortExitCritical>
}
 8001e58:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8001e5a:	4d0b      	ldr	r5, [pc, #44]	; (8001e88 <prvCheckForValidListAndQueue+0x40>)
 8001e5c:	4628      	mov	r0, r5
 8001e5e:	f7fe ffe6 	bl	8000e2e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8001e62:	4c0a      	ldr	r4, [pc, #40]	; (8001e8c <prvCheckForValidListAndQueue+0x44>)
 8001e64:	4620      	mov	r0, r4
 8001e66:	f7fe ffe2 	bl	8000e2e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <prvCheckForValidListAndQueue+0x48>)
 8001e6c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <prvCheckForValidListAndQueue+0x4c>)
 8001e70:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001e72:	2200      	movs	r2, #0
 8001e74:	210c      	movs	r1, #12
 8001e76:	200a      	movs	r0, #10
 8001e78:	f7ff f9ca 	bl	8001210 <xQueueGenericCreate>
 8001e7c:	4b01      	ldr	r3, [pc, #4]	; (8001e84 <prvCheckForValidListAndQueue+0x3c>)
 8001e7e:	6018      	str	r0, [r3, #0]
 8001e80:	e7e8      	b.n	8001e54 <prvCheckForValidListAndQueue+0xc>
 8001e82:	bf00      	nop
 8001e84:	20003b34 	.word	0x20003b34
 8001e88:	20003b08 	.word	0x20003b08
 8001e8c:	20003b1c 	.word	0x20003b1c
 8001e90:	20003b00 	.word	0x20003b00
 8001e94:	20003b04 	.word	0x20003b04

08001e98 <prvInitialiseNewTimer>:
{
 8001e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e9c:	9c07      	ldr	r4, [sp, #28]
	if( pxNewTimer != NULL )
 8001e9e:	b1ac      	cbz	r4, 8001ecc <prvInitialiseNewTimer+0x34>
 8001ea0:	461e      	mov	r6, r3
 8001ea2:	4615      	mov	r5, r2
 8001ea4:	460f      	mov	r7, r1
 8001ea6:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 8001ea8:	f7ff ffce 	bl	8001e48 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8001eac:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8001eb0:	61a7      	str	r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8001eb2:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8001eb4:	9b06      	ldr	r3, [sp, #24]
 8001eb6:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8001eb8:	1d20      	adds	r0, r4, #4
 8001eba:	f7fe ffc3 	bl	8000e44 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8001ebe:	b12d      	cbz	r5, 8001ecc <prvInitialiseNewTimer+0x34>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8001ec0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ed0 <xTimerCreateTimerTask>:
{
 8001ed0:	b500      	push	{lr}
 8001ed2:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
 8001ed4:	f7ff ffb8 	bl	8001e48 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <xTimerCreateTimerTask+0x2c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b163      	cbz	r3, 8001ef8 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(	prvTimerTask,
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <xTimerCreateTimerTask+0x30>)
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2364      	movs	r3, #100	; 0x64
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2280      	movs	r2, #128	; 0x80
 8001eea:	4906      	ldr	r1, [pc, #24]	; (8001f04 <xTimerCreateTimerTask+0x34>)
 8001eec:	4806      	ldr	r0, [pc, #24]	; (8001f08 <xTimerCreateTimerTask+0x38>)
 8001eee:	f7ff fd0d 	bl	800190c <xTaskCreate>
}
 8001ef2:	b003      	add	sp, #12
 8001ef4:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8001ef8:	2000      	movs	r0, #0
	return xReturn;
 8001efa:	e7fa      	b.n	8001ef2 <xTimerCreateTimerTask+0x22>
 8001efc:	20003b34 	.word	0x20003b34
 8001f00:	20003b38 	.word	0x20003b38
 8001f04:	08006e2c 	.word	0x08006e2c
 8001f08:	080021d1 	.word	0x080021d1

08001f0c <xTimerCreate>:
	{
 8001f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	4605      	mov	r5, r0
 8001f14:	460e      	mov	r6, r1
 8001f16:	4617      	mov	r7, r2
 8001f18:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8001f1a:	2028      	movs	r0, #40	; 0x28
 8001f1c:	f7fe ff56 	bl	8000dcc <pvPortMalloc>
		if( pxNewTimer != NULL )
 8001f20:	4604      	mov	r4, r0
 8001f22:	b158      	cbz	r0, 8001f3c <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8001f2a:	9001      	str	r0, [sp, #4]
 8001f2c:	9b08      	ldr	r3, [sp, #32]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	4643      	mov	r3, r8
 8001f32:	463a      	mov	r2, r7
 8001f34:	4631      	mov	r1, r6
 8001f36:	4628      	mov	r0, r5
 8001f38:	f7ff ffae 	bl	8001e98 <prvInitialiseNewTimer>
	}
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	b002      	add	sp, #8
 8001f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f44 <xTimerGenericCommand>:
{
 8001f44:	b530      	push	{r4, r5, lr}
 8001f46:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8001f48:	4c13      	ldr	r4, [pc, #76]	; (8001f98 <xTimerGenericCommand+0x54>)
 8001f4a:	6825      	ldr	r5, [r4, #0]
 8001f4c:	b30d      	cbz	r5, 8001f92 <xTimerGenericCommand+0x4e>
 8001f4e:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
 8001f50:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001f52:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001f54:	9003      	str	r0, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001f56:	2905      	cmp	r1, #5
 8001f58:	dc13      	bgt.n	8001f82 <xTimerGenericCommand+0x3e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001f5a:	f7ff ff31 	bl	8001dc0 <xTaskGetSchedulerState>
 8001f5e:	2802      	cmp	r0, #2
 8001f60:	d007      	beq.n	8001f72 <xTimerGenericCommand+0x2e>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001f62:	2300      	movs	r3, #0
 8001f64:	461a      	mov	r2, r3
 8001f66:	a901      	add	r1, sp, #4
 8001f68:	480b      	ldr	r0, [pc, #44]	; (8001f98 <xTimerGenericCommand+0x54>)
 8001f6a:	6800      	ldr	r0, [r0, #0]
 8001f6c:	f7ff f96a 	bl	8001244 <xQueueGenericSend>
 8001f70:	e00d      	b.n	8001f8e <xTimerGenericCommand+0x4a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001f72:	2300      	movs	r3, #0
 8001f74:	9a08      	ldr	r2, [sp, #32]
 8001f76:	a901      	add	r1, sp, #4
 8001f78:	4807      	ldr	r0, [pc, #28]	; (8001f98 <xTimerGenericCommand+0x54>)
 8001f7a:	6800      	ldr	r0, [r0, #0]
 8001f7c:	f7ff f962 	bl	8001244 <xQueueGenericSend>
 8001f80:	e005      	b.n	8001f8e <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001f82:	2300      	movs	r3, #0
 8001f84:	4622      	mov	r2, r4
 8001f86:	a901      	add	r1, sp, #4
 8001f88:	4628      	mov	r0, r5
 8001f8a:	f7ff f9e7 	bl	800135c <xQueueGenericSendFromISR>
}
 8001f8e:	b005      	add	sp, #20
 8001f90:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8001f92:	2000      	movs	r0, #0
	return xReturn;
 8001f94:	e7fb      	b.n	8001f8e <xTimerGenericCommand+0x4a>
 8001f96:	bf00      	nop
 8001f98:	20003b34 	.word	0x20003b34

08001f9c <prvSwitchTimerLists>:
{
 8001f9c:	b570      	push	{r4, r5, r6, lr}
 8001f9e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <prvSwitchTimerLists+0x60>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	b312      	cbz	r2, 8001fee <prvSwitchTimerLists+0x52>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fac:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001fae:	1d25      	adds	r5, r4, #4
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	f7fe ff70 	bl	8000e96 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001fb6:	6a23      	ldr	r3, [r4, #32]
 8001fb8:	4620      	mov	r0, r4
 8001fba:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001fbc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001fc0:	f013 0f04 	tst.w	r3, #4
 8001fc4:	d0ec      	beq.n	8001fa0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8001fc6:	69a3      	ldr	r3, [r4, #24]
 8001fc8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8001fca:	429e      	cmp	r6, r3
 8001fcc:	d207      	bcs.n	8001fde <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8001fce:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001fd0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <prvSwitchTimerLists+0x60>)
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	f7fe ff43 	bl	8000e62 <vListInsert>
 8001fdc:	e7e0      	b.n	8001fa0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001fde:	2100      	movs	r1, #0
 8001fe0:	9100      	str	r1, [sp, #0]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4632      	mov	r2, r6
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f7ff ffac 	bl	8001f44 <xTimerGenericCommand>
 8001fec:	e7d8      	b.n	8001fa0 <prvSwitchTimerLists+0x4>
	pxCurrentTimerList = pxOverflowTimerList;
 8001fee:	4a04      	ldr	r2, [pc, #16]	; (8002000 <prvSwitchTimerLists+0x64>)
 8001ff0:	6810      	ldr	r0, [r2, #0]
 8001ff2:	4902      	ldr	r1, [pc, #8]	; (8001ffc <prvSwitchTimerLists+0x60>)
 8001ff4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	b002      	add	sp, #8
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	20003b00 	.word	0x20003b00
 8002000:	20003b04 	.word	0x20003b04

08002004 <prvSampleTimeNow>:
{
 8002004:	b538      	push	{r3, r4, r5, lr}
 8002006:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8002008:	f7ff fcf0 	bl	80019ec <xTaskGetTickCount>
 800200c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <prvSampleTimeNow+0x28>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4283      	cmp	r3, r0
 8002014:	d805      	bhi.n	8002022 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8002016:	2300      	movs	r3, #0
 8002018:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800201a:	4b04      	ldr	r3, [pc, #16]	; (800202c <prvSampleTimeNow+0x28>)
 800201c:	601c      	str	r4, [r3, #0]
}
 800201e:	4620      	mov	r0, r4
 8002020:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8002022:	f7ff ffbb 	bl	8001f9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002026:	2301      	movs	r3, #1
 8002028:	602b      	str	r3, [r5, #0]
 800202a:	e7f6      	b.n	800201a <prvSampleTimeNow+0x16>
 800202c:	20003b30 	.word	0x20003b30

08002030 <prvProcessExpiredTimer>:
{
 8002030:	b570      	push	{r4, r5, r6, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	4605      	mov	r5, r0
 8002036:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <prvProcessExpiredTimer+0x54>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002040:	1d20      	adds	r0, r4, #4
 8002042:	f7fe ff28 	bl	8000e96 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002046:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800204a:	f013 0f04 	tst.w	r3, #4
 800204e:	d108      	bne.n	8002062 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002058:	6a23      	ldr	r3, [r4, #32]
 800205a:	4620      	mov	r0, r4
 800205c:	4798      	blx	r3
}
 800205e:	b002      	add	sp, #8
 8002060:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002062:	69a1      	ldr	r1, [r4, #24]
 8002064:	462b      	mov	r3, r5
 8002066:	4632      	mov	r2, r6
 8002068:	4429      	add	r1, r5
 800206a:	4620      	mov	r0, r4
 800206c:	f7ff fec8 	bl	8001e00 <prvInsertTimerInActiveList>
 8002070:	2800      	cmp	r0, #0
 8002072:	d0f1      	beq.n	8002058 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002074:	2100      	movs	r1, #0
 8002076:	9100      	str	r1, [sp, #0]
 8002078:	460b      	mov	r3, r1
 800207a:	462a      	mov	r2, r5
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff ff61 	bl	8001f44 <xTimerGenericCommand>
 8002082:	e7e9      	b.n	8002058 <prvProcessExpiredTimer+0x28>
 8002084:	20003b00 	.word	0x20003b00

08002088 <prvProcessTimerOrBlockTask>:
{
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	4606      	mov	r6, r0
 800208e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8002090:	f7ff fca4 	bl	80019dc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002094:	a801      	add	r0, sp, #4
 8002096:	f7ff ffb5 	bl	8002004 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800209a:	9b01      	ldr	r3, [sp, #4]
 800209c:	bb23      	cbnz	r3, 80020e8 <prvProcessTimerOrBlockTask+0x60>
 800209e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80020a0:	b90c      	cbnz	r4, 80020a6 <prvProcessTimerOrBlockTask+0x1e>
 80020a2:	42b0      	cmp	r0, r6
 80020a4:	d217      	bcs.n	80020d6 <prvProcessTimerOrBlockTask+0x4e>
				if( xListWasEmpty != pdFALSE )
 80020a6:	b124      	cbz	r4, 80020b2 <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <prvProcessTimerOrBlockTask+0x68>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b9cb      	cbnz	r3, 80020e4 <prvProcessTimerOrBlockTask+0x5c>
 80020b0:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80020b2:	4622      	mov	r2, r4
 80020b4:	1b71      	subs	r1, r6, r5
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <prvProcessTimerOrBlockTask+0x6c>)
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	f7ff fa8f 	bl	80015dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80020be:	f7ff fd1b 	bl	8001af8 <xTaskResumeAll>
 80020c2:	b998      	cbnz	r0, 80020ec <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <prvProcessTimerOrBlockTask+0x70>)
 80020c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	f3bf 8f6f 	isb	sy
 80020d4:	e00a      	b.n	80020ec <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
 80020d6:	f7ff fd0f 	bl	8001af8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80020da:	4629      	mov	r1, r5
 80020dc:	4630      	mov	r0, r6
 80020de:	f7ff ffa7 	bl	8002030 <prvProcessExpiredTimer>
 80020e2:	e003      	b.n	80020ec <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80020e4:	2400      	movs	r4, #0
 80020e6:	e7e4      	b.n	80020b2 <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 80020e8:	f7ff fd06 	bl	8001af8 <xTaskResumeAll>
}
 80020ec:	b002      	add	sp, #8
 80020ee:	bd70      	pop	{r4, r5, r6, pc}
 80020f0:	20003b04 	.word	0x20003b04
 80020f4:	20003b34 	.word	0x20003b34
 80020f8:	e000ed04 	.word	0xe000ed04

080020fc <prvProcessReceivedCommands>:
{
 80020fc:	b530      	push	{r4, r5, lr}
 80020fe:	b087      	sub	sp, #28
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002100:	2200      	movs	r2, #0
 8002102:	a903      	add	r1, sp, #12
 8002104:	4b31      	ldr	r3, [pc, #196]	; (80021cc <prvProcessReceivedCommands+0xd0>)
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	f7ff f960 	bl	80013cc <xQueueReceive>
 800210c:	2800      	cmp	r0, #0
 800210e:	d05b      	beq.n	80021c8 <prvProcessReceivedCommands+0xcc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002110:	9b03      	ldr	r3, [sp, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	dbf4      	blt.n	8002100 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002116:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002118:	6963      	ldr	r3, [r4, #20]
 800211a:	b113      	cbz	r3, 8002122 <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800211c:	1d20      	adds	r0, r4, #4
 800211e:	f7fe feba 	bl	8000e96 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002122:	a802      	add	r0, sp, #8
 8002124:	f7ff ff6e 	bl	8002004 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8002128:	9b03      	ldr	r3, [sp, #12]
 800212a:	2b09      	cmp	r3, #9
 800212c:	d8e8      	bhi.n	8002100 <prvProcessReceivedCommands+0x4>
 800212e:	e8df f003 	tbb	[pc, r3]
 8002132:	0505      	.short	0x0505
 8002134:	3d2e2705 	.word	0x3d2e2705
 8002138:	2e270505 	.word	0x2e270505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800213c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002148:	9904      	ldr	r1, [sp, #16]
 800214a:	69a5      	ldr	r5, [r4, #24]
 800214c:	460b      	mov	r3, r1
 800214e:	4602      	mov	r2, r0
 8002150:	4429      	add	r1, r5
 8002152:	4620      	mov	r0, r4
 8002154:	f7ff fe54 	bl	8001e00 <prvInsertTimerInActiveList>
 8002158:	2800      	cmp	r0, #0
 800215a:	d0d1      	beq.n	8002100 <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800215c:	6a23      	ldr	r3, [r4, #32]
 800215e:	4620      	mov	r0, r4
 8002160:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002162:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002166:	f013 0f04 	tst.w	r3, #4
 800216a:	d0c9      	beq.n	8002100 <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800216c:	69a2      	ldr	r2, [r4, #24]
 800216e:	2100      	movs	r1, #0
 8002170:	9100      	str	r1, [sp, #0]
 8002172:	460b      	mov	r3, r1
 8002174:	9804      	ldr	r0, [sp, #16]
 8002176:	4402      	add	r2, r0
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff fee3 	bl	8001f44 <xTimerGenericCommand>
 800217e:	e7bf      	b.n	8002100 <prvProcessReceivedCommands+0x4>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002180:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					break;
 800218c:	e7b8      	b.n	8002100 <prvProcessReceivedCommands+0x4>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800218e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800219a:	9904      	ldr	r1, [sp, #16]
 800219c:	61a1      	str	r1, [r4, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800219e:	4603      	mov	r3, r0
 80021a0:	4602      	mov	r2, r0
 80021a2:	4401      	add	r1, r0
 80021a4:	4620      	mov	r0, r4
 80021a6:	f7ff fe2b 	bl	8001e00 <prvInsertTimerInActiveList>
					break;
 80021aa:	e7a9      	b.n	8002100 <prvProcessReceivedCommands+0x4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80021ac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80021b0:	f013 0f02 	tst.w	r3, #2
 80021b4:	d004      	beq.n	80021c0 <prvProcessReceivedCommands+0xc4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80021b6:	f023 0301 	bic.w	r3, r3, #1
 80021ba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80021be:	e79f      	b.n	8002100 <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 80021c0:	4620      	mov	r0, r4
 80021c2:	f7fe fe33 	bl	8000e2c <vPortFree>
 80021c6:	e79b      	b.n	8002100 <prvProcessReceivedCommands+0x4>
}
 80021c8:	b007      	add	sp, #28
 80021ca:	bd30      	pop	{r4, r5, pc}
 80021cc:	20003b34 	.word	0x20003b34

080021d0 <prvTimerTask>:
{
 80021d0:	b500      	push	{lr}
 80021d2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80021d4:	a801      	add	r0, sp, #4
 80021d6:	f7ff fe03 	bl	8001de0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80021da:	9901      	ldr	r1, [sp, #4]
 80021dc:	f7ff ff54 	bl	8002088 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80021e0:	f7ff ff8c 	bl	80020fc <prvProcessReceivedCommands>
 80021e4:	e7f6      	b.n	80021d4 <prvTimerTask+0x4>
	...

080021e8 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 80021e8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <CAN_DeInit+0x34>)
 80021ec:	4298      	cmp	r0, r3
 80021ee:	d00a      	beq.n	8002206 <CAN_DeInit+0x1e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 80021f0:	2101      	movs	r1, #1
 80021f2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80021f6:	f000 fb2b 	bl	8002850 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 80021fa:	2100      	movs	r1, #0
 80021fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002200:	f000 fb26 	bl	8002850 <RCC_APB1PeriphResetCmd>
  }
}
 8002204:	bd08      	pop	{r3, pc}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8002206:	2101      	movs	r1, #1
 8002208:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800220c:	f000 fb20 	bl	8002850 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8002210:	2100      	movs	r1, #0
 8002212:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002216:	f000 fb1b 	bl	8002850 <RCC_APB1PeriphResetCmd>
 800221a:	e7f3      	b.n	8002204 <CAN_DeInit+0x1c>
 800221c:	40006400 	.word	0x40006400

08002220 <CAN_Init>:
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8002220:	6803      	ldr	r3, [r0, #0]
 8002222:	f023 0302 	bic.w	r3, r3, #2
 8002226:	6003      	str	r3, [r0, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8002228:	6803      	ldr	r3, [r0, #0]
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6003      	str	r3, [r0, #0]
  uint32_t wait_ack = 0x00000000;
 8002230:	2300      	movs	r3, #0

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8002232:	6842      	ldr	r2, [r0, #4]
 8002234:	f012 0f01 	tst.w	r2, #1
 8002238:	d105      	bne.n	8002246 <CAN_Init+0x26>
 800223a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800223e:	4293      	cmp	r3, r2
 8002240:	d001      	beq.n	8002246 <CAN_Init+0x26>
  {
    wait_ack++;
 8002242:	3301      	adds	r3, #1
 8002244:	e7f5      	b.n	8002232 <CAN_Init+0x12>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8002246:	6843      	ldr	r3, [r0, #4]
 8002248:	f013 0f01 	tst.w	r3, #1
 800224c:	d06d      	beq.n	800232a <CAN_Init+0x10a>
    InitStatus = CAN_InitStatus_Failed;
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800224e:	798b      	ldrb	r3, [r1, #6]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d03b      	beq.n	80022cc <CAN_Init+0xac>
    {
      CANx->MCR |= CAN_MCR_TTCM;
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8002254:	6803      	ldr	r3, [r0, #0]
 8002256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800225a:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 800225c:	79cb      	ldrb	r3, [r1, #7]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d039      	beq.n	80022d6 <CAN_Init+0xb6>
    {
      CANx->MCR |= CAN_MCR_ABOM;
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8002262:	6803      	ldr	r3, [r0, #0]
 8002264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002268:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 800226a:	7a0b      	ldrb	r3, [r1, #8]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d037      	beq.n	80022e0 <CAN_Init+0xc0>
    {
      CANx->MCR |= CAN_MCR_AWUM;
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8002270:	6803      	ldr	r3, [r0, #0]
 8002272:	f023 0320 	bic.w	r3, r3, #32
 8002276:	6003      	str	r3, [r0, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8002278:	7a4b      	ldrb	r3, [r1, #9]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d035      	beq.n	80022ea <CAN_Init+0xca>
    {
      CANx->MCR |= CAN_MCR_NART;
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 800227e:	6803      	ldr	r3, [r0, #0]
 8002280:	f023 0310 	bic.w	r3, r3, #16
 8002284:	6003      	str	r3, [r0, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8002286:	7a8b      	ldrb	r3, [r1, #10]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d033      	beq.n	80022f4 <CAN_Init+0xd4>
    {
      CANx->MCR |= CAN_MCR_RFLM;
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 800228c:	6803      	ldr	r3, [r0, #0]
 800228e:	f023 0308 	bic.w	r3, r3, #8
 8002292:	6003      	str	r3, [r0, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8002294:	7acb      	ldrb	r3, [r1, #11]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d031      	beq.n	80022fe <CAN_Init+0xde>
    {
      CANx->MCR |= CAN_MCR_TXFP;
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 800229a:	6803      	ldr	r3, [r0, #0]
 800229c:	f023 0304 	bic.w	r3, r3, #4
 80022a0:	6003      	str	r3, [r0, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80022a2:	788a      	ldrb	r2, [r1, #2]
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80022a4:	78cb      	ldrb	r3, [r1, #3]
 80022a6:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80022a8:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 80022ac:	790a      	ldrb	r2, [r1, #4]
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80022ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 80022b2:	794a      	ldrb	r2, [r1, #5]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 80022b4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 80022b8:	880a      	ldrh	r2, [r1, #0]
 80022ba:	3a01      	subs	r2, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 80022bc:	4313      	orrs	r3, r2
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80022be:	61c3      	str	r3, [r0, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 80022c0:	6803      	ldr	r3, [r0, #0]
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6003      	str	r3, [r0, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 80022c8:	2300      	movs	r3, #0

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80022ca:	e01e      	b.n	800230a <CAN_Init+0xea>
      CANx->MCR |= CAN_MCR_TTCM;
 80022cc:	6803      	ldr	r3, [r0, #0]
 80022ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d2:	6003      	str	r3, [r0, #0]
 80022d4:	e7c2      	b.n	800225c <CAN_Init+0x3c>
      CANx->MCR |= CAN_MCR_ABOM;
 80022d6:	6803      	ldr	r3, [r0, #0]
 80022d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022dc:	6003      	str	r3, [r0, #0]
 80022de:	e7c4      	b.n	800226a <CAN_Init+0x4a>
      CANx->MCR |= CAN_MCR_AWUM;
 80022e0:	6803      	ldr	r3, [r0, #0]
 80022e2:	f043 0320 	orr.w	r3, r3, #32
 80022e6:	6003      	str	r3, [r0, #0]
 80022e8:	e7c6      	b.n	8002278 <CAN_Init+0x58>
      CANx->MCR |= CAN_MCR_NART;
 80022ea:	6803      	ldr	r3, [r0, #0]
 80022ec:	f043 0310 	orr.w	r3, r3, #16
 80022f0:	6003      	str	r3, [r0, #0]
 80022f2:	e7c8      	b.n	8002286 <CAN_Init+0x66>
      CANx->MCR |= CAN_MCR_RFLM;
 80022f4:	6803      	ldr	r3, [r0, #0]
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6003      	str	r3, [r0, #0]
 80022fc:	e7ca      	b.n	8002294 <CAN_Init+0x74>
      CANx->MCR |= CAN_MCR_TXFP;
 80022fe:	6803      	ldr	r3, [r0, #0]
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6003      	str	r3, [r0, #0]
 8002306:	e7cc      	b.n	80022a2 <CAN_Init+0x82>
   {
     wait_ack++;
 8002308:	3301      	adds	r3, #1
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800230a:	6842      	ldr	r2, [r0, #4]
 800230c:	f012 0f01 	tst.w	r2, #1
 8002310:	d003      	beq.n	800231a <CAN_Init+0xfa>
 8002312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002316:	4293      	cmp	r3, r2
 8002318:	d1f6      	bne.n	8002308 <CAN_Init+0xe8>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800231a:	6843      	ldr	r3, [r0, #4]
 800231c:	f013 0f01 	tst.w	r3, #1
 8002320:	d101      	bne.n	8002326 <CAN_Init+0x106>
    {
      InitStatus = CAN_InitStatus_Failed;
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8002322:	2001      	movs	r0, #1
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
}
 8002324:	4770      	bx	lr
      InitStatus = CAN_InitStatus_Failed;
 8002326:	2000      	movs	r0, #0
 8002328:	4770      	bx	lr
    InitStatus = CAN_InitStatus_Failed;
 800232a:	2000      	movs	r0, #0
 800232c:	4770      	bx	lr
	...

08002330 <CAN_FilterInit>:
  *                               structure that contains the configuration 
  *                               information.
  * @retval None.
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8002330:	b470      	push	{r4, r5, r6}
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8002332:	7a83      	ldrb	r3, [r0, #10]
 8002334:	2201      	movs	r2, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 800233a:	4a3b      	ldr	r2, [pc, #236]	; (8002428 <CAN_FilterInit+0xf8>)
 800233c:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8002340:	f041 0101 	orr.w	r1, r1, #1
 8002344:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8002348:	f8d2 421c 	ldr.w	r4, [r2, #540]	; 0x21c
 800234c:	43d9      	mvns	r1, r3
 800234e:	400c      	ands	r4, r1
 8002350:	f8c2 421c 	str.w	r4, [r2, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8002354:	7b02      	ldrb	r2, [r0, #12]
 8002356:	b9b2      	cbnz	r2, 8002386 <CAN_FilterInit+0x56>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8002358:	4a33      	ldr	r2, [pc, #204]	; (8002428 <CAN_FilterInit+0xf8>)
 800235a:	f8d2 420c 	ldr.w	r4, [r2, #524]	; 0x20c
 800235e:	400c      	ands	r4, r1
 8002360:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8002364:	88c6      	ldrh	r6, [r0, #6]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8002366:	8845      	ldrh	r5, [r0, #2]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8002368:	7a84      	ldrb	r4, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 800236a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800236e:	3448      	adds	r4, #72	; 0x48
 8002370:	f842 5034 	str.w	r5, [r2, r4, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8002374:	8886      	ldrh	r6, [r0, #4]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8002376:	8804      	ldrh	r4, [r0, #0]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8002378:	7a85      	ldrb	r5, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800237a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800237e:	3548      	adds	r5, #72	; 0x48
 8002380:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8002384:	6054      	str	r4, [r2, #4]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8002386:	7b02      	ldrb	r2, [r0, #12]
 8002388:	2a01      	cmp	r2, #1
 800238a:	d01f      	beq.n	80023cc <CAN_FilterInit+0x9c>
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 800238c:	7ac2      	ldrb	r2, [r0, #11]
 800238e:	2a00      	cmp	r2, #0
 8002390:	d134      	bne.n	80023fc <CAN_FilterInit+0xcc>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8002392:	4c25      	ldr	r4, [pc, #148]	; (8002428 <CAN_FilterInit+0xf8>)
 8002394:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 8002398:	400a      	ands	r2, r1
 800239a:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 800239e:	8902      	ldrh	r2, [r0, #8]
 80023a0:	b92a      	cbnz	r2, 80023ae <CAN_FilterInit+0x7e>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 80023a2:	4a21      	ldr	r2, [pc, #132]	; (8002428 <CAN_FilterInit+0xf8>)
 80023a4:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80023a8:	4021      	ands	r1, r4
 80023aa:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 80023ae:	8902      	ldrh	r2, [r0, #8]
 80023b0:	2a01      	cmp	r2, #1
 80023b2:	d02a      	beq.n	800240a <CAN_FilterInit+0xda>
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 80023b4:	7b42      	ldrb	r2, [r0, #13]
 80023b6:	2a01      	cmp	r2, #1
 80023b8:	d02e      	beq.n	8002418 <CAN_FilterInit+0xe8>
  {
    CAN1->FA1R |= filter_number_bit_pos;
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 80023ba:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <CAN_FilterInit+0xf8>)
 80023bc:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 80023c8:	bc70      	pop	{r4, r5, r6}
 80023ca:	4770      	bx	lr
    CAN1->FS1R |= filter_number_bit_pos;
 80023cc:	4a16      	ldr	r2, [pc, #88]	; (8002428 <CAN_FilterInit+0xf8>)
 80023ce:	f8d2 420c 	ldr.w	r4, [r2, #524]	; 0x20c
 80023d2:	431c      	orrs	r4, r3
 80023d4:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80023d8:	8806      	ldrh	r6, [r0, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80023da:	8845      	ldrh	r5, [r0, #2]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80023dc:	7a84      	ldrb	r4, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80023de:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80023e2:	3448      	adds	r4, #72	; 0x48
 80023e4:	f842 5034 	str.w	r5, [r2, r4, lsl #3]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80023e8:	8886      	ldrh	r6, [r0, #4]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 80023ea:	88c4      	ldrh	r4, [r0, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80023ec:	7a85      	ldrb	r5, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80023ee:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80023f2:	3548      	adds	r5, #72	; 0x48
 80023f4:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80023f8:	6054      	str	r4, [r2, #4]
 80023fa:	e7c7      	b.n	800238c <CAN_FilterInit+0x5c>
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 80023fc:	4c0a      	ldr	r4, [pc, #40]	; (8002428 <CAN_FilterInit+0xf8>)
 80023fe:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 8002402:	431a      	orrs	r2, r3
 8002404:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
 8002408:	e7c9      	b.n	800239e <CAN_FilterInit+0x6e>
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 800240a:	4907      	ldr	r1, [pc, #28]	; (8002428 <CAN_FilterInit+0xf8>)
 800240c:	f8d1 2214 	ldr.w	r2, [r1, #532]	; 0x214
 8002410:	431a      	orrs	r2, r3
 8002412:	f8c1 2214 	str.w	r2, [r1, #532]	; 0x214
 8002416:	e7cd      	b.n	80023b4 <CAN_FilterInit+0x84>
    CAN1->FA1R |= filter_number_bit_pos;
 8002418:	4903      	ldr	r1, [pc, #12]	; (8002428 <CAN_FilterInit+0xf8>)
 800241a:	f8d1 221c 	ldr.w	r2, [r1, #540]	; 0x21c
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
 8002424:	e7c9      	b.n	80023ba <CAN_FilterInit+0x8a>
 8002426:	bf00      	nop
 8002428:	40006400 	.word	0x40006400

0800242c <CAN_StructInit>:
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	7183      	strb	r3, [r0, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8002430:	71c3      	strb	r3, [r0, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8002432:	7203      	strb	r3, [r0, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8002434:	7243      	strb	r3, [r0, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8002436:	7283      	strb	r3, [r0, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8002438:	72c3      	strb	r3, [r0, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 800243a:	7083      	strb	r3, [r0, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 800243c:	70c3      	strb	r3, [r0, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 800243e:	2303      	movs	r3, #3
 8002440:	7103      	strb	r3, [r0, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 8002442:	2302      	movs	r3, #2
 8002444:	7143      	strb	r3, [r0, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8002446:	2301      	movs	r3, #1
 8002448:	8003      	strh	r3, [r0, #0]
}
 800244a:	4770      	bx	lr

0800244c <CAN_Transmit>:
  *                    DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission
  *                    or CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 800244c:	4603      	mov	r3, r0
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 800244e:	6882      	ldr	r2, [r0, #8]
 8002450:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 8002454:	d109      	bne.n	800246a <CAN_Transmit+0x1e>
  {
    transmit_mailbox = 0;
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8002456:	6882      	ldr	r2, [r0, #8]
 8002458:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 800245c:	d14c      	bne.n	80024f8 <CAN_Transmit+0xac>
  {
    transmit_mailbox = 1;
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 800245e:	6882      	ldr	r2, [r0, #8]
 8002460:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002464:	d056      	beq.n	8002514 <CAN_Transmit+0xc8>
  {
    transmit_mailbox = 2;
 8002466:	2002      	movs	r0, #2
 8002468:	e000      	b.n	800246c <CAN_Transmit+0x20>
    transmit_mailbox = 0;
 800246a:	2000      	movs	r0, #0
{
 800246c:	b4f0      	push	{r4, r5, r6, r7}
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 800246e:	4605      	mov	r5, r0
 8002470:	f100 0218 	add.w	r2, r0, #24
 8002474:	0112      	lsls	r2, r2, #4
 8002476:	589c      	ldr	r4, [r3, r2]
 8002478:	f004 0401 	and.w	r4, r4, #1
 800247c:	509c      	str	r4, [r3, r2]
    if (TxMessage->IDE == CAN_Id_Standard)
 800247e:	7a0a      	ldrb	r2, [r1, #8]
 8002480:	2a00      	cmp	r2, #0
 8002482:	d13b      	bne.n	80024fc <CAN_Transmit+0xb0>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8002484:	f100 0218 	add.w	r2, r0, #24
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	589c      	ldr	r4, [r3, r2]
 800248c:	680f      	ldr	r7, [r1, #0]
                                                  TxMessage->RTR);
 800248e:	7a4e      	ldrb	r6, [r1, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8002490:	ea46 5647 	orr.w	r6, r6, r7, lsl #21
 8002494:	4334      	orrs	r4, r6
 8002496:	509c      	str	r4, [r3, r2]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8002498:	7a8a      	ldrb	r2, [r1, #10]
 800249a:	f002 020f 	and.w	r2, r2, #15
 800249e:	728a      	strb	r2, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80024a0:	f105 0418 	add.w	r4, r5, #24
 80024a4:	0124      	lsls	r4, r4, #4
 80024a6:	191a      	adds	r2, r3, r4
 80024a8:	6856      	ldr	r6, [r2, #4]
 80024aa:	f026 060f 	bic.w	r6, r6, #15
 80024ae:	6056      	str	r6, [r2, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 80024b0:	6856      	ldr	r6, [r2, #4]
 80024b2:	7a8f      	ldrb	r7, [r1, #10]
 80024b4:	433e      	orrs	r6, r7
 80024b6:	6056      	str	r6, [r2, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80024b8:	7b8e      	ldrb	r6, [r1, #14]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80024ba:	7b4a      	ldrb	r2, [r1, #13]
 80024bc:	0412      	lsls	r2, r2, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80024be:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80024c2:	7b0e      	ldrb	r6, [r1, #12]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80024c4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
                                             ((uint32_t)TxMessage->Data[0]));
 80024c8:	7ace      	ldrb	r6, [r1, #11]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80024ca:	4332      	orrs	r2, r6
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80024cc:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 80024d0:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80024d4:	7c8e      	ldrb	r6, [r1, #18]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80024d6:	7c4a      	ldrb	r2, [r1, #17]
 80024d8:	0412      	lsls	r2, r2, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80024da:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80024de:	7c0e      	ldrb	r6, [r1, #16]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80024e0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
                                             ((uint32_t)TxMessage->Data[4]));
 80024e4:	7bc9      	ldrb	r1, [r1, #15]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80024e6:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80024e8:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 80024ec:	591a      	ldr	r2, [r3, r4]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	511a      	str	r2, [r3, r4]
  }
  return transmit_mailbox;
}
 80024f4:	bcf0      	pop	{r4, r5, r6, r7}
 80024f6:	4770      	bx	lr
    transmit_mailbox = 1;
 80024f8:	2001      	movs	r0, #1
 80024fa:	e7b7      	b.n	800246c <CAN_Transmit+0x20>
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80024fc:	f100 0418 	add.w	r4, r0, #24
 8002500:	0124      	lsls	r4, r4, #4
 8002502:	591e      	ldr	r6, [r3, r4]
 8002504:	684f      	ldr	r7, [r1, #4]
 8002506:	ea42 02c7 	orr.w	r2, r2, r7, lsl #3
                                                  TxMessage->RTR);
 800250a:	7a4f      	ldrb	r7, [r1, #9]
                                                  TxMessage->IDE | \
 800250c:	433a      	orrs	r2, r7
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800250e:	4332      	orrs	r2, r6
 8002510:	511a      	str	r2, [r3, r4]
 8002512:	e7c1      	b.n	8002498 <CAN_Transmit+0x4c>
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8002514:	2004      	movs	r0, #4
}
 8002516:	4770      	bx	lr

08002518 <CAN_Receive>:
  * @param  RxMessage:  pointer to a structure receive message which contains 
  *                     CAN Id, CAN DLC, CAN datas and FMI number.
  * @retval None.
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8002518:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800251a:	f101 031b 	add.w	r3, r1, #27
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	58c3      	ldr	r3, [r0, r3]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	7213      	strb	r3, [r2, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8002528:	2b00      	cmp	r3, #0
 800252a:	d13b      	bne.n	80025a4 <CAN_Receive+0x8c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 800252c:	f101 031b 	add.w	r3, r1, #27
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	58c3      	ldr	r3, [r0, r3]
 8002534:	0d5b      	lsrs	r3, r3, #21
 8002536:	6013      	str	r3, [r2, #0]
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8002538:	f101 031b 	add.w	r3, r1, #27
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	18c4      	adds	r4, r0, r3
 8002540:	58c3      	ldr	r3, [r0, r3]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	7253      	strb	r3, [r2, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8002548:	6863      	ldr	r3, [r4, #4]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	7293      	strb	r3, [r2, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8002550:	6863      	ldr	r3, [r4, #4]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	74d3      	strb	r3, [r2, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8002556:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800255a:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 800255e:	72d4      	strb	r4, [r2, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8002560:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8002564:	0a24      	lsrs	r4, r4, #8
 8002566:	7314      	strb	r4, [r2, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8002568:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 800256c:	0c24      	lsrs	r4, r4, #16
 800256e:	7354      	strb	r4, [r2, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8002570:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8002574:	0e24      	lsrs	r4, r4, #24
 8002576:	7394      	strb	r4, [r2, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8002578:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 800257c:	73d4      	strb	r4, [r2, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 800257e:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8002582:	0a24      	lsrs	r4, r4, #8
 8002584:	7414      	strb	r4, [r2, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8002586:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 800258a:	0c24      	lsrs	r4, r4, #16
 800258c:	7454      	strb	r4, [r2, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 800258e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8002592:	0e1b      	lsrs	r3, r3, #24
 8002594:	7493      	strb	r3, [r2, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8002596:	b161      	cbz	r1, 80025b2 <CAN_Receive+0x9a>
    CANx->RF0R |= CAN_RF0R_RFOM0;
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8002598:	6903      	ldr	r3, [r0, #16]
 800259a:	f043 0320 	orr.w	r3, r3, #32
 800259e:	6103      	str	r3, [r0, #16]
  }
}
 80025a0:	bc10      	pop	{r4}
 80025a2:	4770      	bx	lr
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80025a4:	f101 031b 	add.w	r3, r1, #27
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	58c3      	ldr	r3, [r0, r3]
 80025ac:	08db      	lsrs	r3, r3, #3
 80025ae:	6053      	str	r3, [r2, #4]
 80025b0:	e7c2      	b.n	8002538 <CAN_Receive+0x20>
    CANx->RF0R |= CAN_RF0R_RFOM0;
 80025b2:	68c3      	ldr	r3, [r0, #12]
 80025b4:	f043 0320 	orr.w	r3, r3, #32
 80025b8:	60c3      	str	r3, [r0, #12]
 80025ba:	e7f1      	b.n	80025a0 <CAN_Receive+0x88>

080025bc <CAN_ITConfig>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80025bc:	b922      	cbnz	r2, 80025c8 <CAN_ITConfig+0xc>
    CANx->IER |= CAN_IT;
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 80025be:	6943      	ldr	r3, [r0, #20]
 80025c0:	ea23 0101 	bic.w	r1, r3, r1
 80025c4:	6141      	str	r1, [r0, #20]
  }
}
 80025c6:	4770      	bx	lr
    CANx->IER |= CAN_IT;
 80025c8:	6943      	ldr	r3, [r0, #20]
 80025ca:	4319      	orrs	r1, r3
 80025cc:	6141      	str	r1, [r0, #20]
 80025ce:	4770      	bx	lr

080025d0 <CAN_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 80025d0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80025d4:	d03e      	beq.n	8002654 <CAN_ClearITPendingBit+0x84>
 80025d6:	d911      	bls.n	80025fc <CAN_ClearITPendingBit+0x2c>
 80025d8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80025dc:	d040      	beq.n	8002660 <CAN_ClearITPendingBit+0x90>
 80025de:	d920      	bls.n	8002622 <CAN_ClearITPendingBit+0x52>
 80025e0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80025e4:	d030      	beq.n	8002648 <CAN_ClearITPendingBit+0x78>
 80025e6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80025ea:	d030      	beq.n	800264e <CAN_ClearITPendingBit+0x7e>
 80025ec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80025f0:	d103      	bne.n	80025fa <CAN_ClearITPendingBit+0x2a>
              /* Clear CAN_MSR_ERRI (rc_w1) */
	      CANx->MSR = CAN_MSR_ERRI; 
	      break;
      case CAN_IT_ERR:
              /*Clear LEC bits */
	      CANx->ESR = RESET; 
 80025f2:	2300      	movs	r3, #0
 80025f4:	6183      	str	r3, [r0, #24]
              /* Clear CAN_MSR_ERRI (rc_w1) */
	      CANx->MSR = CAN_MSR_ERRI; 
 80025f6:	2304      	movs	r3, #4
 80025f8:	6043      	str	r3, [r0, #4]
                  of the CAN Bus status*/
	      break;
      default :
	      break;
   }
}
 80025fa:	4770      	bx	lr
  switch (CAN_IT)
 80025fc:	2908      	cmp	r1, #8
 80025fe:	d01d      	beq.n	800263c <CAN_ClearITPendingBit+0x6c>
 8002600:	d807      	bhi.n	8002612 <CAN_ClearITPendingBit+0x42>
 8002602:	2901      	cmp	r1, #1
 8002604:	d017      	beq.n	8002636 <CAN_ClearITPendingBit+0x66>
 8002606:	2904      	cmp	r1, #4
 8002608:	d102      	bne.n	8002610 <CAN_ClearITPendingBit+0x40>
	      CANx->RF0R = CAN_RF0R_FULL0; 
 800260a:	2308      	movs	r3, #8
 800260c:	60c3      	str	r3, [r0, #12]
	      break;
 800260e:	4770      	bx	lr
 8002610:	4770      	bx	lr
  switch (CAN_IT)
 8002612:	2920      	cmp	r1, #32
 8002614:	d015      	beq.n	8002642 <CAN_ClearITPendingBit+0x72>
 8002616:	2940      	cmp	r1, #64	; 0x40
 8002618:	d102      	bne.n	8002620 <CAN_ClearITPendingBit+0x50>
	      CANx->RF1R = CAN_RF1R_FOVR1; 
 800261a:	2310      	movs	r3, #16
 800261c:	6103      	str	r3, [r0, #16]
	      break;
 800261e:	4770      	bx	lr
 8002620:	4770      	bx	lr
  switch (CAN_IT)
 8002622:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002626:	d018      	beq.n	800265a <CAN_ClearITPendingBit+0x8a>
 8002628:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800262c:	d102      	bne.n	8002634 <CAN_ClearITPendingBit+0x64>
	      CANx->MSR = CAN_MSR_ERRI; 
 800262e:	2304      	movs	r3, #4
 8002630:	6043      	str	r3, [r0, #4]
	      break;
 8002632:	4770      	bx	lr
 8002634:	4770      	bx	lr
	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <CAN_ClearITPendingBit+0x9c>)
 8002638:	6083      	str	r3, [r0, #8]
	      break;
 800263a:	4770      	bx	lr
	      CANx->RF0R = CAN_RF0R_FOVR0; 
 800263c:	2310      	movs	r3, #16
 800263e:	60c3      	str	r3, [r0, #12]
	      break;
 8002640:	4770      	bx	lr
	      CANx->RF1R = CAN_RF1R_FULL1;  
 8002642:	2308      	movs	r3, #8
 8002644:	6103      	str	r3, [r0, #16]
	      break;
 8002646:	4770      	bx	lr
	      CANx->MSR = CAN_MSR_WKUI;  
 8002648:	2308      	movs	r3, #8
 800264a:	6043      	str	r3, [r0, #4]
	      break;
 800264c:	4770      	bx	lr
	      CANx->MSR = CAN_MSR_SLAKI;   
 800264e:	2310      	movs	r3, #16
 8002650:	6043      	str	r3, [r0, #4]
	      break;
 8002652:	4770      	bx	lr
	      CANx->MSR = CAN_MSR_ERRI;
 8002654:	2304      	movs	r3, #4
 8002656:	6043      	str	r3, [r0, #4]
	      break;
 8002658:	4770      	bx	lr
	      CANx->MSR = CAN_MSR_ERRI; 
 800265a:	2304      	movs	r3, #4
 800265c:	6043      	str	r3, [r0, #4]
	      break;
 800265e:	4770      	bx	lr
	      CANx->ESR = RESET; 
 8002660:	2300      	movs	r3, #0
 8002662:	6183      	str	r3, [r0, #24]
	      CANx->MSR = CAN_MSR_ERRI; 
 8002664:	2304      	movs	r3, #4
 8002666:	6043      	str	r3, [r0, #4]
	      break;
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	00010101 	.word	0x00010101

08002670 <CRC_ResetDR>:
  * @retval None
  */
void CRC_ResetDR(void)
{
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8002670:	4b01      	ldr	r3, [pc, #4]	; (8002678 <CRC_ResetDR+0x8>)
 8002672:	2201      	movs	r2, #1
 8002674:	609a      	str	r2, [r3, #8]
}
 8002676:	4770      	bx	lr
 8002678:	40023000 	.word	0x40023000

0800267c <FLASH_Unlock>:
  * @retval None
  */
void FLASH_Unlock(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <FLASH_Unlock+0x10>)
 800267e:	4a04      	ldr	r2, [pc, #16]	; (8002690 <FLASH_Unlock+0x14>)
 8002680:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8002682:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8002686:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40022000 	.word	0x40022000
 8002690:	45670123 	.word	0x45670123

08002694 <FLASH_GetBank1Status>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <FLASH_GetBank1Status+0x30>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f013 0f01 	tst.w	r3, #1
 800269c:	d10b      	bne.n	80026b6 <FLASH_GetBank1Status+0x22>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <FLASH_GetBank1Status+0x30>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f013 0f04 	tst.w	r3, #4
 80026a6:	d108      	bne.n	80026ba <FLASH_GetBank1Status+0x26>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <FLASH_GetBank1Status+0x30>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f013 0f10 	tst.w	r3, #16
 80026b0:	d005      	beq.n	80026be <FLASH_GetBank1Status+0x2a>
      {
        flashstatus = FLASH_ERROR_WRP;
 80026b2:	2003      	movs	r0, #3
 80026b4:	4770      	bx	lr
    flashstatus = FLASH_BUSY;
 80026b6:	2001      	movs	r0, #1
 80026b8:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 80026ba:	2002      	movs	r0, #2
 80026bc:	4770      	bx	lr
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 80026be:	2004      	movs	r0, #4
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40022000 	.word	0x40022000

080026c8 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80026c8:	b510      	push	{r4, lr}
 80026ca:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 80026cc:	f7ff ffe2 	bl	8002694 <FLASH_GetBank1Status>
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80026d0:	e002      	b.n	80026d8 <FLASH_WaitForLastOperation+0x10>
  {
    status = FLASH_GetBank1Status();
 80026d2:	f7ff ffdf 	bl	8002694 <FLASH_GetBank1Status>
    Timeout--;
 80026d6:	3c01      	subs	r4, #1
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80026d8:	2801      	cmp	r0, #1
 80026da:	d101      	bne.n	80026e0 <FLASH_WaitForLastOperation+0x18>
 80026dc:	2c00      	cmp	r4, #0
 80026de:	d1f8      	bne.n	80026d2 <FLASH_WaitForLastOperation+0xa>
  }
  if(Timeout == 0x00 )
 80026e0:	b104      	cbz	r4, 80026e4 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_TIMEOUT;
  }
  /* Return the operation status */
  return status;
}
 80026e2:	bd10      	pop	{r4, pc}
    status = FLASH_TIMEOUT;
 80026e4:	2005      	movs	r0, #5
 80026e6:	e7fc      	b.n	80026e2 <FLASH_WaitForLastOperation+0x1a>

080026e8 <FLASH_ErasePage>:
{
 80026e8:	b538      	push	{r3, r4, r5, lr}
 80026ea:	4605      	mov	r5, r0
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80026ec:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80026f0:	f7ff ffea 	bl	80026c8 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 80026f4:	2804      	cmp	r0, #4
 80026f6:	d000      	beq.n	80026fa <FLASH_ErasePage+0x12>
}
 80026f8:	bd38      	pop	{r3, r4, r5, pc}
    FLASH->CR|= CR_PER_Set;
 80026fa:	4c0a      	ldr	r4, [pc, #40]	; (8002724 <FLASH_ErasePage+0x3c>)
 80026fc:	6923      	ldr	r3, [r4, #16]
 80026fe:	f043 0302 	orr.w	r3, r3, #2
 8002702:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 8002704:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8002706:	6923      	ldr	r3, [r4, #16]
 8002708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800270c:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800270e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002712:	f7ff ffd9 	bl	80026c8 <FLASH_WaitForLastOperation>
    FLASH->CR &= CR_PER_Reset;
 8002716:	6923      	ldr	r3, [r4, #16]
 8002718:	f023 0302 	bic.w	r3, r3, #2
 800271c:	04db      	lsls	r3, r3, #19
 800271e:	0cdb      	lsrs	r3, r3, #19
 8002720:	6123      	str	r3, [r4, #16]
 8002722:	e7e9      	b.n	80026f8 <FLASH_ErasePage+0x10>
 8002724:	40022000 	.word	0x40022000

08002728 <FLASH_ProgramWord>:
{
 8002728:	b530      	push	{r4, r5, lr}
 800272a:	b083      	sub	sp, #12
 800272c:	4605      	mov	r5, r0
 800272e:	460c      	mov	r4, r1
  __IO uint32_t tmp = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	9301      	str	r3, [sp, #4]
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002734:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002738:	f7ff ffc6 	bl	80026c8 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 800273c:	2804      	cmp	r0, #4
 800273e:	d001      	beq.n	8002744 <FLASH_ProgramWord+0x1c>
}
 8002740:	b003      	add	sp, #12
 8002742:	bd30      	pop	{r4, r5, pc}
    FLASH->CR |= CR_PG_Set;
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <FLASH_ProgramWord+0x68>)
 8002746:	6913      	ldr	r3, [r2, #16]
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = (uint16_t)Data;
 800274e:	b2a3      	uxth	r3, r4
 8002750:	802b      	strh	r3, [r5, #0]
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002752:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002756:	f7ff ffb7 	bl	80026c8 <FLASH_WaitForLastOperation>
    if(status == FLASH_COMPLETE)
 800275a:	2804      	cmp	r0, #4
 800275c:	d007      	beq.n	800276e <FLASH_ProgramWord+0x46>
      FLASH->CR &= CR_PG_Reset;
 800275e:	4a0c      	ldr	r2, [pc, #48]	; (8002790 <FLASH_ProgramWord+0x68>)
 8002760:	6913      	ldr	r3, [r2, #16]
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	04db      	lsls	r3, r3, #19
 8002768:	0cdb      	lsrs	r3, r3, #19
 800276a:	6113      	str	r3, [r2, #16]
 800276c:	e7e8      	b.n	8002740 <FLASH_ProgramWord+0x18>
      tmp = Address + 2;
 800276e:	3502      	adds	r5, #2
 8002770:	9501      	str	r5, [sp, #4]
      *(__IO uint16_t*) tmp = Data >> 16;
 8002772:	9b01      	ldr	r3, [sp, #4]
 8002774:	0c24      	lsrs	r4, r4, #16
 8002776:	801c      	strh	r4, [r3, #0]
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002778:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800277c:	f7ff ffa4 	bl	80026c8 <FLASH_WaitForLastOperation>
      FLASH->CR &= CR_PG_Reset;
 8002780:	4a03      	ldr	r2, [pc, #12]	; (8002790 <FLASH_ProgramWord+0x68>)
 8002782:	6913      	ldr	r3, [r2, #16]
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	04db      	lsls	r3, r3, #19
 800278a:	0cdb      	lsrs	r3, r3, #19
 800278c:	6113      	str	r3, [r2, #16]
 800278e:	e7d7      	b.n	8002740 <FLASH_ProgramWord+0x18>
 8002790:	40022000 	.word	0x40022000

08002794 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002794:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8002796:	78cb      	ldrb	r3, [r1, #3]
 8002798:	f003 020f 	and.w	r2, r3, #15
 800279c:	4615      	mov	r5, r2
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800279e:	f013 0f10 	tst.w	r3, #16
 80027a2:	d001      	beq.n	80027a8 <GPIO_Init+0x14>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80027a4:	788d      	ldrb	r5, [r1, #2]
 80027a6:	4315      	orrs	r5, r2
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80027a8:	780b      	ldrb	r3, [r1, #0]
 80027aa:	b1e3      	cbz	r3, 80027e6 <GPIO_Init+0x52>
  {
    tmpreg = GPIOx->CRL;
 80027ac:	6806      	ldr	r6, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	e001      	b.n	80027b6 <GPIO_Init+0x22>
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80027b2:	6142      	str	r2, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80027b4:	3301      	adds	r3, #1
 80027b6:	2b07      	cmp	r3, #7
 80027b8:	d814      	bhi.n	80027e4 <GPIO_Init+0x50>
      pos = ((uint32_t)0x01) << pinpos;
 80027ba:	2201      	movs	r2, #1
 80027bc:	409a      	lsls	r2, r3
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80027be:	880c      	ldrh	r4, [r1, #0]
      if (currentpin == pos)
 80027c0:	ea32 0404 	bics.w	r4, r2, r4
 80027c4:	d1f6      	bne.n	80027b4 <GPIO_Init+0x20>
        pos = pinpos << 2;
 80027c6:	009c      	lsls	r4, r3, #2
        pinmask = ((uint32_t)0x0F) << pos;
 80027c8:	270f      	movs	r7, #15
 80027ca:	40a7      	lsls	r7, r4
        tmpreg &= ~pinmask;
 80027cc:	ea26 0607 	bic.w	r6, r6, r7
        tmpreg |= (currentmode << pos);
 80027d0:	fa05 f404 	lsl.w	r4, r5, r4
 80027d4:	4326      	orrs	r6, r4
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80027d6:	78cc      	ldrb	r4, [r1, #3]
 80027d8:	2c28      	cmp	r4, #40	; 0x28
 80027da:	d0ea      	beq.n	80027b2 <GPIO_Init+0x1e>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80027dc:	2c48      	cmp	r4, #72	; 0x48
 80027de:	d1e9      	bne.n	80027b4 <GPIO_Init+0x20>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80027e0:	6102      	str	r2, [r0, #16]
 80027e2:	e7e7      	b.n	80027b4 <GPIO_Init+0x20>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80027e4:	6006      	str	r6, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80027e6:	880b      	ldrh	r3, [r1, #0]
 80027e8:	2bff      	cmp	r3, #255	; 0xff
 80027ea:	d920      	bls.n	800282e <GPIO_Init+0x9a>
  {
    tmpreg = GPIOx->CRH;
 80027ec:	6846      	ldr	r6, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	e003      	b.n	80027fa <GPIO_Init+0x66>
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80027f2:	6142      	str	r2, [r0, #20]
 80027f4:	e016      	b.n	8002824 <GPIO_Init+0x90>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80027f6:	6102      	str	r2, [r0, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80027f8:	3301      	adds	r3, #1
 80027fa:	2b07      	cmp	r3, #7
 80027fc:	d816      	bhi.n	800282c <GPIO_Init+0x98>
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80027fe:	f103 0408 	add.w	r4, r3, #8
 8002802:	2201      	movs	r2, #1
 8002804:	40a2      	lsls	r2, r4
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8002806:	880c      	ldrh	r4, [r1, #0]
      if (currentpin == pos)
 8002808:	ea32 0404 	bics.w	r4, r2, r4
 800280c:	d1f4      	bne.n	80027f8 <GPIO_Init+0x64>
        pos = pinpos << 2;
 800280e:	009c      	lsls	r4, r3, #2
        pinmask = ((uint32_t)0x0F) << pos;
 8002810:	270f      	movs	r7, #15
 8002812:	40a7      	lsls	r7, r4
        tmpreg &= ~pinmask;
 8002814:	ea26 0607 	bic.w	r6, r6, r7
        tmpreg |= (currentmode << pos);
 8002818:	fa05 f404 	lsl.w	r4, r5, r4
 800281c:	4326      	orrs	r6, r4
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800281e:	78cc      	ldrb	r4, [r1, #3]
 8002820:	2c28      	cmp	r4, #40	; 0x28
 8002822:	d0e6      	beq.n	80027f2 <GPIO_Init+0x5e>
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8002824:	78cc      	ldrb	r4, [r1, #3]
 8002826:	2c48      	cmp	r4, #72	; 0x48
 8002828:	d1e6      	bne.n	80027f8 <GPIO_Init+0x64>
 800282a:	e7e4      	b.n	80027f6 <GPIO_Init+0x62>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800282c:	6046      	str	r6, [r0, #4]
  }
}
 800282e:	bcf0      	pop	{r4, r5, r6, r7}
 8002830:	4770      	bx	lr
	...

08002834 <IWDG_ReloadCounter>:
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
  IWDG->KR = KR_KEY_Reload;
 8002834:	4b02      	ldr	r3, [pc, #8]	; (8002840 <IWDG_ReloadCounter+0xc>)
 8002836:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800283a:	601a      	str	r2, [r3, #0]
}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40003000 	.word	0x40003000

08002844 <PWR_BackupAccessCmd>:
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8002844:	4b01      	ldr	r3, [pc, #4]	; (800284c <PWR_BackupAccessCmd+0x8>)
 8002846:	6018      	str	r0, [r3, #0]
}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	420e0020 	.word	0x420e0020

08002850 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002850:	b929      	cbnz	r1, 800285e <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002852:	4a05      	ldr	r2, [pc, #20]	; (8002868 <RCC_APB1PeriphResetCmd+0x18>)
 8002854:	6913      	ldr	r3, [r2, #16]
 8002856:	ea23 0000 	bic.w	r0, r3, r0
 800285a:	6110      	str	r0, [r2, #16]
  }
}
 800285c:	4770      	bx	lr
    RCC->APB1RSTR |= RCC_APB1Periph;
 800285e:	4a02      	ldr	r2, [pc, #8]	; (8002868 <RCC_APB1PeriphResetCmd+0x18>)
 8002860:	6913      	ldr	r3, [r2, #16]
 8002862:	4318      	orrs	r0, r3
 8002864:	6110      	str	r0, [r2, #16]
 8002866:	4770      	bx	lr
 8002868:	40021000 	.word	0x40021000

0800286c <RTC_EnterConfigMode>:
  * @retval None
  */
void RTC_EnterConfigMode(void)
{
  /* Set the CNF flag to enter in the Configuration Mode */
  RTC->CRL |= RTC_CRL_CNF;
 800286c:	4a02      	ldr	r2, [pc, #8]	; (8002878 <RTC_EnterConfigMode+0xc>)
 800286e:	8893      	ldrh	r3, [r2, #4]
 8002870:	f043 0310 	orr.w	r3, r3, #16
 8002874:	8093      	strh	r3, [r2, #4]
}
 8002876:	4770      	bx	lr
 8002878:	40002800 	.word	0x40002800

0800287c <RTC_ExitConfigMode>:
  * @retval None
  */
void RTC_ExitConfigMode(void)
{
  /* Reset the CNF flag to exit from the Configuration Mode */
  RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
 800287c:	4a03      	ldr	r2, [pc, #12]	; (800288c <RTC_ExitConfigMode+0x10>)
 800287e:	8893      	ldrh	r3, [r2, #4]
 8002880:	b29b      	uxth	r3, r3
 8002882:	f023 0310 	bic.w	r3, r3, #16
 8002886:	b29b      	uxth	r3, r3
 8002888:	8093      	strh	r3, [r2, #4]
}
 800288a:	4770      	bx	lr
 800288c:	40002800 	.word	0x40002800

08002890 <RTC_GetCounter>:
  * @retval RTC counter value.
  */
uint32_t RTC_GetCounter(void)
{
  uint16_t tmp = 0;
  tmp = RTC->CNTL;
 8002890:	4b02      	ldr	r3, [pc, #8]	; (800289c <RTC_GetCounter+0xc>)
 8002892:	8b9a      	ldrh	r2, [r3, #28]
  return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
 8002894:	8b18      	ldrh	r0, [r3, #24]
}
 8002896:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800289a:	4770      	bx	lr
 800289c:	40002800 	.word	0x40002800

080028a0 <RTC_SetCounter>:
  * @brief  Sets the RTC counter value.
  * @param  CounterValue: RTC counter new value.
  * @retval None
  */
void RTC_SetCounter(uint32_t CounterValue)
{ 
 80028a0:	b510      	push	{r4, lr}
 80028a2:	4604      	mov	r4, r0
  RTC_EnterConfigMode();
 80028a4:	f7ff ffe2 	bl	800286c <RTC_EnterConfigMode>
  /* Set RTC COUNTER MSB word */
  RTC->CNTH = CounterValue >> 16;
 80028a8:	0c22      	lsrs	r2, r4, #16
 80028aa:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <RTC_SetCounter+0x18>)
 80028ac:	831a      	strh	r2, [r3, #24]
  /* Set RTC COUNTER LSB word */
  RTC->CNTL = (CounterValue & RTC_LSB_MASK);
 80028ae:	b2a4      	uxth	r4, r4
 80028b0:	839c      	strh	r4, [r3, #28]
  RTC_ExitConfigMode();
 80028b2:	f7ff ffe3 	bl	800287c <RTC_ExitConfigMode>
}
 80028b6:	bd10      	pop	{r4, pc}
 80028b8:	40002800 	.word	0x40002800

080028bc <InitGPIO>:
   // IWDG_Enable();

};

void InitGPIO(void)
{
 80028bc:	b500      	push	{lr}
 80028be:	b083      	sub	sp, #12
	GPIO_InitTypeDef GPIO_InitStructure;

    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;              // enable clock for port A
 80028c0:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <InitGPIO+0xf0>)
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	f042 0204 	orr.w	r2, r2, #4
 80028c8:	619a      	str	r2, [r3, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;              // enable clock for port B
 80028ca:	699a      	ldr	r2, [r3, #24]
 80028cc:	f042 0208 	orr.w	r2, r2, #8
 80028d0:	619a      	str	r2, [r3, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;              // enable clock for port C
 80028d2:	699a      	ldr	r2, [r3, #24]
 80028d4:	f042 0210 	orr.w	r2, r2, #16
 80028d8:	619a      	str	r2, [r3, #24]


    GPIOC->CRH &= ~GPIO_CRH_CNF8;
 80028da:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	f022 020c 	bic.w	r2, r2, #12
 80028e4:	605a      	str	r2, [r3, #4]
    GPIOC->CRH |= GPIO_CRH_MODE8_0;
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	605a      	str	r2, [r3, #4]

    GPIOC->CRH &= ~GPIO_CRH_CNF9;
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80028f4:	605a      	str	r2, [r3, #4]
    GPIOC->CRH |= GPIO_CRH_MODE9_0;
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	f042 0210 	orr.w	r2, r2, #16
 80028fc:	605a      	str	r2, [r3, #4]

    GPIOC->CRL &= ~GPIO_CRL_CNF0;
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	f022 020c 	bic.w	r2, r2, #12
 8002904:	601a      	str	r2, [r3, #0]
    GPIOC->CRL &= ~GPIO_CRL_MODE0;
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	f022 0203 	bic.w	r2, r2, #3
 800290c:	601a      	str	r2, [r3, #0]

    GPIOC->CRH &= ~GPIO_CRH_CNF13;	//LED on board
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002914:	605a      	str	r2, [r3, #4]
    GPIOC->CRH |= GPIO_CRH_MODE13;
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 800291c:	605a      	str	r2, [r3, #4]

    GPIOB->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);
 800291e:	4824      	ldr	r0, [pc, #144]	; (80029b0 <InitGPIO+0xf4>)
 8002920:	6803      	ldr	r3, [r0, #0]
 8002922:	f023 03cc 	bic.w	r3, r3, #204	; 0xcc
 8002926:	6003      	str	r3, [r0, #0]
    GPIOB->CRL |= GPIO_CRL_MODE0 | GPIO_CRL_MODE1;
 8002928:	6803      	ldr	r3, [r0, #0]
 800292a:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 800292e:	6003      	str	r3, [r0, #0]
    GPIOB->CRH |= (GPIO_CRH_MODE10 | GPIO_CRH_MODE11 | GPIO_CRH_MODE12 | GPIO_CRH_MODE13 | GPIO_CRH_MODE14 | GPIO_CRH_MODE15);
#endif

#if defined  (USE_DISPLAY_SERIAL) || defined (USE_DISPLAY_LCD_6)

    GPIOA->CRL &= ~GPIO_CRL_CNF6;	//Disp_RCK
 8002930:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <InitGPIO+0xf8>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002938:	601a      	str	r2, [r3, #0]
    GPIOA->CRL |= GPIO_CRL_MODE6; 	//OUT
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002940:	601a      	str	r2, [r3, #0]

    GPIOA->CRL	&= ~(GPIO_CRL_CNF7 | GPIO_CRL_CNF5);
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002948:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800294c:	601a      	str	r2, [r3, #0]
    GPIOA->CRL	|= GPIO_CRL_CNF7_1 | GPIO_CRL_MODE7 | GPIO_CRL_CNF5_1 | GPIO_CRL_MODE5;	//SPI1_MOSI
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	f042 4230 	orr.w	r2, r2, #2952790016	; 0xb0000000
 8002954:	f442 0230 	orr.w	r2, r2, #11534336	; 0xb00000
 8002958:	601a      	str	r2, [r3, #0]
    GPIOB->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_CNF1);
    GPIOB->CRL |= (GPIO_CRL_MODE0 | GPIO_CRL_MODE1);

#endif

    GPIOB->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8);
 800295a:	6843      	ldr	r3, [r0, #4]
 800295c:	f023 030f 	bic.w	r3, r3, #15
 8002960:	6043      	str	r3, [r0, #4]
    GPIOB->CRH |= GPIO_CRH_CNF8_1 ;
 8002962:	6843      	ldr	r3, [r0, #4]
 8002964:	f043 0308 	orr.w	r3, r3, #8
 8002968:	6043      	str	r3, [r0, #4]
    GPIOB->ODR |= GPIO_ODR_ODR8;
 800296a:	68c3      	ldr	r3, [r0, #12]
 800296c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002970:	60c3      	str	r3, [r0, #12]
    //GPIOB->CRH |= GPIO_CRH_MODE8_0;
    GPIOB->CRH &= ~GPIO_CRH_CNF9;
 8002972:	6843      	ldr	r3, [r0, #4]
 8002974:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002978:	6043      	str	r3, [r0, #4]
    GPIOB->CRH |= GPIO_CRH_MODE9 | GPIO_CRH_CNF9_1;
 800297a:	6843      	ldr	r3, [r0, #4]
 800297c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002980:	6043      	str	r3, [r0, #4]


    AFIO->MAPR |= AFIO_MAPR_CAN_REMAP_REMAP2; /*!< CANRX mapped to PB8, CANTX mapped to PB9 */
 8002982:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <InitGPIO+0xfc>)
 8002984:	6853      	ldr	r3, [r2, #4]
 8002986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800298a:	6053      	str	r3, [r2, #4]

    GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_8;
 800298c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002990:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU;
 8002994:	2348      	movs	r3, #72	; 0x48
 8002996:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800299a:	2303      	movs	r3, #3
 800299c:	f88d 3006 	strb.w	r3, [sp, #6]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80029a0:	a901      	add	r1, sp, #4
 80029a2:	f7ff fef7 	bl	8002794 <GPIO_Init>

};
 80029a6:	b003      	add	sp, #12
 80029a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40010c00 	.word	0x40010c00
 80029b4:	40010800 	.word	0x40010800
 80029b8:	40010000 	.word	0x40010000

080029bc <InitSPI>:
{

#ifdef USE_DISPLAY_LCD_6
	SPI1->CR1 |= (SPI_CR1_BIDIOE  | SPI_CR1_BR_2 | SPI_CR1_MSTR | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_BIDIMODE );
#else
    SPI1->CR1 |= (SPI_CR1_BIDIOE | SPI_CR1_DFF | SPI_CR1_BR_2 | SPI_CR1_MSTR | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_BIDIMODE);
 80029bc:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <InitSPI+0x18>)
 80029be:	8813      	ldrh	r3, [r2, #0]
 80029c0:	f443 434b 	orr.w	r3, r3, #51968	; 0xcb00
 80029c4:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80029c8:	8013      	strh	r3, [r2, #0]
#endif
    SPI1->CR1 |= SPI_CR1_SPE;
 80029ca:	8813      	ldrh	r3, [r2, #0]
 80029cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029d0:	8013      	strh	r3, [r2, #0]

};
 80029d2:	4770      	bx	lr
 80029d4:	40013000 	.word	0x40013000

080029d8 <Init_sys>:
{
 80029d8:	b508      	push	{r3, lr}
	RCC->AHBENR  |= RCC_AHBENR_CRCEN;
 80029da:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <Init_sys+0xa4>)
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e2:	615a      	str	r2, [r3, #20]
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN | RCC_APB2ENR_AFIOEN;
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	619a      	str	r2, [r3, #24]
    RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN | RCC_APB1ENR_CAN1EN | RCC_APB1ENR_WWDGEN | RCC_APB1ENR_TIM3EN | RCC_APB1ENR_TIM4EN;
 80029f0:	69d9      	ldr	r1, [r3, #28]
 80029f2:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <Init_sys+0xa8>)
 80029f4:	430a      	orrs	r2, r1
 80029f6:	61da      	str	r2, [r3, #28]
    PWR->CR |= PWR_CR_DBP;
 80029f8:	4922      	ldr	r1, [pc, #136]	; (8002a84 <Init_sys+0xac>)
 80029fa:	680a      	ldr	r2, [r1, #0]
 80029fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a00:	600a      	str	r2, [r1, #0]
    RCC->BDCR |= RCC_BDCR_LSEON | RCC_BDCR_RTCEN;
 8002a02:	6a1a      	ldr	r2, [r3, #32]
 8002a04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	621a      	str	r2, [r3, #32]
    RCC->BDCR |= RCC_BDCR_RTCSEL_0;
 8002a0e:	6a1a      	ldr	r2, [r3, #32]
 8002a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a14:	621a      	str	r2, [r3, #32]
    PWR->CR &= ~(PWR_CR_DBP);
 8002a16:	680b      	ldr	r3, [r1, #0]
 8002a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a1c:	600b      	str	r3, [r1, #0]
    SystemInit();
 8002a1e:	f001 fe5b 	bl	80046d8 <SystemInit>
    InitGPIO();
 8002a22:	f7ff ff4b 	bl	80028bc <InitGPIO>
    InitSPI();
 8002a26:	f7ff ffc9 	bl	80029bc <InitSPI>
    RTC->CRL |= RTC_CRL_CNF;	//Configuration mode
 8002a2a:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <Init_sys+0xb0>)
 8002a2c:	8893      	ldrh	r3, [r2, #4]
 8002a2e:	f043 0310 	orr.w	r3, r3, #16
 8002a32:	8093      	strh	r3, [r2, #4]
    RTC->PRLL = 0x7FFF;
 8002a34:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002a38:	8193      	strh	r3, [r2, #12]
    RTC->CRL &= ~(RTC_CRL_CNF);
 8002a3a:	8893      	ldrh	r3, [r2, #4]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	f023 0310 	bic.w	r3, r3, #16
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	8093      	strh	r3, [r2, #4]
    TIM3->ARR = 700;
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <Init_sys+0xb4>)
 8002a48:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002a4c:	859a      	strh	r2, [r3, #44]	; 0x2c
    TIM3->PSC = 71;
 8002a4e:	2247      	movs	r2, #71	; 0x47
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM3->DIER |= TIM_DIER_UIE;
 8002a52:	899a      	ldrh	r2, [r3, #12]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	819a      	strh	r2, [r3, #12]
    TIM3->CR1 |= TIM_CR1_ARPE;
 8002a5a:	881a      	ldrh	r2, [r3, #0]
 8002a5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a60:	801a      	strh	r2, [r3, #0]
    TIM3->CR1 |= TIM_CR1_CEN;
 8002a62:	881a      	ldrh	r2, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	801a      	strh	r2, [r3, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <Init_sys+0xb8>)
 8002a6c:	22a0      	movs	r2, #160	; 0xa0
 8002a6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8002a72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a76:	601a      	str	r2, [r3, #0]
};
 8002a78:	bd08      	pop	{r3, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	1a000806 	.word	0x1a000806
 8002a84:	40007000 	.word	0x40007000
 8002a88:	40002800 	.word	0x40002800
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	e000e100 	.word	0xe000e100

08002a94 <CanInit>:
/*******************************************************************************
* Function Name	:	CanInit
* Description	:	Initialize CAN interface
*******************************************************************************/
void CanInit(u8 CANSpeed)
{
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	b088      	sub	sp, #32
	CAN_InitTypeDef			can_init;
	CAN_FilterInitTypeDef	can_filter_init;

	CAN_ITConfig(CAN_CAN, CAN_IT_FMP0, DISABLE);
 8002a98:	4e23      	ldr	r6, [pc, #140]	; (8002b28 <CanInit+0x94>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	f7ff fd8c 	bl	80025bc <CAN_ITConfig>
	CAN_DeInit(CAN_CAN);
 8002aa4:	4630      	mov	r0, r6
 8002aa6:	f7ff fb9f 	bl	80021e8 <CAN_DeInit>

	CAN_StructInit(&can_init);
 8002aaa:	a805      	add	r0, sp, #20
 8002aac:	f7ff fcbe 	bl	800242c <CAN_StructInit>


	can_init.CAN_NART = ENABLE;
 8002ab0:	2501      	movs	r5, #1
 8002ab2:	f88d 501d 	strb.w	r5, [sp, #29]
	can_init.CAN_ABOM = DISABLE;
 8002ab6:	2400      	movs	r4, #0
 8002ab8:	f88d 401b 	strb.w	r4, [sp, #27]
	can_init.CAN_RFLM = DISABLE;
 8002abc:	f88d 401e 	strb.w	r4, [sp, #30]
	can_init.CAN_Mode = CAN_Mode_Normal;
 8002ac0:	f88d 4016 	strb.w	r4, [sp, #22]
#elif defined ( STM32F2XX )		// 120 MHz	(CAN 30MHz)
	can_init.CAN_SJW = CAN_SJW_1tq;
	can_init.CAN_BS1 = CAN_BS1_6tq;
	can_init.CAN_BS2 = CAN_BS2_8tq;
#elif defined ( STM32F10X_MD )		// 72 MHz	(CAN 36MHz)
	can_init.CAN_SJW = CAN_SJW_1tq;
 8002ac4:	f88d 4017 	strb.w	r4, [sp, #23]
	can_init.CAN_BS1 = CAN_BS1_13tq;//CAN_BS1_6tq;
 8002ac8:	230c      	movs	r3, #12
 8002aca:	f88d 3018 	strb.w	r3, [sp, #24]
	can_init.CAN_BS2 = CAN_BS2_2tq;//CAN_BS2_8tq;
 8002ace:	f88d 5019 	strb.w	r5, [sp, #25]
//		can_init.CAN_Prescaler = 8;
//	else if (CANSpeed == CAN_SPEED_125)
//		can_init.CAN_Prescaler = 16;
//	else	// if (CANSpeed == CAN_SPEED_100)
//		can_init.CAN_Prescaler = 22;
	can_init.CAN_Prescaler = 9;
 8002ad2:	2309      	movs	r3, #9
 8002ad4:	f8ad 3014 	strh.w	r3, [sp, #20]
	CAN_Init(CAN_CAN, &can_init);
 8002ad8:	a905      	add	r1, sp, #20
 8002ada:	4630      	mov	r0, r6
 8002adc:	f7ff fba0 	bl	8002220 <CAN_Init>

	can_filter_init.CAN_FilterNumber			= 0;
 8002ae0:	f88d 400e 	strb.w	r4, [sp, #14]
	can_filter_init.CAN_FilterMode				= CAN_FilterMode_IdMask;
 8002ae4:	f88d 400f 	strb.w	r4, [sp, #15]
	can_filter_init.CAN_FilterScale				= CAN_FilterScale_32bit;
 8002ae8:	f88d 5010 	strb.w	r5, [sp, #16]
	can_filter_init.CAN_FilterIdHigh			= 0;//(((u32)PID_REPLY << 21) & 0xFFFF0000) >> 16;
 8002aec:	f8ad 4004 	strh.w	r4, [sp, #4]
	can_filter_init.CAN_FilterIdLow				= 0;//(((u32)PID_REPLY << 21) | CAN_ID_STD | CAN_RTR_DATA) & 0xFFFF;
 8002af0:	f8ad 4006 	strh.w	r4, [sp, #6]
	can_filter_init.CAN_FilterMaskIdHigh		= 0;//0xFFFF;
 8002af4:	f8ad 4008 	strh.w	r4, [sp, #8]
	can_filter_init.CAN_FilterMaskIdLow			= 0;//0xFFFF;
 8002af8:	f8ad 400a 	strh.w	r4, [sp, #10]
	can_filter_init.CAN_FilterFIFOAssignment		= 0;
 8002afc:	f8ad 400c 	strh.w	r4, [sp, #12]
	can_filter_init.CAN_FilterActivation			= ENABLE;
 8002b00:	f88d 5011 	strb.w	r5, [sp, #17]

	CAN_FilterInit(&can_filter_init);
 8002b04:	a801      	add	r0, sp, #4
 8002b06:	f7ff fc13 	bl	8002330 <CAN_FilterInit>
	CAN_ITConfig(CAN_CAN, CAN_IT_FMP0, ENABLE);
 8002b0a:	462a      	mov	r2, r5
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	4630      	mov	r0, r6
 8002b10:	f7ff fd54 	bl	80025bc <CAN_ITConfig>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <CanInit+0x98>)
 8002b16:	22f0      	movs	r2, #240	; 0xf0
 8002b18:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8002b1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b20:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn ,15);	//what priority we need? who know...
	NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
	//NVIC_SetPriority (CAN_RX0_IRQn, 1);

}
 8002b22:	b008      	add	sp, #32
 8002b24:	bd70      	pop	{r4, r5, r6, pc}
 8002b26:	bf00      	nop
 8002b28:	40006400 	.word	0x40006400
 8002b2c:	e000e100 	.word	0xe000e100

08002b30 <PrepareMessage_S6>:
* Function Name		:	S6BUSMessgae
* Description		:	Prepare S6bus message
* Return			:	pointer to message
*******************************************************************************/
CanTxMsg* PrepareMessage_S6(CanTxMsg* msg, u32 PGN, u8 ID, u8 * data)
{
 8002b30:	b410      	push	{r4}

	msg->ExtId		= (PGN<<8 | ID);
 8002b32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b36:	6042      	str	r2, [r0, #4]
	msg->RTR		= CAN_RTR_DATA;
 8002b38:	2200      	movs	r2, #0
 8002b3a:	7242      	strb	r2, [r0, #9]
	msg->IDE		= CAN_ID_EXT;
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	7202      	strb	r2, [r0, #8]
	msg->DLC		= 8;
 8002b40:	2208      	movs	r2, #8
 8002b42:	7282      	strb	r2, [r0, #10]
	memcpy(msg->Data,data,8);
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f8c0 200b 	str.w	r2, [r0, #11]
 8002b4c:	f8c0 300f 	str.w	r3, [r0, #15]

	return msg;
}
 8002b50:	bc10      	pop	{r4}
 8002b52:	4770      	bx	lr

08002b54 <Send_S6>:
* Function Name		:	Send Data to CAN BUS
* Description		:	Initialize hardware
* Return			:	mailbox number or CAN_NO_MB if no free mailbox
*******************************************************************************/
u8 Send_S6(u32 PGN, u8 * data)
{
 8002b54:	b510      	push	{r4, lr}
	PrepareMessage_S6(&TxMessage, PGN,settings.MY_ADDR, data);	// Build package
 8002b56:	4c06      	ldr	r4, [pc, #24]	; (8002b70 <Send_S6+0x1c>)
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4a06      	ldr	r2, [pc, #24]	; (8002b74 <Send_S6+0x20>)
 8002b5c:	7812      	ldrb	r2, [r2, #0]
 8002b5e:	4601      	mov	r1, r0
 8002b60:	4620      	mov	r0, r4
 8002b62:	f7ff ffe5 	bl	8002b30 <PrepareMessage_S6>
	PrintCanMsgTx(&TxMessage);
	return CAN_Transmit(CAN_CAN, &TxMessage);
 8002b66:	4621      	mov	r1, r4
 8002b68:	4803      	ldr	r0, [pc, #12]	; (8002b78 <Send_S6+0x24>)
 8002b6a:	f7ff fc6f 	bl	800244c <CAN_Transmit>
}
 8002b6e:	bd10      	pop	{r4, pc}
 8002b70:	20004150 	.word	0x20004150
 8002b74:	200042f0 	.word	0x200042f0
 8002b78:	40006400 	.word	0x40006400

08002b7c <CAN_set_Deinit>:
	}
}

void CAN_set_Deinit(T_CAN_SET_MSG * x)
{
	x->ID =0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	7103      	strb	r3, [r0, #4]
	x->char_index = 0;
 8002b80:	80c3      	strh	r3, [r0, #6]
	x->msg_index =0;
 8002b82:	7043      	strb	r3, [r0, #1]
	x->char_len = 0;
 8002b84:	70c3      	strb	r3, [r0, #3]
	x->msg_len =0;
 8002b86:	7083      	strb	r3, [r0, #2]
	x->startTick =0;
 8002b88:	60c3      	str	r3, [r0, #12]
	x->ptr = NULL;
 8002b8a:	6083      	str	r3, [r0, #8]
	x->status =0;
 8002b8c:	7003      	strb	r3, [r0, #0]
};
 8002b8e:	4770      	bx	lr

08002b90 <CAN_set_RX_Init>:

void CAN_set_RX_Init(T_CAN_SET_MSG * x )
{
 8002b90:	b508      	push	{r3, lr}
 8002b92:	4603      	mov	r3, r0
	x->ID =0;
 8002b94:	2100      	movs	r1, #0
 8002b96:	7101      	strb	r1, [r0, #4]
	x->char_index = 0;
 8002b98:	80c1      	strh	r1, [r0, #6]
	x->msg_index =0;
 8002b9a:	7041      	strb	r1, [r0, #1]
	x->char_len = 0;
 8002b9c:	70c1      	strb	r1, [r0, #3]
	x->msg_len =0;
 8002b9e:	7081      	strb	r1, [r0, #2]
	x->startTick =0;
 8002ba0:	60c1      	str	r1, [r0, #12]
	x->ptr = & CAN_set_RX_buffer[0];
 8002ba2:	4804      	ldr	r0, [pc, #16]	; (8002bb4 <CAN_set_RX_Init+0x24>)
 8002ba4:	6098      	str	r0, [r3, #8]
	x->status =0;
 8002ba6:	7019      	strb	r1, [r3, #0]
	memset(CAN_set_RX_buffer,0,CAN_SET_BUF_SIZE);
 8002ba8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002bac:	f002 f856 	bl	8004c5c <memset>
}
 8002bb0:	bd08      	pop	{r3, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20003b80 	.word	0x20003b80

08002bb8 <CAN_set_answer_Init>:

void CAN_set_answer_Init(T_CAN_SET_MSG * v, T_CAN_SET_MSG * x, u8 * buf) {
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	4606      	mov	r6, r0
 8002bbc:	460c      	mov	r4, r1
 8002bbe:	4615      	mov	r5, r2
	u32 i, o = 0;

	x->char_index = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	80cb      	strh	r3, [r1, #6]
	x->msg_index = 0;
 8002bc4:	704b      	strb	r3, [r1, #1]
	x->msg_len = 1;
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	708a      	strb	r2, [r1, #2]
	x->startTick = 0;
 8002bca:	60cb      	str	r3, [r1, #12]
	x->ptr = &CAN_set_TX_buffer[0];
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <CAN_set_answer_Init+0x54>)
 8002bce:	608b      	str	r3, [r1, #8]
	x->char_len = strlen((char*) buf);
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	f7fd fabd 	bl	8000150 <strlen>
 8002bd6:	b2c0      	uxtb	r0, r0
 8002bd8:	70e0      	strb	r0, [r4, #3]
	if (x->char_len) {
 8002bda:	b1a8      	cbz	r0, 8002c08 <CAN_set_answer_Init+0x50>
		//memcpy((u8*)x->ptr,(u8*)buf,x->char_len);
		x->ID = v->ID;
 8002bdc:	7933      	ldrb	r3, [r6, #4]
 8002bde:	7123      	strb	r3, [r4, #4]
	u32 i, o = 0;
 8002be0:	2200      	movs	r2, #0
		for (i = 0; i < x->char_len; i++) {
 8002be2:	4613      	mov	r3, r2
 8002be4:	e000      	b.n	8002be8 <CAN_set_answer_Init+0x30>
 8002be6:	3301      	adds	r3, #1
 8002be8:	78e1      	ldrb	r1, [r4, #3]
 8002bea:	4299      	cmp	r1, r3
 8002bec:	d90a      	bls.n	8002c04 <CAN_set_answer_Init+0x4c>
			*(x->ptr + i) = *(buf + i);
 8002bee:	68a1      	ldr	r1, [r4, #8]
 8002bf0:	5ce8      	ldrb	r0, [r5, r3]
 8002bf2:	54c8      	strb	r0, [r1, r3]
			if (++o > 6) {
 8002bf4:	3201      	adds	r2, #1
 8002bf6:	2a06      	cmp	r2, #6
 8002bf8:	d9f5      	bls.n	8002be6 <CAN_set_answer_Init+0x2e>
				x->msg_len++;
 8002bfa:	78a2      	ldrb	r2, [r4, #2]
 8002bfc:	3201      	adds	r2, #1
 8002bfe:	70a2      	strb	r2, [r4, #2]
				o = 0;
 8002c00:	2200      	movs	r2, #0
 8002c02:	e7f0      	b.n	8002be6 <CAN_set_answer_Init+0x2e>
			}
		}
		x->status = 1;
 8002c04:	2301      	movs	r3, #1
 8002c06:	7023      	strb	r3, [r4, #0]
	}

}
 8002c08:	bd70      	pop	{r4, r5, r6, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20003dd8 	.word	0x20003dd8

08002c10 <vCanTask>:
{
 8002c10:	b530      	push	{r4, r5, lr}
 8002c12:	b093      	sub	sp, #76	; 0x4c
	__IO u8 can_rx_addr=0;
 8002c14:	2200      	movs	r2, #0
 8002c16:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
	__IO u32 Err_CAN_count = 0;
 8002c1a:	920f      	str	r2, [sp, #60]	; 0x3c
	CanRxQueue = xQueueCreate(CAN_RX_QUEUE_SIZE, sizeof(CanRxMsg));
 8002c1c:	2114      	movs	r1, #20
 8002c1e:	2008      	movs	r0, #8
 8002c20:	f7fe faf6 	bl	8001210 <xQueueGenericCreate>
 8002c24:	4b94      	ldr	r3, [pc, #592]	; (8002e78 <vCanTask+0x268>)
 8002c26:	6018      	str	r0, [r3, #0]
	if (CanRxQueue == NULL)
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	f000 827d 	beq.w	8003128 <vCanTask+0x518>
	CanTxQueue = xQueueCreate(CAN_TX_QUEUE_SIZE, sizeof(CanTxMsg));
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2114      	movs	r1, #20
 8002c32:	2004      	movs	r0, #4
 8002c34:	f7fe faec 	bl	8001210 <xQueueGenericCreate>
 8002c38:	4b90      	ldr	r3, [pc, #576]	; (8002e7c <vCanTask+0x26c>)
 8002c3a:	6018      	str	r0, [r3, #0]
	if (CanTxQueue == NULL)
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	f000 8273 	beq.w	8003128 <vCanTask+0x518>
	CanTxTimer = xTimerCreate("CAN TX",10,pdTRUE,0,CAN_send_Timer);
 8002c42:	4b8f      	ldr	r3, [pc, #572]	; (8002e80 <vCanTask+0x270>)
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2300      	movs	r3, #0
 8002c48:	2201      	movs	r2, #1
 8002c4a:	210a      	movs	r1, #10
 8002c4c:	488d      	ldr	r0, [pc, #564]	; (8002e84 <vCanTask+0x274>)
 8002c4e:	f7ff f95d 	bl	8001f0c <xTimerCreate>
 8002c52:	4604      	mov	r4, r0
 8002c54:	4b8c      	ldr	r3, [pc, #560]	; (8002e88 <vCanTask+0x278>)
 8002c56:	6018      	str	r0, [r3, #0]
	xTimerReset(CanTxTimer,0);
 8002c58:	f7fe fec8 	bl	80019ec <xTaskGetTickCount>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4602      	mov	r2, r0
 8002c62:	2102      	movs	r1, #2
 8002c64:	4620      	mov	r0, r4
 8002c66:	f7ff f96d 	bl	8001f44 <xTimerGenericCommand>
 8002c6a:	e24e      	b.n	800310a <vCanTask+0x4fa>
					if (can_rx_PGN == settings.Ain.pgn && can_rx_addr == settings.Ain.addr)
 8002c6c:	4b87      	ldr	r3, [pc, #540]	; (8002e8c <vCanTask+0x27c>)
 8002c6e:	7eda      	ldrb	r2, [r3, #27]
 8002c70:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	429a      	cmp	r2, r3
 8002c78:	f040 817b 	bne.w	8002f72 <vCanTask+0x362>
						IN_CAN.Ain1 = ((RxMessage.Data[1]<<8) | RxMessage.Data[0]);
 8002c7c:	4b84      	ldr	r3, [pc, #528]	; (8002e90 <vCanTask+0x280>)
 8002c7e:	7b18      	ldrb	r0, [r3, #12]
 8002c80:	7ada      	ldrb	r2, [r3, #11]
 8002c82:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002c86:	9204      	str	r2, [sp, #16]
						IN_CAN.Ain2 = ((RxMessage.Data[3]<<8) | RxMessage.Data[2]);
 8002c88:	7b98      	ldrb	r0, [r3, #14]
 8002c8a:	7b5a      	ldrb	r2, [r3, #13]
 8002c8c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002c90:	9205      	str	r2, [sp, #20]
						IN_CAN.Ain3 = ((RxMessage.Data[5]<<8) | RxMessage.Data[4]);
 8002c92:	7c1a      	ldrb	r2, [r3, #16]
 8002c94:	7bdb      	ldrb	r3, [r3, #15]
 8002c96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c9a:	9306      	str	r3, [sp, #24]
						CAN_SENS_RX_Timeout[CAN_SENSOR_Ain] = tick;
 8002c9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c9e:	4b7d      	ldr	r3, [pc, #500]	; (8002e94 <vCanTask+0x284>)
 8002ca0:	60da      	str	r2, [r3, #12]
						IN_CAN.valid_AIN  = 1;
 8002ca2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002ca6:	f043 0302 	orr.w	r3, r3, #2
 8002caa:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8002cae:	e160      	b.n	8002f72 <vCanTask+0x362>
					if (can_rx_PGN == settings.CNT.pgn && can_rx_addr == settings.CNT.addr)
 8002cb0:	4b76      	ldr	r3, [pc, #472]	; (8002e8c <vCanTask+0x27c>)
 8002cb2:	78da      	ldrb	r2, [r3, #3]
 8002cb4:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	f040 8160 	bne.w	8002f80 <vCanTask+0x370>
						IN_CAN.G_CNT_EX = RxMessage.Data[3]<<24 |  RxMessage.Data[2]<<16 |  RxMessage.Data[1]<<8 | RxMessage.Data[0];
 8002cc0:	4a73      	ldr	r2, [pc, #460]	; (8002e90 <vCanTask+0x280>)
 8002cc2:	7b90      	ldrb	r0, [r2, #14]
 8002cc4:	7b53      	ldrb	r3, [r2, #13]
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002ccc:	7b10      	ldrb	r0, [r2, #12]
 8002cce:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002cd2:	7ad2      	ldrb	r2, [r2, #11]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	9303      	str	r3, [sp, #12]
						CAN_SENS_RX_Timeout[CAN_SENSOR_CNT] = tick;
 8002cd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002cda:	4b6e      	ldr	r3, [pc, #440]	; (8002e94 <vCanTask+0x284>)
 8002cdc:	605a      	str	r2, [r3, #4]
						IN_CAN.valid_CNT = 1;
 8002cde:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8002cea:	e149      	b.n	8002f80 <vCanTask+0x370>
						if (can_rx_PGN == settings.Time.pgn && can_rx_addr == settings.Time.addr)
 8002cec:	4b67      	ldr	r3, [pc, #412]	; (8002e8c <vCanTask+0x27c>)
 8002cee:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002cf2:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	f040 8148 	bne.w	8002f8e <vCanTask+0x37e>
						IN_CAN.time_TR = RxMessage.Data[4] | RxMessage.Data[5]<<8 | RxMessage.Data[6] <<16 | RxMessage.Data[7]<<24;
 8002cfe:	4a64      	ldr	r2, [pc, #400]	; (8002e90 <vCanTask+0x280>)
 8002d00:	7bd3      	ldrb	r3, [r2, #15]
 8002d02:	7c10      	ldrb	r0, [r2, #16]
 8002d04:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002d08:	7c50      	ldrb	r0, [r2, #17]
 8002d0a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002d0e:	7c92      	ldrb	r2, [r2, #18]
 8002d10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d14:	930b      	str	r3, [sp, #44]	; 0x2c
						CAN_SENS_RX_Timeout[CAN_SENSOR_Time] = tick;
 8002d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d18:	4b5e      	ldr	r3, [pc, #376]	; (8002e94 <vCanTask+0x284>)
 8002d1a:	611a      	str	r2, [r3, #16]
						IN_CAN.valid_timer = 1;
 8002d1c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002d20:	f043 0308 	orr.w	r3, r3, #8
 8002d24:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8002d28:	e131      	b.n	8002f8e <vCanTask+0x37e>
					if (can_rx_PGN == settings.valve.pgn && can_rx_addr == settings.valve.addr)
 8002d2a:	4b58      	ldr	r3, [pc, #352]	; (8002e8c <vCanTask+0x27c>)
 8002d2c:	7bda      	ldrb	r2, [r3, #15]
 8002d2e:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	429a      	cmp	r2, r3
 8002d36:	f040 8131 	bne.w	8002f9c <vCanTask+0x38c>
						if((RxMessage.Data[1] ) !=0	)IN_CAN.pump_state = state_on; else IN_CAN.pump_state =state_off;
 8002d3a:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <vCanTask+0x280>)
 8002d3c:	7b1b      	ldrb	r3, [r3, #12]
 8002d3e:	b193      	cbz	r3, 8002d66 <vCanTask+0x156>
 8002d40:	2302      	movs	r3, #2
 8002d42:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
						if ((RxMessage.Data[6]) ==0	)IN_CAN.valve_state = state_on; else IN_CAN.valve_state = state_off;
 8002d46:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <vCanTask+0x280>)
 8002d48:	7c5b      	ldrb	r3, [r3, #17]
 8002d4a:	b983      	cbnz	r3, 8002d6e <vCanTask+0x15e>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
						CAN_SENS_RX_Timeout[CAN_SENSOR_valve] = tick;
 8002d52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d54:	4b4f      	ldr	r3, [pc, #316]	; (8002e94 <vCanTask+0x284>)
 8002d56:	609a      	str	r2, [r3, #8]
						IN_CAN.valid_valve = 1;
 8002d58:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002d5c:	f043 0304 	orr.w	r3, r3, #4
 8002d60:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8002d64:	e11a      	b.n	8002f9c <vCanTask+0x38c>
						if((RxMessage.Data[1] ) !=0	)IN_CAN.pump_state = state_on; else IN_CAN.pump_state =state_off;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8002d6c:	e7eb      	b.n	8002d46 <vCanTask+0x136>
						if ((RxMessage.Data[6]) ==0	)IN_CAN.valve_state = state_on; else IN_CAN.valve_state = state_off;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8002d74:	e7ed      	b.n	8002d52 <vCanTask+0x142>
					if (can_rx_PGN == settings.CADR.pgn && can_rx_addr == settings.CADR.addr)
 8002d76:	4b45      	ldr	r3, [pc, #276]	; (8002e8c <vCanTask+0x27c>)
 8002d78:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8002d7c:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	429a      	cmp	r2, r3
 8002d84:	f040 8111 	bne.w	8002faa <vCanTask+0x39a>
						memcpy(IN_CAN.CARD,&RxMessage.Data[2],5);
 8002d88:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <vCanTask+0x280>)
 8002d8a:	f853 0f0d 	ldr.w	r0, [r3, #13]!
 8002d8e:	9007      	str	r0, [sp, #28]
 8002d90:	791b      	ldrb	r3, [r3, #4]
 8002d92:	f88d 3020 	strb.w	r3, [sp, #32]
						IN_CAN.valid_card = 1;
 8002d96:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002d9a:	f043 0310 	orr.w	r3, r3, #16
 8002d9e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
						CAN_SENS_RX_Timeout[CAN_SENSOR_CARD] = tick;
 8002da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002da4:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <vCanTask+0x284>)
 8002da6:	615a      	str	r2, [r3, #20]
 8002da8:	e0ff      	b.n	8002faa <vCanTask+0x39a>
					if (can_rx_PGN == settings.MASTER_Dispay.pgn && can_rx_addr == settings.MASTER_Dispay.addr)
 8002daa:	4b38      	ldr	r3, [pc, #224]	; (8002e8c <vCanTask+0x27c>)
 8002dac:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002db0:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	429a      	cmp	r2, r3
 8002db8:	f040 80fe 	bne.w	8002fb8 <vCanTask+0x3a8>
						memcpy(IN_CAN.master_d,&RxMessage.Data[0],8);
 8002dbc:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <vCanTask+0x280>)
 8002dbe:	f853 2f0b 	ldr.w	r2, [r3, #11]!
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f8cd 2021 	str.w	r2, [sp, #33]	; 0x21
 8002dc8:	f8cd 3025 	str.w	r3, [sp, #37]	; 0x25
						IN_CAN.valid_master_disp = 1;
 8002dcc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002dd0:	f043 0320 	orr.w	r3, r3, #32
 8002dd4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
						CAN_SENS_RX_Timeout[CAN_SENSOR_Master] = tick;
 8002dd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002dda:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <vCanTask+0x284>)
 8002ddc:	619a      	str	r2, [r3, #24]
 8002dde:	e0eb      	b.n	8002fb8 <vCanTask+0x3a8>
									IN_CAN.valid_AIN =0;
 8002de0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002de4:	f36f 0341 	bfc	r3, #1, #1
 8002de8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
					for (i=0;i<(CAN_SENSORS);i++)
 8002dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dee:	3301      	adds	r3, #1
 8002df0:	930d      	str	r3, [sp, #52]	; 0x34
 8002df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	d84f      	bhi.n	8002e98 <vCanTask+0x288>
						if ((CAN_SENS_RX_Timeout[0] > (CAN_SENS_RX_Timeout[i+1]) + 1000))
 8002df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	4a25      	ldr	r2, [pc, #148]	; (8002e94 <vCanTask+0x284>)
 8002dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e02:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002e06:	4299      	cmp	r1, r3
 8002e08:	d9f0      	bls.n	8002dec <vCanTask+0x1dc>
							switch (i+1) {
 8002e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e0c:	2b05      	cmp	r3, #5
 8002e0e:	d8ed      	bhi.n	8002dec <vCanTask+0x1dc>
 8002e10:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <vCanTask+0x208>)
 8002e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e16:	bf00      	nop
 8002e18:	08002e3f 	.word	0x08002e3f
 8002e1c:	08002e5b 	.word	0x08002e5b
 8002e20:	08002de1 	.word	0x08002de1
 8002e24:	08002e4d 	.word	0x08002e4d
 8002e28:	08002e31 	.word	0x08002e31
 8002e2c:	08002e69 	.word	0x08002e69
									IN_CAN.valid_card =0;
 8002e30:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002e34:	f36f 1304 	bfc	r3, #4, #1
 8002e38:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
									break;
 8002e3c:	e7d6      	b.n	8002dec <vCanTask+0x1dc>
									IN_CAN.valid_CNT =0;
 8002e3e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002e42:	f36f 0300 	bfc	r3, #0, #1
 8002e46:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
									break;
 8002e4a:	e7cf      	b.n	8002dec <vCanTask+0x1dc>
									IN_CAN.valid_timer =0;
 8002e4c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002e50:	f36f 03c3 	bfc	r3, #3, #1
 8002e54:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
									break;
 8002e58:	e7c8      	b.n	8002dec <vCanTask+0x1dc>
									IN_CAN.valid_valve =0;
 8002e5a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002e5e:	f36f 0382 	bfc	r3, #2, #1
 8002e62:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
									break;
 8002e66:	e7c1      	b.n	8002dec <vCanTask+0x1dc>
									IN_CAN.valid_master_disp =0;
 8002e68:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002e6c:	f36f 1345 	bfc	r3, #5, #1
 8002e70:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
									break;
 8002e74:	e7ba      	b.n	8002dec <vCanTask+0x1dc>
 8002e76:	bf00      	nop
 8002e78:	2000412c 	.word	0x2000412c
 8002e7c:	20004128 	.word	0x20004128
 8002e80:	0800327d 	.word	0x0800327d
 8002e84:	08006f14 	.word	0x08006f14
 8002e88:	20003b7c 	.word	0x20003b7c
 8002e8c:	200042f0 	.word	0x200042f0
 8002e90:	2000419c 	.word	0x2000419c
 8002e94:	20004030 	.word	0x20004030
					xQueueSend(Data_IN_queue,&IN_CAN,0);//Send data to main logic task
 8002e98:	2300      	movs	r3, #0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	a903      	add	r1, sp, #12
 8002e9e:	48a3      	ldr	r0, [pc, #652]	; (800312c <vCanTask+0x51c>)
 8002ea0:	6800      	ldr	r0, [r0, #0]
 8002ea2:	f7fe f9cf 	bl	8001244 <xQueueGenericSend>
				if (can_rx_PGN == CAN_SET_HEDLINE_PGN)
 8002ea6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002ea8:	4ba1      	ldr	r3, [pc, #644]	; (8003130 <vCanTask+0x520>)
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	f000 8087 	beq.w	8002fbe <vCanTask+0x3ae>
					if (can_rx_PGN == CAN_SET_PGN)
 8002eb0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002eb2:	4ba0      	ldr	r3, [pc, #640]	; (8003134 <vCanTask+0x524>)
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	f000 80a8 	beq.w	800300a <vCanTask+0x3fa>
				if (CAN_set_msg.status == 1 && xTaskGetTickCount() > CAN_set_msg.startTick + CAN_SET_TIMEOUT) CAN_set_RX_Init(&CAN_set_msg);
 8002eba:	4b9f      	ldr	r3, [pc, #636]	; (8003138 <vCanTask+0x528>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	f000 810f 	beq.w	80030e2 <vCanTask+0x4d2>
			if (xQueueReceive(CanRxQueue, &RxMessage, 10000) == pdPASS)
 8002ec4:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ec8:	499c      	ldr	r1, [pc, #624]	; (800313c <vCanTask+0x52c>)
 8002eca:	4b9d      	ldr	r3, [pc, #628]	; (8003140 <vCanTask+0x530>)
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	f7fe fa7d 	bl	80013cc <xQueueReceive>
 8002ed2:	2801      	cmp	r0, #1
 8002ed4:	f040 8113 	bne.w	80030fe <vCanTask+0x4ee>
				can_rx_addr = (RxMessage.ExtId & 0xFF);
 8002ed8:	4b98      	ldr	r3, [pc, #608]	; (800313c <vCanTask+0x52c>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
				can_rx_PGN = RxMessage.ExtId >> 8;
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	9310      	str	r3, [sp, #64]	; 0x40
				Err_CAN_count =0 ;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	930f      	str	r3, [sp, #60]	; 0x3c
				if (can_rx_addr == settings.Ain.addr
 8002eea:	4b96      	ldr	r3, [pc, #600]	; (8003144 <vCanTask+0x534>)
 8002eec:	7eda      	ldrb	r2, [r3, #27]
 8002eee:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d025      	beq.n	8002f44 <vCanTask+0x334>
						|| can_rx_addr == settings.CNT.addr
 8002ef8:	4b92      	ldr	r3, [pc, #584]	; (8003144 <vCanTask+0x534>)
 8002efa:	78da      	ldrb	r2, [r3, #3]
 8002efc:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d01e      	beq.n	8002f44 <vCanTask+0x334>
						|| can_rx_addr == settings.Time.addr
 8002f06:	4b8f      	ldr	r3, [pc, #572]	; (8003144 <vCanTask+0x534>)
 8002f08:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002f0c:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d016      	beq.n	8002f44 <vCanTask+0x334>
						|| can_rx_addr == settings.valve.addr
 8002f16:	4b8b      	ldr	r3, [pc, #556]	; (8003144 <vCanTask+0x534>)
 8002f18:	7bda      	ldrb	r2, [r3, #15]
 8002f1a:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d00f      	beq.n	8002f44 <vCanTask+0x334>
						|| can_rx_addr == settings.CADR.addr
 8002f24:	4b87      	ldr	r3, [pc, #540]	; (8003144 <vCanTask+0x534>)
 8002f26:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8002f2a:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d007      	beq.n	8002f44 <vCanTask+0x334>
						|| can_rx_addr == settings.MASTER_Dispay.addr)
 8002f34:	4b83      	ldr	r3, [pc, #524]	; (8003144 <vCanTask+0x534>)
 8002f36:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002f3a:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d1b0      	bne.n	8002ea6 <vCanTask+0x296>
					LED_Port->BRR = LED_Pin;
 8002f44:	4b80      	ldr	r3, [pc, #512]	; (8003148 <vCanTask+0x538>)
 8002f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f4a:	615a      	str	r2, [r3, #20]
					tick = xTaskGetTickCount();
 8002f4c:	f7fe fd4e 	bl	80019ec <xTaskGetTickCount>
 8002f50:	900e      	str	r0, [sp, #56]	; 0x38
					tick /=100;
 8002f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f54:	4a7d      	ldr	r2, [pc, #500]	; (800314c <vCanTask+0x53c>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	930e      	str	r3, [sp, #56]	; 0x38
					CAN_SENS_RX_Timeout[0] = tick; //Current tick to index 0
 8002f5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002f60:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <vCanTask+0x540>)
 8002f62:	6019      	str	r1, [r3, #0]
					if (can_rx_PGN == settings.Ain.pgn && can_rx_addr == settings.Ain.addr)
 8002f64:	4b77      	ldr	r3, [pc, #476]	; (8003144 <vCanTask+0x534>)
 8002f66:	f8d3 201f 	ldr.w	r2, [r3, #31]
 8002f6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	f43f ae7d 	beq.w	8002c6c <vCanTask+0x5c>
					if (can_rx_PGN == settings.CNT.pgn && can_rx_addr == settings.CNT.addr)
 8002f72:	4b74      	ldr	r3, [pc, #464]	; (8003144 <vCanTask+0x534>)
 8002f74:	f8d3 2007 	ldr.w	r2, [r3, #7]
 8002f78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	f43f ae98 	beq.w	8002cb0 <vCanTask+0xa0>
						if (can_rx_PGN == settings.Time.pgn && can_rx_addr == settings.Time.addr)
 8002f80:	4b70      	ldr	r3, [pc, #448]	; (8003144 <vCanTask+0x534>)
 8002f82:	f8d3 202b 	ldr.w	r2, [r3, #43]	; 0x2b
 8002f86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	f43f aeaf 	beq.w	8002cec <vCanTask+0xdc>
					if (can_rx_PGN == settings.valve.pgn && can_rx_addr == settings.valve.addr)
 8002f8e:	4b6d      	ldr	r3, [pc, #436]	; (8003144 <vCanTask+0x534>)
 8002f90:	f8d3 2013 	ldr.w	r2, [r3, #19]
 8002f94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f96:	429a      	cmp	r2, r3
 8002f98:	f43f aec7 	beq.w	8002d2a <vCanTask+0x11a>
					if (can_rx_PGN == settings.CADR.pgn && can_rx_addr == settings.CADR.addr)
 8002f9c:	4b69      	ldr	r3, [pc, #420]	; (8003144 <vCanTask+0x534>)
 8002f9e:	f8d3 2037 	ldr.w	r2, [r3, #55]	; 0x37
 8002fa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	f43f aee6 	beq.w	8002d76 <vCanTask+0x166>
					if (can_rx_PGN == settings.MASTER_Dispay.pgn && can_rx_addr == settings.MASTER_Dispay.addr)
 8002faa:	4b66      	ldr	r3, [pc, #408]	; (8003144 <vCanTask+0x534>)
 8002fac:	f8d3 2043 	ldr.w	r2, [r3, #67]	; 0x43
 8002fb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	f43f aef9 	beq.w	8002daa <vCanTask+0x19a>
					for (i=0;i<(CAN_SENSORS);i++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	930d      	str	r3, [sp, #52]	; 0x34
 8002fbc:	e719      	b.n	8002df2 <vCanTask+0x1e2>
					if (CAN_set_msg.status ==0)	//idle state?
 8002fbe:	4b5e      	ldr	r3, [pc, #376]	; (8003138 <vCanTask+0x528>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f47f af79 	bne.w	8002eba <vCanTask+0x2aa>
						if (RxMessage.Data[0]==0x20
 8002fc8:	4b5c      	ldr	r3, [pc, #368]	; (800313c <vCanTask+0x52c>)
 8002fca:	7adb      	ldrb	r3, [r3, #11]
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	f47f af74 	bne.w	8002eba <vCanTask+0x2aa>
								&& RxMessage.Data[5]== settings.MY_ADDR
 8002fd2:	4b5a      	ldr	r3, [pc, #360]	; (800313c <vCanTask+0x52c>)
 8002fd4:	7c1a      	ldrb	r2, [r3, #16]
 8002fd6:	4b5b      	ldr	r3, [pc, #364]	; (8003144 <vCanTask+0x534>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	f47f af6d 	bne.w	8002eba <vCanTask+0x2aa>
								&& RxMessage.Data[7] == 0xA8
 8002fe0:	4b56      	ldr	r3, [pc, #344]	; (800313c <vCanTask+0x52c>)
 8002fe2:	7c9b      	ldrb	r3, [r3, #18]
 8002fe4:	2ba8      	cmp	r3, #168	; 0xa8
 8002fe6:	f47f af68 	bne.w	8002eba <vCanTask+0x2aa>
							CAN_set_msg.status = 1;
 8002fea:	4c53      	ldr	r4, [pc, #332]	; (8003138 <vCanTask+0x528>)
 8002fec:	2301      	movs	r3, #1
 8002fee:	7023      	strb	r3, [r4, #0]
							CAN_set_msg.ID = can_rx_addr;
 8002ff0:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8002ff4:	7123      	strb	r3, [r4, #4]
							CAN_set_msg.char_len = RxMessage.Data[1] | (RxMessage.Data[2]<<8);
 8002ff6:	4b51      	ldr	r3, [pc, #324]	; (800313c <vCanTask+0x52c>)
 8002ff8:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8002ffc:	70e2      	strb	r2, [r4, #3]
							CAN_set_msg.msg_len = RxMessage.Data[3]; //
 8002ffe:	7b9b      	ldrb	r3, [r3, #14]
 8003000:	70a3      	strb	r3, [r4, #2]
							CAN_set_msg.startTick = xTaskGetTickCount();
 8003002:	f7fe fcf3 	bl	80019ec <xTaskGetTickCount>
 8003006:	60e0      	str	r0, [r4, #12]
 8003008:	e757      	b.n	8002eba <vCanTask+0x2aa>
						if (can_rx_addr == CAN_set_msg.ID)
 800300a:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <vCanTask+0x528>)
 800300c:	791a      	ldrb	r2, [r3, #4]
 800300e:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8003012:	b2db      	uxtb	r3, r3
 8003014:	429a      	cmp	r2, r3
 8003016:	f47f af50 	bne.w	8002eba <vCanTask+0x2aa>
							if (RxMessage.Data[0]== 1+CAN_set_msg.msg_index++)
 800301a:	4b48      	ldr	r3, [pc, #288]	; (800313c <vCanTask+0x52c>)
 800301c:	7ad9      	ldrb	r1, [r3, #11]
 800301e:	4a46      	ldr	r2, [pc, #280]	; (8003138 <vCanTask+0x528>)
 8003020:	7853      	ldrb	r3, [r2, #1]
 8003022:	3301      	adds	r3, #1
 8003024:	7053      	strb	r3, [r2, #1]
 8003026:	4299      	cmp	r1, r3
 8003028:	d145      	bne.n	80030b6 <vCanTask+0x4a6>
								for (i=1;i<8;i++) if (RxMessage.Data[i] >= 0x02 && RxMessage.Data[i] <= 0x7F)
 800302a:	2301      	movs	r3, #1
 800302c:	930d      	str	r3, [sp, #52]	; 0x34
 800302e:	e006      	b.n	800303e <vCanTask+0x42e>
									CAN_set_msg.char_index++;
 8003030:	4a41      	ldr	r2, [pc, #260]	; (8003138 <vCanTask+0x528>)
 8003032:	88d3      	ldrh	r3, [r2, #6]
 8003034:	3301      	adds	r3, #1
 8003036:	80d3      	strh	r3, [r2, #6]
								for (i=1;i<8;i++) if (RxMessage.Data[i] >= 0x02 && RxMessage.Data[i] <= 0x7F)
 8003038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800303a:	3301      	adds	r3, #1
 800303c:	930d      	str	r3, [sp, #52]	; 0x34
 800303e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003040:	2b07      	cmp	r3, #7
 8003042:	d819      	bhi.n	8003078 <vCanTask+0x468>
 8003044:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <vCanTask+0x52c>)
 8003048:	4413      	add	r3, r2
 800304a:	7adb      	ldrb	r3, [r3, #11]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d9f3      	bls.n	8003038 <vCanTask+0x428>
 8003050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003052:	4b3a      	ldr	r3, [pc, #232]	; (800313c <vCanTask+0x52c>)
 8003054:	4413      	add	r3, r2
 8003056:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800305a:	2b00      	cmp	r3, #0
 800305c:	dbec      	blt.n	8003038 <vCanTask+0x428>
									if (CAN_set_msg.char_index < CAN_SET_BUF_SIZE)
 800305e:	4b36      	ldr	r3, [pc, #216]	; (8003138 <vCanTask+0x528>)
 8003060:	88db      	ldrh	r3, [r3, #6]
 8003062:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003066:	d2e3      	bcs.n	8003030 <vCanTask+0x420>
									*(CAN_set_msg.ptr+CAN_set_msg.char_index) = RxMessage.Data[i];
 8003068:	980d      	ldr	r0, [sp, #52]	; 0x34
 800306a:	4a33      	ldr	r2, [pc, #204]	; (8003138 <vCanTask+0x528>)
 800306c:	6891      	ldr	r1, [r2, #8]
 800306e:	4a33      	ldr	r2, [pc, #204]	; (800313c <vCanTask+0x52c>)
 8003070:	4402      	add	r2, r0
 8003072:	7ad2      	ldrb	r2, [r2, #11]
 8003074:	54ca      	strb	r2, [r1, r3]
 8003076:	e7db      	b.n	8003030 <vCanTask+0x420>
								if (CAN_set_msg.status != 2
 8003078:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <vCanTask+0x528>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b02      	cmp	r3, #2
 800307e:	f43f af1c 	beq.w	8002eba <vCanTask+0x2aa>
										&& CAN_set_msg.char_len <= CAN_set_msg.char_index)
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <vCanTask+0x528>)
 8003084:	78da      	ldrb	r2, [r3, #3]
 8003086:	88db      	ldrh	r3, [r3, #6]
 8003088:	429a      	cmp	r2, r3
 800308a:	f63f af16 	bhi.w	8002eba <vCanTask+0x2aa>
									CAN_set_msg.status = 2;
 800308e:	4c2a      	ldr	r4, [pc, #168]	; (8003138 <vCanTask+0x528>)
 8003090:	2302      	movs	r3, #2
 8003092:	7023      	strb	r3, [r4, #0]
									*CAN_set_TX_buffer =0;
 8003094:	4d2f      	ldr	r5, [pc, #188]	; (8003154 <vCanTask+0x544>)
 8003096:	2300      	movs	r3, #0
 8003098:	702b      	strb	r3, [r5, #0]
									CMD_Parsing(CAN_set_msg.ptr,CAN_set_TX_buffer,CAN_set_msg.ID);
 800309a:	7922      	ldrb	r2, [r4, #4]
 800309c:	4629      	mov	r1, r5
 800309e:	68a0      	ldr	r0, [r4, #8]
 80030a0:	f000 fc6e 	bl	8003980 <CMD_Parsing>
									CAN_set_answer_Init(&CAN_set_msg,&CAN_set_answer,(u8*)CAN_set_TX_buffer);
 80030a4:	462a      	mov	r2, r5
 80030a6:	492c      	ldr	r1, [pc, #176]	; (8003158 <vCanTask+0x548>)
 80030a8:	4620      	mov	r0, r4
 80030aa:	f7ff fd85 	bl	8002bb8 <CAN_set_answer_Init>
									CAN_set_RX_Init(&CAN_set_msg);
 80030ae:	4620      	mov	r0, r4
 80030b0:	f7ff fd6e 	bl	8002b90 <CAN_set_RX_Init>
									break;
 80030b4:	e002      	b.n	80030bc <vCanTask+0x4ac>
								CAN_set_RX_Init(&CAN_set_msg);
 80030b6:	4820      	ldr	r0, [pc, #128]	; (8003138 <vCanTask+0x528>)
 80030b8:	f7ff fd6a 	bl	8002b90 <CAN_set_RX_Init>
		CanInit(CAN_SPEED_250);
 80030bc:	2002      	movs	r0, #2
 80030be:	f7ff fce9 	bl	8002a94 <CanInit>
		vTaskDelay(50);
 80030c2:	2032      	movs	r0, #50	; 0x32
 80030c4:	f7fe fd8a 	bl	8001bdc <vTaskDelay>
		xTimerStart(CanTxTimer,5);
 80030c8:	4b24      	ldr	r3, [pc, #144]	; (800315c <vCanTask+0x54c>)
 80030ca:	681c      	ldr	r4, [r3, #0]
 80030cc:	f7fe fc8e 	bl	80019ec <xTaskGetTickCount>
 80030d0:	2305      	movs	r3, #5
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	2300      	movs	r3, #0
 80030d6:	4602      	mov	r2, r0
 80030d8:	2101      	movs	r1, #1
 80030da:	4620      	mov	r0, r4
 80030dc:	f7fe ff32 	bl	8001f44 <xTimerGenericCommand>
 80030e0:	e6f0      	b.n	8002ec4 <vCanTask+0x2b4>
				if (CAN_set_msg.status == 1 && xTaskGetTickCount() > CAN_set_msg.startTick + CAN_SET_TIMEOUT) CAN_set_RX_Init(&CAN_set_msg);
 80030e2:	f7fe fc83 	bl	80019ec <xTaskGetTickCount>
 80030e6:	4b14      	ldr	r3, [pc, #80]	; (8003138 <vCanTask+0x528>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80030ee:	3308      	adds	r3, #8
 80030f0:	4298      	cmp	r0, r3
 80030f2:	f67f aee7 	bls.w	8002ec4 <vCanTask+0x2b4>
 80030f6:	4810      	ldr	r0, [pc, #64]	; (8003138 <vCanTask+0x528>)
 80030f8:	f7ff fd4a 	bl	8002b90 <CAN_set_RX_Init>
 80030fc:	e6e2      	b.n	8002ec4 <vCanTask+0x2b4>
				if (Err_CAN_count++ > 20) goto CAN_restart;
 80030fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	920f      	str	r2, [sp, #60]	; 0x3c
 8003104:	2b14      	cmp	r3, #20
 8003106:	f67f aedd 	bls.w	8002ec4 <vCanTask+0x2b4>
	Err_CAN_count = 0;
 800310a:	2400      	movs	r4, #0
 800310c:	940f      	str	r4, [sp, #60]	; 0x3c
	CAN_set_Deinit(&CAN_set_msg);
 800310e:	4d0a      	ldr	r5, [pc, #40]	; (8003138 <vCanTask+0x528>)
 8003110:	4628      	mov	r0, r5
 8003112:	f7ff fd33 	bl	8002b7c <CAN_set_Deinit>
	CAN_set_RX_Init(&CAN_set_msg);
 8003116:	4628      	mov	r0, r5
 8003118:	f7ff fd3a 	bl	8002b90 <CAN_set_RX_Init>
	memset(&IN_CAN,0,sizeof(IN_CAN));
 800311c:	2228      	movs	r2, #40	; 0x28
 800311e:	4621      	mov	r1, r4
 8003120:	a803      	add	r0, sp, #12
 8003122:	f001 fd9b 	bl	8004c5c <memset>
 8003126:	e7c9      	b.n	80030bc <vCanTask+0x4ac>
}
 8003128:	b013      	add	sp, #76	; 0x4c
 800312a:	bd30      	pop	{r4, r5, pc}
 800312c:	20003b44 	.word	0x20003b44
 8003130:	0018ec00 	.word	0x0018ec00
 8003134:	0018eb00 	.word	0x0018eb00
 8003138:	20004130 	.word	0x20004130
 800313c:	2000419c 	.word	0x2000419c
 8003140:	2000412c 	.word	0x2000412c
 8003144:	200042f0 	.word	0x200042f0
 8003148:	40011000 	.word	0x40011000
 800314c:	51eb851f 	.word	0x51eb851f
 8003150:	20004030 	.word	0x20004030
 8003154:	20003dd8 	.word	0x20003dd8
 8003158:	20004140 	.word	0x20004140
 800315c:	20003b7c 	.word	0x20003b7c

08003160 <PrepareData>:




uint8_t PrepareData(uint8_t num,uint8_t * dt)
{
 8003160:	b530      	push	{r4, r5, lr}
 8003162:	b083      	sub	sp, #12
 8003164:	460d      	mov	r5, r1
	uint32_t xx;
	uint8_t *ptr;
	switch (num)
 8003166:	2806      	cmp	r0, #6
 8003168:	d85a      	bhi.n	8003220 <PrepareData+0xc0>
 800316a:	e8df f000 	tbb	[pc, r0]
 800316e:	1804      	.short	0x1804
 8003170:	33592a22 	.word	0x33592a22
 8003174:	44          	.byte	0x44
 8003175:	00          	.byte	0x00
	{
	case CAN_MSG_COUNTER_ON_Display:	//message 1
		if (settings.mode ==0)
 8003176:	4b2d      	ldr	r3, [pc, #180]	; (800322c <PrepareData+0xcc>)
 8003178:	f893 4073 	ldrb.w	r4, [r3, #115]	; 0x73
 800317c:	b10c      	cbz	r4, 8003182 <PrepareData+0x22>
		else
		dt[0] = 1;

		return 0;
		}
		else return 1;
 800317e:	2401      	movs	r4, #1
 8003180:	e01c      	b.n	80031bc <PrepareData+0x5c>
		if (pdPASS == xQueueReceive(Data_out_cnt,&xx,0))
 8003182:	2200      	movs	r2, #0
 8003184:	a901      	add	r1, sp, #4
 8003186:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <PrepareData+0xd0>)
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	f7fe f91f 	bl	80013cc <xQueueReceive>
 800318e:	2801      	cmp	r0, #1
 8003190:	d002      	beq.n	8003198 <PrepareData+0x38>
		dt[0] = 1;
 8003192:	2301      	movs	r3, #1
 8003194:	702b      	strb	r3, [r5, #0]
 8003196:	e011      	b.n	80031bc <PrepareData+0x5c>
			memcpy(dt,ptr,4);
 8003198:	9b01      	ldr	r3, [sp, #4]
 800319a:	602b      	str	r3, [r5, #0]
 800319c:	e00e      	b.n	80031bc <PrepareData+0x5c>
		break;
	case CAN_MSG_STATISTIC:
		if (settings.mode ==0 )
 800319e:	4b23      	ldr	r3, [pc, #140]	; (800322c <PrepareData+0xcc>)
 80031a0:	f893 4073 	ldrb.w	r4, [r3, #115]	; 0x73
 80031a4:	2c00      	cmp	r4, #0
 80031a6:	d13d      	bne.n	8003224 <PrepareData+0xc4>
			{
				dt[0] = data.state;
 80031a8:	4b22      	ldr	r3, [pc, #136]	; (8003234 <PrepareData+0xd4>)
 80031aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031ae:	700b      	strb	r3, [r1, #0]
				return 0;
 80031b0:	e004      	b.n	80031bc <PrepareData+0x5c>
			}
		return 1;
		break;

	case CAN_MSG_HW:
		memcpy(dt,"LD01"CONNECT_VER,8);
 80031b2:	4b21      	ldr	r3, [pc, #132]	; (8003238 <PrepareData+0xd8>)
 80031b4:	cb03      	ldmia	r3!, {r0, r1}
 80031b6:	6028      	str	r0, [r5, #0]
 80031b8:	6069      	str	r1, [r5, #4]
		return 0;
 80031ba:	2400      	movs	r4, #0
	default:
		return 1;
		break;
	}
	return 1;
}
 80031bc:	4620      	mov	r0, r4
 80031be:	b003      	add	sp, #12
 80031c0:	bd30      	pop	{r4, r5, pc}
		xx = xTaskGetTickCount()/1000;
 80031c2:	f7fe fc13 	bl	80019ec <xTaskGetTickCount>
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <PrepareData+0xdc>)
 80031c8:	fba3 3000 	umull	r3, r0, r3, r0
 80031cc:	0980      	lsrs	r0, r0, #6
		memcpy(dt,ptr,4);
 80031ce:	6028      	str	r0, [r5, #0]
		return 0;
 80031d0:	2400      	movs	r4, #0
 80031d2:	e7f3      	b.n	80031bc <PrepareData+0x5c>
		if (pdPASS == xQueueReceive(Data_out_G_cnt,&xx,0)
 80031d4:	2200      	movs	r2, #0
 80031d6:	a901      	add	r1, sp, #4
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <PrepareData+0xe0>)
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	f7fe f8f6 	bl	80013cc <xQueueReceive>
 80031e0:	2801      	cmp	r0, #1
 80031e2:	d001      	beq.n	80031e8 <PrepareData+0x88>
		return 1;
 80031e4:	2401      	movs	r4, #1
 80031e6:	e7e9      	b.n	80031bc <PrepareData+0x5c>
				&& settings.mode == 0)
 80031e8:	4b10      	ldr	r3, [pc, #64]	; (800322c <PrepareData+0xcc>)
 80031ea:	f893 4073 	ldrb.w	r4, [r3, #115]	; 0x73
 80031ee:	b9dc      	cbnz	r4, 8003228 <PrepareData+0xc8>
			memcpy(dt,ptr,4);
 80031f0:	9b01      	ldr	r3, [sp, #4]
 80031f2:	602b      	str	r3, [r5, #0]
			return 0;
 80031f4:	e7e2      	b.n	80031bc <PrepareData+0x5c>
			if (pdPASS == xQueueReceive(Data_out_display,&xx,0)
 80031f6:	2200      	movs	r2, #0
 80031f8:	a901      	add	r1, sp, #4
 80031fa:	4b12      	ldr	r3, [pc, #72]	; (8003244 <PrepareData+0xe4>)
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	f7fe f8e5 	bl	80013cc <xQueueReceive>
 8003202:	2801      	cmp	r0, #1
 8003204:	d001      	beq.n	800320a <PrepareData+0xaa>
			return 1;
 8003206:	2401      	movs	r4, #1
 8003208:	e7d8      	b.n	80031bc <PrepareData+0x5c>
					&& settings.mode ==0)
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <PrepareData+0xcc>)
 800320c:	f893 4073 	ldrb.w	r4, [r3, #115]	; 0x73
 8003210:	b10c      	cbz	r4, 8003216 <PrepareData+0xb6>
			return 1;
 8003212:	2401      	movs	r4, #1
 8003214:	e7d2      	b.n	80031bc <PrepareData+0x5c>
				memcpy(dt,ptr,8);
 8003216:	ab01      	add	r3, sp, #4
 8003218:	cb03      	ldmia	r3!, {r0, r1}
 800321a:	6028      	str	r0, [r5, #0]
 800321c:	6069      	str	r1, [r5, #4]
				return 0;
 800321e:	e7cd      	b.n	80031bc <PrepareData+0x5c>
		return 1;
 8003220:	2401      	movs	r4, #1
 8003222:	e7cb      	b.n	80031bc <PrepareData+0x5c>
		return 1;
 8003224:	4604      	mov	r4, r0
 8003226:	e7c9      	b.n	80031bc <PrepareData+0x5c>
		return 1;
 8003228:	2401      	movs	r4, #1
 800322a:	e7c7      	b.n	80031bc <PrepareData+0x5c>
 800322c:	200042f0 	.word	0x200042f0
 8003230:	20003b4c 	.word	0x20003b4c
 8003234:	20004390 	.word	0x20004390
 8003238:	08006f08 	.word	0x08006f08
 800323c:	10624dd3 	.word	0x10624dd3
 8003240:	20003b48 	.word	0x20003b48
 8003244:	20003b50 	.word	0x20003b50

08003248 <CAN_send_msg>:
 *
 */


u8 CAN_send_msg(u8 num)
{
 8003248:	b510      	push	{r4, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	4604      	mov	r4, r0
	uint8_t data[8];
	uint8_t result;
	memset(&data,0,sizeof(data));
 800324e:	2300      	movs	r3, #0
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	9301      	str	r3, [sp, #4]
	result = PrepareData(num,(uint8_t*)&data);
 8003254:	4669      	mov	r1, sp
 8003256:	f7ff ff83 	bl	8003160 <PrepareData>
	if (result == 0) Send_S6(CAN_msg_map[num].PGN,(u8*) &data);
 800325a:	b110      	cbz	r0, 8003262 <CAN_send_msg+0x1a>

	return 0;
}
 800325c:	2000      	movs	r0, #0
 800325e:	b002      	add	sp, #8
 8003260:	bd10      	pop	{r4, pc}
	if (result == 0) Send_S6(CAN_msg_map[num].PGN,(u8*) &data);
 8003262:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003266:	00a2      	lsls	r2, r4, #2
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <CAN_send_msg+0x30>)
 800326a:	4413      	add	r3, r2
 800326c:	4669      	mov	r1, sp
 800326e:	6858      	ldr	r0, [r3, #4]
 8003270:	f7ff fc70 	bl	8002b54 <Send_S6>
 8003274:	e7f2      	b.n	800325c <CAN_send_msg+0x14>
 8003276:	bf00      	nop
 8003278:	08006eb4 	.word	0x08006eb4

0800327c <CAN_send_Timer>:

/***********************************************************
 * 	RTOS program timer called once in 10ms
 ************************************************************/
void CAN_send_Timer(xTimerHandle xTimer) {
 800327c:	b530      	push	{r4, r5, lr}
 800327e:	b083      	sub	sp, #12
//				}
//			};
//		}


	if (dec++>=10)
 8003280:	4a49      	ldr	r2, [pc, #292]	; (80033a8 <CAN_send_Timer+0x12c>)
 8003282:	7813      	ldrb	r3, [r2, #0]
 8003284:	1c59      	adds	r1, r3, #1
 8003286:	7011      	strb	r1, [r2, #0]
 8003288:	2b09      	cmp	r3, #9
 800328a:	d92d      	bls.n	80032e8 <CAN_send_Timer+0x6c>
	{
		dec =0;
 800328c:	2400      	movs	r4, #0
 800328e:	7014      	strb	r4, [r2, #0]

	for (i = 0; i < CAN_MSG_NUMBER; i++)
 8003290:	e008      	b.n	80032a4 <CAN_send_Timer+0x28>

		if (CAN_TX.CAN[i].timeout > 0)
			CAN_TX.CAN[i].timeout--;
		else {
			//TX
			if (CAN_msg_map[i].enable ==1 && CAN_TX.CAN[i].timeout == 0) {
 8003292:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003296:	0093      	lsls	r3, r2, #2
 8003298:	4a44      	ldr	r2, [pc, #272]	; (80033ac <CAN_send_Timer+0x130>)
 800329a:	5cd3      	ldrb	r3, [r2, r3]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d00d      	beq.n	80032bc <CAN_send_Timer+0x40>
	for (i = 0; i < CAN_MSG_NUMBER; i++)
 80032a0:	3401      	adds	r4, #1
 80032a2:	b2e4      	uxtb	r4, r4
 80032a4:	2c06      	cmp	r4, #6
 80032a6:	d81f      	bhi.n	80032e8 <CAN_send_Timer+0x6c>
		if (CAN_TX.CAN[i].timeout > 0)
 80032a8:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <CAN_send_Timer+0x134>)
 80032aa:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0ef      	beq.n	8003292 <CAN_send_Timer+0x16>
			CAN_TX.CAN[i].timeout--;
 80032b2:	3b01      	subs	r3, #1
 80032b4:	4a3e      	ldr	r2, [pc, #248]	; (80033b0 <CAN_send_Timer+0x134>)
 80032b6:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
 80032ba:	e7f1      	b.n	80032a0 <CAN_send_Timer+0x24>
				if ( CAN_send_msg(i) == 0)	//send message to CAN bus
 80032bc:	4620      	mov	r0, r4
 80032be:	f7ff ffc3 	bl	8003248 <CAN_send_msg>
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d1ec      	bne.n	80032a0 <CAN_send_Timer+0x24>
						{
					if (CAN_msg_map[i].timeout < 2)
 80032c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80032ca:	009a      	lsls	r2, r3, #2
 80032cc:	4b37      	ldr	r3, [pc, #220]	; (80033ac <CAN_send_Timer+0x130>)
 80032ce:	4413      	add	r3, r2
 80032d0:	891b      	ldrh	r3, [r3, #8]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d903      	bls.n	80032de <CAN_send_Timer+0x62>
						CAN_TX.CAN[i].timeout = 10;
					else
						CAN_TX.CAN[i].timeout = CAN_msg_map[i].timeout;	// Update timeout variable if TX is OK
 80032d6:	4a36      	ldr	r2, [pc, #216]	; (80033b0 <CAN_send_Timer+0x134>)
 80032d8:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
 80032dc:	e7e0      	b.n	80032a0 <CAN_send_Timer+0x24>
						CAN_TX.CAN[i].timeout = 10;
 80032de:	4b34      	ldr	r3, [pc, #208]	; (80033b0 <CAN_send_Timer+0x134>)
 80032e0:	220a      	movs	r2, #10
 80032e2:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
 80032e6:	e7db      	b.n	80032a0 <CAN_send_Timer+0x24>

	}

	//Transmit set message data to CAN

	if (CAN_set_answer.status == 1) {
 80032e8:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <CAN_send_Timer+0x138>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d003      	beq.n	80032f8 <CAN_send_Timer+0x7c>
		buf[5] = CAN_set_answer.ID;
		buf[6] = 0x00;
		buf[7] = 0xA8;
		Send_S6(CAN_SET_HEDLINE_PGN,&buf[0]);

	} else if (CAN_set_answer.status == 2) {
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d023      	beq.n	800333c <CAN_send_Timer+0xc0>
	} else {
		//all data are send
		CAN_set_answer.status = 3;
	}
}
}
 80032f4:	b003      	add	sp, #12
 80032f6:	bd30      	pop	{r4, r5, pc}
		CAN_set_answer.char_index =0;
 80032f8:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <CAN_send_Timer+0x138>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	80da      	strh	r2, [r3, #6]
		CAN_set_answer.msg_index =1;
 80032fe:	2101      	movs	r1, #1
 8003300:	7059      	strb	r1, [r3, #1]
		CAN_set_answer.status = 2;	//send packet
 8003302:	2102      	movs	r1, #2
 8003304:	7019      	strb	r1, [r3, #0]
		buf[0] = 0x20;
 8003306:	2120      	movs	r1, #32
 8003308:	f88d 1000 	strb.w	r1, [sp]
		buf[1] = CAN_set_answer.char_len & 0xFF;
 800330c:	78d9      	ldrb	r1, [r3, #3]
 800330e:	f88d 1001 	strb.w	r1, [sp, #1]
		buf[2] = ((CAN_set_answer.char_len>>8 )& 0xFF);
 8003312:	f88d 2002 	strb.w	r2, [sp, #2]
		buf[3] = CAN_set_answer.msg_len;
 8003316:	7899      	ldrb	r1, [r3, #2]
 8003318:	f88d 1003 	strb.w	r1, [sp, #3]
		buf[4] = 0xFF;
 800331c:	21ff      	movs	r1, #255	; 0xff
 800331e:	f88d 1004 	strb.w	r1, [sp, #4]
		buf[5] = CAN_set_answer.ID;
 8003322:	791b      	ldrb	r3, [r3, #4]
 8003324:	f88d 3005 	strb.w	r3, [sp, #5]
		buf[6] = 0x00;
 8003328:	f88d 2006 	strb.w	r2, [sp, #6]
		buf[7] = 0xA8;
 800332c:	23a8      	movs	r3, #168	; 0xa8
 800332e:	f88d 3007 	strb.w	r3, [sp, #7]
		Send_S6(CAN_SET_HEDLINE_PGN,&buf[0]);
 8003332:	4669      	mov	r1, sp
 8003334:	4820      	ldr	r0, [pc, #128]	; (80033b8 <CAN_send_Timer+0x13c>)
 8003336:	f7ff fc0d 	bl	8002b54 <Send_S6>
 800333a:	e7db      	b.n	80032f4 <CAN_send_Timer+0x78>
		if (CAN_set_answer.msg_index <= CAN_set_answer.msg_len) {
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <CAN_send_Timer+0x138>)
 800333e:	785a      	ldrb	r2, [r3, #1]
 8003340:	789b      	ldrb	r3, [r3, #2]
 8003342:	429a      	cmp	r2, r3
 8003344:	d82c      	bhi.n	80033a0 <CAN_send_Timer+0x124>
			buf[0] = CAN_set_answer.msg_index++;
 8003346:	1c51      	adds	r1, r2, #1
 8003348:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <CAN_send_Timer+0x138>)
 800334a:	7059      	strb	r1, [r3, #1]
 800334c:	f88d 2000 	strb.w	r2, [sp]
		for (i=1;i<8;i++)
 8003350:	2301      	movs	r3, #1
 8003352:	e009      	b.n	8003368 <CAN_send_Timer+0xec>
					buf[i] = 0xFF;
 8003354:	20ff      	movs	r0, #255	; 0xff
 8003356:	aa02      	add	r2, sp, #8
 8003358:	441a      	add	r2, r3
 800335a:	f802 0c08 	strb.w	r0, [r2, #-8]
					CAN_set_answer.char_index++;
 800335e:	3101      	adds	r1, #1
 8003360:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <CAN_send_Timer+0x138>)
 8003362:	80d1      	strh	r1, [r2, #6]
		for (i=1;i<8;i++)
 8003364:	3301      	adds	r3, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b07      	cmp	r3, #7
 800336a:	d814      	bhi.n	8003396 <CAN_send_Timer+0x11a>
			if (*(CAN_set_answer.ptr + CAN_set_answer.char_index) >= 0x0A
 800336c:	4a11      	ldr	r2, [pc, #68]	; (80033b4 <CAN_send_Timer+0x138>)
 800336e:	6890      	ldr	r0, [r2, #8]
 8003370:	88d1      	ldrh	r1, [r2, #6]
 8003372:	5c42      	ldrb	r2, [r0, r1]
					&& *(CAN_set_answer.ptr + CAN_set_answer.char_index) < 0x7F
 8003374:	3a0a      	subs	r2, #10
 8003376:	b2d2      	uxtb	r2, r2
			if (*(CAN_set_answer.ptr + CAN_set_answer.char_index) >= 0x0A
 8003378:	2a74      	cmp	r2, #116	; 0x74
 800337a:	d8eb      	bhi.n	8003354 <CAN_send_Timer+0xd8>
					&& CAN_set_answer.char_index <= CAN_set_answer.char_len)
 800337c:	4a0d      	ldr	r2, [pc, #52]	; (80033b4 <CAN_send_Timer+0x138>)
 800337e:	78d2      	ldrb	r2, [r2, #3]
 8003380:	4291      	cmp	r1, r2
 8003382:	d8e7      	bhi.n	8003354 <CAN_send_Timer+0xd8>
				buf[i] = *(CAN_set_answer.ptr + CAN_set_answer.char_index++);
 8003384:	1c4c      	adds	r4, r1, #1
 8003386:	4a0b      	ldr	r2, [pc, #44]	; (80033b4 <CAN_send_Timer+0x138>)
 8003388:	80d4      	strh	r4, [r2, #6]
 800338a:	5c41      	ldrb	r1, [r0, r1]
 800338c:	aa02      	add	r2, sp, #8
 800338e:	441a      	add	r2, r3
 8003390:	f802 1c08 	strb.w	r1, [r2, #-8]
 8003394:	e7e6      	b.n	8003364 <CAN_send_Timer+0xe8>
		Send_S6(CAN_SET_PGN,&buf[0]);
 8003396:	4669      	mov	r1, sp
 8003398:	4808      	ldr	r0, [pc, #32]	; (80033bc <CAN_send_Timer+0x140>)
 800339a:	f7ff fbdb 	bl	8002b54 <Send_S6>
 800339e:	e7a9      	b.n	80032f4 <CAN_send_Timer+0x78>
		CAN_set_answer.status = 3;
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <CAN_send_Timer+0x138>)
 80033a2:	2203      	movs	r2, #3
 80033a4:	701a      	strb	r2, [r3, #0]
}
 80033a6:	e7a5      	b.n	80032f4 <CAN_send_Timer+0x78>
 80033a8:	20003b3c 	.word	0x20003b3c
 80033ac:	08006eb4 	.word	0x08006eb4
 80033b0:	20004164 	.word	0x20004164
 80033b4:	20004140 	.word	0x20004140
 80033b8:	0018ec00 	.word	0x0018ec00
 80033bc:	0018eb00 	.word	0x0018eb00

080033c0 <USB_LP_CAN1_RX0_IRQHandler>:
	portEND_SWITCHING_ISR( canTaskSwitchNeed );
}
#endif

void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80033c0:	b530      	push	{r4, r5, lr}
 80033c2:	b083      	sub	sp, #12
	portBASE_TYPE canTaskSwitchNeed;
	CAN_Receive(CAN_CAN, CAN_FIFO0, &RxMessageISR);
 80033c4:	4c0e      	ldr	r4, [pc, #56]	; (8003400 <USB_LP_CAN1_RX0_IRQHandler+0x40>)
 80033c6:	4d0f      	ldr	r5, [pc, #60]	; (8003404 <USB_LP_CAN1_RX0_IRQHandler+0x44>)
 80033c8:	4622      	mov	r2, r4
 80033ca:	2100      	movs	r1, #0
 80033cc:	4628      	mov	r0, r5
 80033ce:	f7ff f8a3 	bl	8002518 <CAN_Receive>
	CAN_ClearITPendingBit(CAN_CAN,CAN_IT_FMP0);
 80033d2:	2102      	movs	r1, #2
 80033d4:	4628      	mov	r0, r5
 80033d6:	f7ff f8fb 	bl	80025d0 <CAN_ClearITPendingBit>
	portBASE_TYPE canRxTaskSwitchNeed = pdFALSE;
	xQueueSendFromISR(CanRxQueue, &RxMessageISR, &canTaskSwitchNeed);
 80033da:	2300      	movs	r3, #0
 80033dc:	aa01      	add	r2, sp, #4
 80033de:	4621      	mov	r1, r4
 80033e0:	4809      	ldr	r0, [pc, #36]	; (8003408 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 80033e2:	6800      	ldr	r0, [r0, #0]
 80033e4:	f7fd ffba 	bl	800135c <xQueueGenericSendFromISR>
	portEND_SWITCHING_ISR( canTaskSwitchNeed );
 80033e8:	9b01      	ldr	r3, [sp, #4]
 80033ea:	b13b      	cbz	r3, 80033fc <USB_LP_CAN1_RX0_IRQHandler+0x3c>
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <USB_LP_CAN1_RX0_IRQHandler+0x4c>)
 80033ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	f3bf 8f6f 	isb	sy
}
 80033fc:	b003      	add	sp, #12
 80033fe:	bd30      	pop	{r4, r5, pc}
 8003400:	20004110 	.word	0x20004110
 8003404:	40006400 	.word	0x40006400
 8003408:	2000412c 	.word	0x2000412c
 800340c:	e000ed04 	.word	0xe000ed04

08003410 <GGR_Status>:
 uint8_t GGR_Status(char* buffer, int buf_size, bool *sms, const SMS_Command_t * cmd)
 {
    char restrict_buf[32];
     //sprintf(restrict_buf,"%u", gsm
   DEBUG("SMS getstatus detected\r\n");
 	if ( (buffer != NULL ))
 8003410:	b108      	cbz	r0, 8003416 <GGR_Status+0x6>
//     DebugPutLine(buffer);
//     DEBUG("\r\n");
//     DEBUG("Send getstatus SMS\r\n");
//
//     *sms = true;
     return E_OK;
 8003412:	2000      	movs	r0, #0
 8003414:	4770      	bx	lr
   }
 	return E_ERROR;
 8003416:	2001      	movs	r0, #1
 }
 8003418:	4770      	bx	lr
	...

0800341c <GGC_CPUReset>:
 * Initiate a system reset request to reset the MCU
 */
static __INLINE void NVIC_SystemReset(void)
{
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | 
 800341c:	4904      	ldr	r1, [pc, #16]	; (8003430 <GGC_CPUReset+0x14>)
 800341e:	68ca      	ldr	r2, [r1, #12]
 8003420:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <GGC_CPUReset+0x18>)
 8003426:	4313      	orrs	r3, r2
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
 8003428:	60cb      	str	r3, [r1, #12]
static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	e7fe      	b.n	800342e <GGC_CPUReset+0x12>
 8003430:	e000ed00 	.word	0xe000ed00
 8003434:	05fa0004 	.word	0x05fa0004

08003438 <GGR_GetIOResp>:

 uint8_t GGR_GetIOResp(char* buffer, int buf_size, bool *sms, const SMS_Command_t * cmd)
 {
    DEBUG("SMS GetIO detected\r\n");

 	if (buffer != NULL )
 8003438:	b140      	cbz	r0, 800344c <GGR_GetIOResp+0x14>
 {
 800343a:	b510      	push	{r4, lr}
 800343c:	4614      	mov	r4, r2
 	{

 		buffer = strcpyEx(   buffer,
 800343e:	4904      	ldr	r1, [pc, #16]	; (8003450 <GGR_GetIOResp+0x18>)
 8003440:	f001 fb65 	bl	8004b0e <strcpyEx>
 			"OK ");

 	   *sms = true;
 8003444:	2301      	movs	r3, #1
 8003446:	7023      	strb	r3, [r4, #0]
     DebugPutLine(buffer);
     DEBUG("\r\n");
    // DEBUG("Send getstatus SMS\r\n");
 		return E_OK;
 8003448:	2000      	movs	r0, #0

 	}
 	return E_ERROR;
 };
 800344a:	bd10      	pop	{r4, pc}
 	return E_ERROR;
 800344c:	2001      	movs	r0, #1
 };
 800344e:	4770      	bx	lr
 8003450:	08006f24 	.word	0x08006f24

08003454 <GGR_GetGPSResp>:
 *******************************************************************************/
 uint8_t GGR_GetGPSResp(char* buffer, int buf_size, bool *sms, const SMS_Command_t * cmd)
 {
    DEBUG("SMS GetGPS detected\r\n");

 	if (buffer != NULL )
 8003454:	b140      	cbz	r0, 8003468 <GGR_GetGPSResp+0x14>
 {
 8003456:	b510      	push	{r4, lr}
 8003458:	4614      	mov	r4, r2
 	{

 		buffer = strcpyEx(   buffer,
 800345a:	4904      	ldr	r1, [pc, #16]	; (800346c <GGR_GetGPSResp+0x18>)
 800345c:	f001 fb57 	bl	8004b0e <strcpyEx>
     "GPS: ");

 	   *sms = true;
 8003460:	2301      	movs	r3, #1
 8003462:	7023      	strb	r3, [r4, #0]
     DebugPutLine(buffer);
     DEBUG("\r\n");
    // DEBUG("Send getstatus SMS\r\n");
 		return E_OK;
 8003464:	2000      	movs	r0, #0
 	}
 	return E_ERROR;
 };
 8003466:	bd10      	pop	{r4, pc}
 	return E_ERROR;
 8003468:	2001      	movs	r0, #1
 };
 800346a:	4770      	bx	lr
 800346c:	08006f1c 	.word	0x08006f1c

08003470 <GGR_save_param_resp>:

 uint8_t GGR_save_param_resp(char* buffer, int buf_size, bool *sms, const SMS_Command_t * cmd)
 {
	   DEBUG("save param response response\r\n");

	 	if (buffer != NULL )
 8003470:	b140      	cbz	r0, 8003484 <GGR_save_param_resp+0x14>
 {
 8003472:	b510      	push	{r4, lr}
 8003474:	4614      	mov	r4, r2
	 	{
	 		buffer = strcpyEx(   buffer,
 8003476:	4904      	ldr	r1, [pc, #16]	; (8003488 <GGR_save_param_resp+0x18>)
 8003478:	f001 fb49 	bl	8004b0e <strcpyEx>
	 			"\r\n<PARAM SAVED>\r\n");
	 	   *sms = true;
 800347c:	2301      	movs	r3, #1
 800347e:	7023      	strb	r3, [r4, #0]
	     DebugPutLine(buffer);
	     DEBUG("\r\n");
	    // DEBUG("Send getstatus SMS\r\n");
	 		return E_OK;
 8003480:	2000      	movs	r0, #0

	 	}
	 	return E_ERROR;

 }
 8003482:	bd10      	pop	{r4, pc}
	 	return E_ERROR;
 8003484:	2001      	movs	r0, #1
 }
 8003486:	4770      	bx	lr
 8003488:	08006f80 	.word	0x08006f80

0800348c <GGR_GetParamResp>:
 	if (buffer != NULL && buf_size != 0)
 800348c:	b330      	cbz	r0, 80034dc <GGR_GetParamResp+0x50>
 {
 800348e:	b570      	push	{r4, r5, r6, lr}
 8003490:	4604      	mov	r4, r0
 	if (buffer != NULL && buf_size != 0)
 8003492:	b329      	cbz	r1, 80034e0 <GGR_GetParamResp+0x54>
 8003494:	4615      	mov	r5, r2
 		 if (set_new.param_ID !=0)
 8003496:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <GGR_GetParamResp+0x58>)
 8003498:	885b      	ldrh	r3, [r3, #2]
 800349a:	b91b      	cbnz	r3, 80034a4 <GGR_GetParamResp+0x18>
        *sms = true;
 800349c:	2301      	movs	r3, #1
 800349e:	702b      	strb	r3, [r5, #0]
 		return E_OK;
 80034a0:	2000      	movs	r0, #0
 }
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
 		    		   SMS_CMD[set_new.param_ID].param_ID,set_new.out_string);
 80034a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80034a8:	009a      	lsls	r2, r3, #2
 		       buffer += sprintf(buffer,"\r\n\r\nParam ID: %04d Val: %s",
 80034aa:	4e0f      	ldr	r6, [pc, #60]	; (80034e8 <GGR_GetParamResp+0x5c>)
 80034ac:	4633      	mov	r3, r6
 80034ae:	490f      	ldr	r1, [pc, #60]	; (80034ec <GGR_GetParamResp+0x60>)
 80034b0:	5a8a      	ldrh	r2, [r1, r2]
 80034b2:	490f      	ldr	r1, [pc, #60]	; (80034f0 <GGR_GetParamResp+0x64>)
 80034b4:	f002 f82a 	bl	800550c <siprintf>
 80034b8:	4420      	add	r0, r4
 		       if (set_new.source == source_configtool)
 80034ba:	f816 3c24 	ldrb.w	r3, [r6, #-36]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d1ec      	bne.n	800349c <GGR_GetParamResp+0x10>
 		    			 SMS_CMD[set_new.param_ID].param_ID,set_new.out_string);
 80034c2:	f1a6 0324 	sub.w	r3, r6, #36	; 0x24
 80034c6:	885a      	ldrh	r2, [r3, #2]
 80034c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80034cc:	0091      	lsls	r1, r2, #2
 		    	 buffer += sprintf(buffer,"\r\n<%04d %s>\r\n\r\n\r",
 80034ce:	3324      	adds	r3, #36	; 0x24
 80034d0:	4a06      	ldr	r2, [pc, #24]	; (80034ec <GGR_GetParamResp+0x60>)
 80034d2:	5a52      	ldrh	r2, [r2, r1]
 80034d4:	4907      	ldr	r1, [pc, #28]	; (80034f4 <GGR_GetParamResp+0x68>)
 80034d6:	f002 f819 	bl	800550c <siprintf>
 80034da:	e7df      	b.n	800349c <GGR_GetParamResp+0x10>
 	return E_ERROR;
 80034dc:	2001      	movs	r0, #1
 }
 80034de:	4770      	bx	lr
 	return E_ERROR;
 80034e0:	2001      	movs	r0, #1
 80034e2:	e7de      	b.n	80034a2 <GGR_GetParamResp+0x16>
 80034e4:	20004278 	.word	0x20004278
 80034e8:	2000429c 	.word	0x2000429c
 80034ec:	08006fc8 	.word	0x08006fc8
 80034f0:	08006f28 	.word	0x08006f28
 80034f4:	08006f44 	.word	0x08006f44

080034f8 <GGR_SetParamResp>:
 	if (buffer != NULL && buf_size != 0)
 80034f8:	b330      	cbz	r0, 8003548 <GGR_SetParamResp+0x50>
 {
 80034fa:	b538      	push	{r3, r4, r5, lr}
 80034fc:	4604      	mov	r4, r0
 	if (buffer != NULL && buf_size != 0)
 80034fe:	b329      	cbz	r1, 800354c <GGR_SetParamResp+0x54>
    if (set_new.param_ID !=0)
 8003500:	4a13      	ldr	r2, [pc, #76]	; (8003550 <GGR_SetParamResp+0x58>)
 8003502:	8852      	ldrh	r2, [r2, #2]
 8003504:	b90a      	cbnz	r2, 800350a <GGR_SetParamResp+0x12>
 		return E_OK;
 8003506:	2000      	movs	r0, #0
 8003508:	e021      	b.n	800354e <GGR_SetParamResp+0x56>
    		   SMS_CMD[set_new.param_ID].param_ID,set_new.out_string);
 800350a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800350e:	0091      	lsls	r1, r2, #2
       buffer += sprintf(buffer,"\r\n\r\nParam ID: %04d Val: %s",
 8003510:	4d10      	ldr	r5, [pc, #64]	; (8003554 <GGR_SetParamResp+0x5c>)
 8003512:	462b      	mov	r3, r5
 8003514:	4a10      	ldr	r2, [pc, #64]	; (8003558 <GGR_SetParamResp+0x60>)
 8003516:	5a52      	ldrh	r2, [r2, r1]
 8003518:	4910      	ldr	r1, [pc, #64]	; (800355c <GGR_SetParamResp+0x64>)
 800351a:	f001 fff7 	bl	800550c <siprintf>
 800351e:	4420      	add	r0, r4
       if (set_new.source == source_configtool)
 8003520:	f815 3c24 	ldrb.w	r3, [r5, #-36]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d001      	beq.n	800352c <GGR_SetParamResp+0x34>
 		return E_OK;
 8003528:	2000      	movs	r0, #0
 800352a:	e010      	b.n	800354e <GGR_SetParamResp+0x56>
    			 SMS_CMD[set_new.param_ID].param_ID,set_new.out_string);
 800352c:	f1a5 0324 	sub.w	r3, r5, #36	; 0x24
 8003530:	885a      	ldrh	r2, [r3, #2]
 8003532:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003536:	0091      	lsls	r1, r2, #2
    	 buffer += sprintf(buffer,"\r\n<%04d %s>\r\n\r\n\r",
 8003538:	3324      	adds	r3, #36	; 0x24
 800353a:	4a07      	ldr	r2, [pc, #28]	; (8003558 <GGR_SetParamResp+0x60>)
 800353c:	5a52      	ldrh	r2, [r2, r1]
 800353e:	4908      	ldr	r1, [pc, #32]	; (8003560 <GGR_SetParamResp+0x68>)
 8003540:	f001 ffe4 	bl	800550c <siprintf>
 		return E_OK;
 8003544:	2000      	movs	r0, #0
 8003546:	e002      	b.n	800354e <GGR_SetParamResp+0x56>
 	return E_ERROR;
 8003548:	2001      	movs	r0, #1
 }
 800354a:	4770      	bx	lr
 	return E_ERROR;
 800354c:	2001      	movs	r0, #1
 }
 800354e:	bd38      	pop	{r3, r4, r5, pc}
 8003550:	20004278 	.word	0x20004278
 8003554:	2000429c 	.word	0x2000429c
 8003558:	08006fc8 	.word	0x08006fc8
 800355c:	08006f28 	.word	0x08006f28
 8003560:	08006f44 	.word	0x08006f44

08003564 <GGC_TPASS_Handle>:
 /*******************************************************************************
 * Function Name	:	GGC_TPASS_Handle
 * Description	:
 *******************************************************************************/
 uint8_t GGC_TPASS_Handle(char * cmd,  const SMS_Command_t * gg_cmd, bool exec)
 {
 8003564:	b510      	push	{r4, lr}
 8003566:	4604      	mov	r4, r0
		uint32_t pass;

		DEBUG("TPASS Handle\r\n");

		//parse param
		while (cmd != NULL) {
 8003568:	b19c      	cbz	r4, 8003592 <GGC_TPASS_Handle+0x2e>
			cmd = TokenNext(cmd, ' ');
 800356a:	2120      	movs	r1, #32
 800356c:	4620      	mov	r0, r4
 800356e:	f001 fabe 	bl	8004aee <TokenNext>
 8003572:	4604      	mov	r4, r0
			if ((size = TokenSize(cmd, ';')) == NULL)
 8003574:	213b      	movs	r1, #59	; 0x3b
 8003576:	f001 faab 	bl	8004ad0 <TokenSize>
				size = strlen(cmd);
			if ((pass = atoi(cmd)) <= 0xFFFF) {
 800357a:	4620      	mov	r0, r4
 800357c:	f001 faf9 	bl	8004b72 <atoi>
 8003580:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003584:	d2f0      	bcs.n	8003568 <GGC_TPASS_Handle+0x4>
				//test suppurted number param
				cmd = TokenNext(cmd, ' ');
 8003586:	2120      	movs	r1, #32
 8003588:	4620      	mov	r0, r4
 800358a:	f001 fab0 	bl	8004aee <TokenNext>
 800358e:	4604      	mov	r4, r0
 8003590:	e7ea      	b.n	8003568 <GGC_TPASS_Handle+0x4>
					size = (ptr - cmd);
				i = 0;
			}
		}
 	return E_OK;
 }
 8003592:	2000      	movs	r0, #0
 8003594:	bd10      	pop	{r4, pc}
	...

08003598 <GGC_GetParamHandle>:
 {
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	4604      	mov	r4, r0
     __IO double dd=0;
 800359e:	2200      	movs	r2, #0
 80035a0:	2300      	movs	r3, #0
 80035a2:	e9cd 2300 	strd	r2, r3, [sp]
   while(cmd!= NULL)
 80035a6:	2c00      	cmp	r4, #0
 80035a8:	d068      	beq.n	800367c <GGC_GetParamHandle+0xe4>
     cmd = TokenNext(cmd,' ');
 80035aa:	2120      	movs	r1, #32
 80035ac:	4620      	mov	r0, r4
 80035ae:	f001 fa9e 	bl	8004aee <TokenNext>
 80035b2:	4604      	mov	r4, r0
     if ((size = TokenSize(cmd,';'))==NULL) size = strlen(cmd);
 80035b4:	213b      	movs	r1, #59	; 0x3b
 80035b6:	f001 fa8b 	bl	8004ad0 <TokenSize>
     if ( (param = atoi(cmd))<=0xFFFF )
 80035ba:	4620      	mov	r0, r4
 80035bc:	f001 fad9 	bl	8004b72 <atoi>
 80035c0:	4605      	mov	r5, r0
 80035c2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80035c6:	d2ee      	bcs.n	80035a6 <GGC_GetParamHandle+0xe>
        cmd = TokenNext(cmd,' ');
 80035c8:	2120      	movs	r1, #32
 80035ca:	4620      	mov	r0, r4
 80035cc:	f001 fa8f 	bl	8004aee <TokenNext>
 80035d0:	4604      	mov	r4, r0
 80035d2:	2300      	movs	r3, #0
           if (param == SMS_CMD[i].param_ID )
 80035d4:	461e      	mov	r6, r3
 80035d6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80035da:	008a      	lsls	r2, r1, #2
 80035dc:	492a      	ldr	r1, [pc, #168]	; (8003688 <GGC_GetParamHandle+0xf0>)
 80035de:	5a8a      	ldrh	r2, [r1, r2]
 80035e0:	42aa      	cmp	r2, r5
 80035e2:	d009      	beq.n	80035f8 <GGC_GetParamHandle+0x60>
           i++;
 80035e4:	3301      	adds	r3, #1
 80035e6:	b2db      	uxtb	r3, r3
         } while (SMS_CMD[i].param_ID !=NULL);
 80035e8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80035ec:	008a      	lsls	r2, r1, #2
 80035ee:	4926      	ldr	r1, [pc, #152]	; (8003688 <GGC_GetParamHandle+0xf0>)
 80035f0:	5a8a      	ldrh	r2, [r1, r2]
 80035f2:	2a00      	cmp	r2, #0
 80035f4:	d1ee      	bne.n	80035d4 <GGC_GetParamHandle+0x3c>
 80035f6:	e7d6      	b.n	80035a6 <GGC_GetParamHandle+0xe>
               set_new.param_ID  = i;
 80035f8:	4a24      	ldr	r2, [pc, #144]	; (800368c <GGC_GetParamHandle+0xf4>)
 80035fa:	8053      	strh	r3, [r2, #2]
               ptr += SMS_CMD[i].offset;
 80035fc:	005a      	lsls	r2, r3, #1
 80035fe:	441a      	add	r2, r3
 8003600:	0091      	lsls	r1, r2, #2
 8003602:	4b21      	ldr	r3, [pc, #132]	; (8003688 <GGC_GetParamHandle+0xf0>)
 8003604:	440b      	add	r3, r1
 8003606:	6898      	ldr	r0, [r3, #8]
 8003608:	4921      	ldr	r1, [pc, #132]	; (8003690 <GGC_GetParamHandle+0xf8>)
 800360a:	1842      	adds	r2, r0, r1
               	  switch (SMS_CMD[i].type) {
 800360c:	789b      	ldrb	r3, [r3, #2]
 800360e:	2b05      	cmp	r3, #5
 8003610:	d837      	bhi.n	8003682 <GGC_GetParamHandle+0xea>
 8003612:	e8df f003 	tbb	[pc, r3]
 8003616:	0e03      	.short	0x0e03
 8003618:	220e0e0e 	.word	0x220e0e0e
						sprintf((char *)&set_new.out_string,SMS_CMD[i].cmd_assert,ptr);
 800361c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8003620:	00b1      	lsls	r1, r6, #2
 8003622:	4b19      	ldr	r3, [pc, #100]	; (8003688 <GGC_GetParamHandle+0xf0>)
 8003624:	440b      	add	r3, r1
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	481a      	ldr	r0, [pc, #104]	; (8003694 <GGC_GetParamHandle+0xfc>)
 800362a:	f001 ff6f 	bl	800550c <siprintf>
               return E_OK;
 800362e:	2000      	movs	r0, #0
						break;
 8003630:	e025      	b.n	800367e <GGC_GetParamHandle+0xe6>
						 xx = *pp;
 8003632:	5842      	ldr	r2, [r0, r1]
						 switch (SMS_CMD[i].type)
 8003634:	2b01      	cmp	r3, #1
 8003636:	d00c      	beq.n	8003652 <GGC_GetParamHandle+0xba>
 8003638:	2b02      	cmp	r3, #2
 800363a:	d00c      	beq.n	8003656 <GGC_GetParamHandle+0xbe>
						sprintf((char *)&set_new.out_string,SMS_CMD[i].cmd_assert,xx);
 800363c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8003640:	00b1      	lsls	r1, r6, #2
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <GGC_GetParamHandle+0xf0>)
 8003644:	440b      	add	r3, r1
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	4812      	ldr	r0, [pc, #72]	; (8003694 <GGC_GetParamHandle+0xfc>)
 800364a:	f001 ff5f 	bl	800550c <siprintf>
               return E_OK;
 800364e:	2000      	movs	r0, #0
						break;
 8003650:	e015      	b.n	800367e <GGC_GetParamHandle+0xe6>
								xx &= 0xFF;
 8003652:	b2d2      	uxtb	r2, r2
								break;
 8003654:	e7f2      	b.n	800363c <GGC_GetParamHandle+0xa4>
								xx &= 0xFFFF;
 8003656:	b292      	uxth	r2, r2
								break;
 8003658:	e7f0      	b.n	800363c <GGC_GetParamHandle+0xa4>
	            		   memcpy((uint8_t*)&dd,(uint8_t*)v,8);
 800365a:	466b      	mov	r3, sp
 800365c:	6810      	ldr	r0, [r2, #0]
 800365e:	6851      	ldr	r1, [r2, #4]
 8003660:	c303      	stmia	r3!, {r0, r1}
	            		   sprintf((char*)&set_new.out_string,SMS_CMD[i].cmd_assert, dd );
 8003662:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8003666:	00b3      	lsls	r3, r6, #2
 8003668:	4907      	ldr	r1, [pc, #28]	; (8003688 <GGC_GetParamHandle+0xf0>)
 800366a:	4419      	add	r1, r3
 800366c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003670:	6849      	ldr	r1, [r1, #4]
 8003672:	4808      	ldr	r0, [pc, #32]	; (8003694 <GGC_GetParamHandle+0xfc>)
 8003674:	f001 ff4a 	bl	800550c <siprintf>
               return E_OK;
 8003678:	2000      	movs	r0, #0
						break;
 800367a:	e000      	b.n	800367e <GGC_GetParamHandle+0xe6>
 	return E_ERROR;
 800367c:	2001      	movs	r0, #1
 }
 800367e:	b002      	add	sp, #8
 8003680:	bd70      	pop	{r4, r5, r6, pc}
               return E_OK;
 8003682:	2000      	movs	r0, #0
 8003684:	e7fb      	b.n	800367e <GGC_GetParamHandle+0xe6>
 8003686:	bf00      	nop
 8003688:	08006fc8 	.word	0x08006fc8
 800368c:	20004278 	.word	0x20004278
 8003690:	200042f0 	.word	0x200042f0
 8003694:	2000429c 	.word	0x2000429c

08003698 <GGC_SetParamHandle>:
uint8_t GGC_SetParamHandle(char * cmd, const SMS_Command_t * gg_cmd, bool exec) {
 8003698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369c:	4604      	mov	r4, r0
	while (cmd != NULL) {
 800369e:	e006      	b.n	80036ae <GGC_SetParamHandle+0x16>
		if ((param = atoi(cmd)) <= 0xFFFF) {
 80036a0:	4620      	mov	r0, r4
 80036a2:	f001 fa66 	bl	8004b72 <atoi>
 80036a6:	4606      	mov	r6, r0
 80036a8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80036ac:	d312      	bcc.n	80036d4 <GGC_SetParamHandle+0x3c>
	while (cmd != NULL) {
 80036ae:	2c00      	cmp	r4, #0
 80036b0:	f000 80b2 	beq.w	8003818 <GGC_SetParamHandle+0x180>
		cmd = TokenNext(cmd, ' ');
 80036b4:	2120      	movs	r1, #32
 80036b6:	4620      	mov	r0, r4
 80036b8:	f001 fa19 	bl	8004aee <TokenNext>
 80036bc:	4604      	mov	r4, r0
		if ((size = TokenSize(cmd, ';')) == NULL)
 80036be:	213b      	movs	r1, #59	; 0x3b
 80036c0:	f001 fa06 	bl	8004ad0 <TokenSize>
 80036c4:	b2c5      	uxtb	r5, r0
 80036c6:	2d00      	cmp	r5, #0
 80036c8:	d1ea      	bne.n	80036a0 <GGC_SetParamHandle+0x8>
			size = strlen(cmd);
 80036ca:	4620      	mov	r0, r4
 80036cc:	f7fc fd40 	bl	8000150 <strlen>
 80036d0:	b2c5      	uxtb	r5, r0
 80036d2:	e7e5      	b.n	80036a0 <GGC_SetParamHandle+0x8>
			cmd = TokenNext(cmd, ' ');
 80036d4:	2120      	movs	r1, #32
 80036d6:	4620      	mov	r0, r4
 80036d8:	f001 fa09 	bl	8004aee <TokenNext>
 80036dc:	4604      	mov	r4, r0
			if ((ptr = strpbrk(cmd, " ;\0")) != NULL)
 80036de:	4951      	ldr	r1, [pc, #324]	; (8003824 <GGC_SetParamHandle+0x18c>)
 80036e0:	f001 ff34 	bl	800554c <strpbrk>
 80036e4:	b108      	cbz	r0, 80036ea <GGC_SetParamHandle+0x52>
				size = (ptr - cmd);
 80036e6:	1b05      	subs	r5, r0, r4
 80036e8:	b2ed      	uxtb	r5, r5
			i = 0;
 80036ea:	2300      	movs	r3, #0
				if (param == SMS_CMD[i].param_ID) {
 80036ec:	461f      	mov	r7, r3
 80036ee:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80036f2:	008a      	lsls	r2, r1, #2
 80036f4:	494c      	ldr	r1, [pc, #304]	; (8003828 <GGC_SetParamHandle+0x190>)
 80036f6:	5a8a      	ldrh	r2, [r1, r2]
 80036f8:	42b2      	cmp	r2, r6
 80036fa:	d009      	beq.n	8003710 <GGC_SetParamHandle+0x78>
				i++;
 80036fc:	3301      	adds	r3, #1
 80036fe:	b2db      	uxtb	r3, r3
			} while (SMS_CMD[i].param_ID != NULL);
 8003700:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003704:	008a      	lsls	r2, r1, #2
 8003706:	4948      	ldr	r1, [pc, #288]	; (8003828 <GGC_SetParamHandle+0x190>)
 8003708:	5a8a      	ldrh	r2, [r1, r2]
 800370a:	2a00      	cmp	r2, #0
 800370c:	d1ee      	bne.n	80036ec <GGC_SetParamHandle+0x54>
 800370e:	e7ce      	b.n	80036ae <GGC_SetParamHandle+0x16>
						set_new.param_ID = i;
 8003710:	4a46      	ldr	r2, [pc, #280]	; (800382c <GGC_SetParamHandle+0x194>)
 8003712:	8053      	strh	r3, [r2, #2]
						switch (SMS_CMD[i].type) {
 8003714:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003718:	009a      	lsls	r2, r3, #2
 800371a:	460b      	mov	r3, r1
 800371c:	4413      	add	r3, r2
 800371e:	789e      	ldrb	r6, [r3, #2]
 8003720:	2e05      	cmp	r6, #5
 8003722:	d87c      	bhi.n	800381e <GGC_SetParamHandle+0x186>
 8003724:	e8df f006 	tbb	[pc, r6]
 8003728:	1d1d1d03 	.word	0x1d1d1d03
 800372c:	501d      	.short	0x501d
							if (nmea_scanf(cmd, size, SMS_CMD[i].cmd_assert,
 800372e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8003732:	00ba      	lsls	r2, r7, #2
 8003734:	4b3c      	ldr	r3, [pc, #240]	; (8003828 <GGC_SetParamHandle+0x190>)
 8003736:	4413      	add	r3, r2
 8003738:	685e      	ldr	r6, [r3, #4]
 800373a:	4b3d      	ldr	r3, [pc, #244]	; (8003830 <GGC_SetParamHandle+0x198>)
 800373c:	4632      	mov	r2, r6
 800373e:	4629      	mov	r1, r5
 8003740:	4620      	mov	r0, r4
 8003742:	f001 f8ad 	bl	80048a0 <nmea_scanf>
 8003746:	b138      	cbz	r0, 8003758 <GGC_SetParamHandle+0xc0>
								sprintf((char *) &set_new.out_string,
 8003748:	4839      	ldr	r0, [pc, #228]	; (8003830 <GGC_SetParamHandle+0x198>)
 800374a:	4602      	mov	r2, r0
 800374c:	4631      	mov	r1, r6
 800374e:	3020      	adds	r0, #32
 8003750:	f001 fedc 	bl	800550c <siprintf>
						return E_OK;
 8003754:	2000      	movs	r0, #0
							break;
 8003756:	e060      	b.n	800381a <GGC_SetParamHandle+0x182>
								set_new.param_ID = 0;
 8003758:	4b34      	ldr	r3, [pc, #208]	; (800382c <GGC_SetParamHandle+0x194>)
 800375a:	2200      	movs	r2, #0
 800375c:	805a      	strh	r2, [r3, #2]
								return E_BAD_RESPONSE;
 800375e:	2009      	movs	r0, #9
 8003760:	e05b      	b.n	800381a <GGC_SetParamHandle+0x182>
							if (nmea_scanf(cmd, size, SMS_CMD[i].cmd_assert,&set_new.var_uint) != NULL) {
 8003762:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8003766:	009a      	lsls	r2, r3, #2
 8003768:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <GGC_SetParamHandle+0x190>)
 800376a:	4413      	add	r3, r2
 800376c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8003770:	4b30      	ldr	r3, [pc, #192]	; (8003834 <GGC_SetParamHandle+0x19c>)
 8003772:	4642      	mov	r2, r8
 8003774:	4629      	mov	r1, r5
 8003776:	4620      	mov	r0, r4
 8003778:	f001 f892 	bl	80048a0 <nmea_scanf>
 800377c:	b1f8      	cbz	r0, 80037be <GGC_SetParamHandle+0x126>
								sprintf((char *) &set_new.out_string,
 800377e:	482b      	ldr	r0, [pc, #172]	; (800382c <GGC_SetParamHandle+0x194>)
 8003780:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003782:	4641      	mov	r1, r8
 8003784:	3024      	adds	r0, #36	; 0x24
 8003786:	f001 fec1 	bl	800550c <siprintf>
								switch (SMS_CMD[i].type)
 800378a:	2e03      	cmp	r6, #3
 800378c:	d015      	beq.n	80037ba <GGC_SetParamHandle+0x122>
 800378e:	2e04      	cmp	r6, #4
 8003790:	d003      	beq.n	800379a <GGC_SetParamHandle+0x102>
 8003792:	2e02      	cmp	r6, #2
 8003794:	d00f      	beq.n	80037b6 <GGC_SetParamHandle+0x11e>
										byte_size = 1;
 8003796:	2201      	movs	r2, #1
										break;
 8003798:	e000      	b.n	800379c <GGC_SetParamHandle+0x104>
										byte_size = 8;
 800379a:	2208      	movs	r2, #8
								v += SMS_CMD[i].offset;
 800379c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80037a0:	00b9      	lsls	r1, r7, #2
 80037a2:	4b21      	ldr	r3, [pc, #132]	; (8003828 <GGC_SetParamHandle+0x190>)
 80037a4:	440b      	add	r3, r1
 80037a6:	689b      	ldr	r3, [r3, #8]
								memcpy((uint8_t*) v,(uint8_t*) &set_new.var_uint, byte_size);
 80037a8:	4922      	ldr	r1, [pc, #136]	; (8003834 <GGC_SetParamHandle+0x19c>)
 80037aa:	4823      	ldr	r0, [pc, #140]	; (8003838 <GGC_SetParamHandle+0x1a0>)
 80037ac:	4418      	add	r0, r3
 80037ae:	f001 fa4a 	bl	8004c46 <memcpy>
						return E_OK;
 80037b2:	2000      	movs	r0, #0
							break;
 80037b4:	e031      	b.n	800381a <GGC_SetParamHandle+0x182>
										byte_size = 2;
 80037b6:	2202      	movs	r2, #2
										break;
 80037b8:	e7f0      	b.n	800379c <GGC_SetParamHandle+0x104>
										byte_size = 4;
 80037ba:	2204      	movs	r2, #4
 80037bc:	e7ee      	b.n	800379c <GGC_SetParamHandle+0x104>
								set_new.param_ID = 0;
 80037be:	4b1b      	ldr	r3, [pc, #108]	; (800382c <GGC_SetParamHandle+0x194>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	805a      	strh	r2, [r3, #2]
								return E_BAD_RESPONSE;
 80037c4:	2009      	movs	r0, #9
 80037c6:	e028      	b.n	800381a <GGC_SetParamHandle+0x182>
							if (nmea_scanf(cmd, size, SMS_CMD[i].cmd_assert,
 80037c8:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80037cc:	009a      	lsls	r2, r3, #2
 80037ce:	4b16      	ldr	r3, [pc, #88]	; (8003828 <GGC_SetParamHandle+0x190>)
 80037d0:	4413      	add	r3, r2
 80037d2:	685e      	ldr	r6, [r3, #4]
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <GGC_SetParamHandle+0x1a4>)
 80037d6:	4632      	mov	r2, r6
 80037d8:	4629      	mov	r1, r5
 80037da:	4620      	mov	r0, r4
 80037dc:	f001 f860 	bl	80048a0 <nmea_scanf>
 80037e0:	b1a8      	cbz	r0, 800380e <GGC_SetParamHandle+0x176>
								v += SMS_CMD[i].offset;
 80037e2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80037e6:	00ba      	lsls	r2, r7, #2
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <GGC_SetParamHandle+0x190>)
 80037ea:	4413      	add	r3, r2
 80037ec:	689d      	ldr	r5, [r3, #8]
 80037ee:	4c12      	ldr	r4, [pc, #72]	; (8003838 <GGC_SetParamHandle+0x1a0>)
 80037f0:	192f      	adds	r7, r5, r4
								memcpy((uint8_t*) v,
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <GGC_SetParamHandle+0x1a4>)
 80037f4:	461a      	mov	r2, r3
 80037f6:	ca03      	ldmia	r2!, {r0, r1}
 80037f8:	5128      	str	r0, [r5, r4]
 80037fa:	6079      	str	r1, [r7, #4]
								sprintf((char*) &set_new.out_string,
 80037fc:	4618      	mov	r0, r3
 80037fe:	e870 2312 	ldrd	r2, r3, [r0], #-72	; 0x48
 8003802:	4631      	mov	r1, r6
 8003804:	3024      	adds	r0, #36	; 0x24
 8003806:	f001 fe81 	bl	800550c <siprintf>
						return E_OK;
 800380a:	2000      	movs	r0, #0
							break;
 800380c:	e005      	b.n	800381a <GGC_SetParamHandle+0x182>
								set_new.param_ID = 0;
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <GGC_SetParamHandle+0x194>)
 8003810:	2200      	movs	r2, #0
 8003812:	805a      	strh	r2, [r3, #2]
								return E_BAD_RESPONSE;
 8003814:	2009      	movs	r0, #9
 8003816:	e000      	b.n	800381a <GGC_SetParamHandle+0x182>
	return E_ERROR;
 8003818:	2001      	movs	r0, #1
}
 800381a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						return E_OK;
 800381e:	2000      	movs	r0, #0
 8003820:	e7fb      	b.n	800381a <GGC_SetParamHandle+0x182>
 8003822:	bf00      	nop
 8003824:	08006e20 	.word	0x08006e20
 8003828:	08006fc8 	.word	0x08006fc8
 800382c:	20004278 	.word	0x20004278
 8003830:	2000427c 	.word	0x2000427c
 8003834:	200042bc 	.word	0x200042bc
 8003838:	200042f0 	.word	0x200042f0
 800383c:	200042c0 	.word	0x200042c0

08003840 <GGR_TPASS_Resp>:
	 	if (buffer != NULL && (auth_tick + 30000 < xTaskGetTickCount() || auth_tick ==0))
 8003840:	b1d0      	cbz	r0, 8003878 <GGR_TPASS_Resp+0x38>
 {
 8003842:	b570      	push	{r4, r5, r6, lr}
 8003844:	4606      	mov	r6, r0
 8003846:	4615      	mov	r5, r2
	 	if (buffer != NULL && (auth_tick + 30000 < xTaskGetTickCount() || auth_tick ==0))
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <GGR_TPASS_Resp+0x40>)
 800384a:	681c      	ldr	r4, [r3, #0]
 800384c:	f504 44ea 	add.w	r4, r4, #29952	; 0x7500
 8003850:	3430      	adds	r4, #48	; 0x30
 8003852:	f7fe f8cb 	bl	80019ec <xTaskGetTickCount>
 8003856:	4284      	cmp	r4, r0
 8003858:	d302      	bcc.n	8003860 <GGR_TPASS_Resp+0x20>
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <GGR_TPASS_Resp+0x40>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	b96b      	cbnz	r3, 800387c <GGR_TPASS_Resp+0x3c>
	 		auth_tick = xTaskGetTickCount();
 8003860:	f7fe f8c4 	bl	80019ec <xTaskGetTickCount>
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <GGR_TPASS_Resp+0x40>)
 8003866:	6018      	str	r0, [r3, #0]
	 		buffer = strcpyEx(   buffer,
 8003868:	4906      	ldr	r1, [pc, #24]	; (8003884 <GGR_TPASS_Resp+0x44>)
 800386a:	4630      	mov	r0, r6
 800386c:	f001 f94f 	bl	8004b0e <strcpyEx>
	 	   *sms = true;
 8003870:	2301      	movs	r3, #1
 8003872:	702b      	strb	r3, [r5, #0]
	 		return E_OK;
 8003874:	2000      	movs	r0, #0
 }
 8003876:	bd70      	pop	{r4, r5, r6, pc}
	 	return E_ERROR;
 8003878:	2001      	movs	r0, #1
 }
 800387a:	4770      	bx	lr
	 	return E_ERROR;
 800387c:	2001      	movs	r0, #1
 800387e:	e7fa      	b.n	8003876 <GGR_TPASS_Resp+0x36>
 8003880:	200041b0 	.word	0x200041b0
 8003884:	08006f60 	.word	0x08006f60

08003888 <GGC_save_param_Handle>:
  /*******************************************************************************
   * Function Name	:	GGC_save_param_Handle
   * Description	:
   *******************************************************************************/
   uint8_t GGC_save_param_Handle(char * cmd,  const SMS_Command_t * gg_cmd, bool exec)
   {
 8003888:	b508      	push	{r3, lr}
  		uint8_t size, i;
  		char *ptr;
  		uint32_t pass;

  		DEBUG("Save param Handle\r\n");
  		xSemaphoreGive(S_Save);
 800388a:	2300      	movs	r3, #0
 800388c:	461a      	mov	r2, r3
 800388e:	4619      	mov	r1, r3
 8003890:	4802      	ldr	r0, [pc, #8]	; (800389c <GGC_save_param_Handle+0x14>)
 8003892:	6800      	ldr	r0, [r0, #0]
 8003894:	f7fd fcd6 	bl	8001244 <xQueueGenericSend>
  		//parse param

   	return E_OK;
   }
 8003898:	2000      	movs	r0, #0
 800389a:	bd08      	pop	{r3, pc}
 800389c:	20003b54 	.word	0x20003b54

080038a0 <ProcessCommand>:
 {
 80038a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a4:	4683      	mov	fp, r0
 80038a6:	4692      	mov	sl, r2
   text = strpbrk(text,"abcdefghigklmnopgrstuvwxyz$T");
 80038a8:	4923      	ldr	r1, [pc, #140]	; (8003938 <ProcessCommand+0x98>)
 80038aa:	f001 fe4f 	bl	800554c <strpbrk>
 80038ae:	4680      	mov	r8, r0
   const SMS_Command_t * gg_cmd = NULL;
 80038b0:	f04f 0900 	mov.w	r9, #0
 	while (text != NULL)
 80038b4:	e029      	b.n	800390a <ProcessCommand+0x6a>
     size = (token - text); else size = strlen(text);    //size of parametr to token
 80038b6:	4640      	mov	r0, r8
 80038b8:	f7fc fc4a 	bl	8000150 <strlen>
 80038bc:	4606      	mov	r6, r0
 80038be:	e02f      	b.n	8003920 <ProcessCommand+0x80>
          i++;
 80038c0:	3401      	adds	r4, #1
 80038c2:	b2a4      	uxth	r4, r4
       while(SMS_CMDs[i].Command != NULL)
 80038c4:	4627      	mov	r7, r4
 80038c6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80038ca:	0093      	lsls	r3, r2, #2
 80038cc:	4a1b      	ldr	r2, [pc, #108]	; (800393c <ProcessCommand+0x9c>)
 80038ce:	58d5      	ldr	r5, [r2, r3]
 80038d0:	b1b5      	cbz	r5, 8003900 <ProcessCommand+0x60>
          if (strlen(SMS_CMDs[i].Command) == size
 80038d2:	4628      	mov	r0, r5
 80038d4:	f7fc fc3c 	bl	8000150 <strlen>
 80038d8:	42b0      	cmp	r0, r6
 80038da:	d1f1      	bne.n	80038c0 <ProcessCommand+0x20>
            && memcmp(text,&SMS_CMDs[i].Command[0], size) == 0)
 80038dc:	4632      	mov	r2, r6
 80038de:	4629      	mov	r1, r5
 80038e0:	4640      	mov	r0, r8
 80038e2:	f001 f9a1 	bl	8004c28 <memcmp>
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d1ea      	bne.n	80038c0 <ProcessCommand+0x20>
            *len = (text - start) + size; //how much of chars we was used
 80038ea:	eba8 030b 	sub.w	r3, r8, fp
 80038ee:	441e      	add	r6, r3
 80038f0:	f88a 6000 	strb.w	r6, [sl]
            gg_cmd = &SMS_CMDs[i];
 80038f4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80038f8:	00bb      	lsls	r3, r7, #2
 80038fa:	4a10      	ldr	r2, [pc, #64]	; (800393c <ProcessCommand+0x9c>)
 80038fc:	eb02 0903 	add.w	r9, r2, r3
        if (gg_cmd != NULL)
 8003900:	f1b9 0f00 	cmp.w	r9, #0
 8003904:	d111      	bne.n	800392a <ProcessCommand+0x8a>
        text++;
 8003906:	f108 0801 	add.w	r8, r8, #1
 	while (text != NULL)
 800390a:	f1b8 0f00 	cmp.w	r8, #0
 800390e:	d00a      	beq.n	8003926 <ProcessCommand+0x86>
     if ((token =  strpbrk(text,"; "))!=NULL)
 8003910:	490b      	ldr	r1, [pc, #44]	; (8003940 <ProcessCommand+0xa0>)
 8003912:	4640      	mov	r0, r8
 8003914:	f001 fe1a 	bl	800554c <strpbrk>
 8003918:	2800      	cmp	r0, #0
 800391a:	d0cc      	beq.n	80038b6 <ProcessCommand+0x16>
     size = (token - text); else size = strlen(text);    //size of parametr to token
 800391c:	eba0 0608 	sub.w	r6, r0, r8
        if (size == 0) return NULL;  //End sms
 8003920:	b136      	cbz	r6, 8003930 <ProcessCommand+0x90>
       i=0;
 8003922:	2400      	movs	r4, #0
 8003924:	e7ce      	b.n	80038c4 <ProcessCommand+0x24>
 	return NULL;
 8003926:	f04f 0900 	mov.w	r9, #0
 }
 800392a:	4648      	mov	r0, r9
 800392c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (size == 0) return NULL;  //End sms
 8003930:	f04f 0900 	mov.w	r9, #0
 8003934:	e7f9      	b.n	800392a <ProcessCommand+0x8a>
 8003936:	bf00      	nop
 8003938:	08006fa4 	.word	0x08006fa4
 800393c:	08007070 	.word	0x08007070
 8003940:	08006fc4 	.word	0x08006fc4

08003944 <GetVer>:
 }
 8003944:	4800      	ldr	r0, [pc, #0]	; (8003948 <GetVer+0x4>)
 8003946:	4770      	bx	lr
 8003948:	08006f94 	.word	0x08006f94

0800394c <GGR_GetVer>:
 	if (buffer != NULL )
 800394c:	b190      	cbz	r0, 8003974 <GGR_GetVer+0x28>
 {
 800394e:	b538      	push	{r3, r4, r5, lr}
 8003950:	4614      	mov	r4, r2
 		buffer = strcpyEx( strcpyEx( strcpyEx( buffer,
 8003952:	4909      	ldr	r1, [pc, #36]	; (8003978 <GGR_GetVer+0x2c>)
 8003954:	f001 f8db 	bl	8004b0e <strcpyEx>
 8003958:	4605      	mov	r5, r0
 			GetVer()),
 800395a:	f7ff fff3 	bl	8003944 <GetVer>
 		buffer = strcpyEx( strcpyEx( strcpyEx( buffer,
 800395e:	4601      	mov	r1, r0
 8003960:	4628      	mov	r0, r5
 8003962:	f001 f8d4 	bl	8004b0e <strcpyEx>
 8003966:	4905      	ldr	r1, [pc, #20]	; (800397c <GGR_GetVer+0x30>)
 8003968:	f001 f8d1 	bl	8004b0e <strcpyEx>
 	   *sms = true;
 800396c:	2301      	movs	r3, #1
 800396e:	7023      	strb	r3, [r4, #0]
 		return E_OK;
 8003970:	2000      	movs	r0, #0
 }
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 	return E_ERROR;
 8003974:	2001      	movs	r0, #1
 }
 8003976:	4770      	bx	lr
 8003978:	08006f58 	.word	0x08006f58
 800397c:	08006f5c 	.word	0x08006f5c

08003980 <CMD_Parsing>:




 uint8_t CMD_Parsing (char * SMS_ptr,char * outbuf,uint8_t src)
 {
 8003980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003982:	b083      	sub	sp, #12
 8003984:	4604      	mov	r4, r0
 8003986:	460e      	mov	r6, r1
	 char * token, *SMS_ptr_send;
	 bool is_text, send, is_set = false;
	 uint8_t ntoken, flash_cmd = 0;
	 const SMS_Command_t *cmds;
	 SMS_ptr_send = outbuf;
	 if (src == 0xFE) set_new.source = source_configtool; else
 8003988:	2afe      	cmp	r2, #254	; 0xfe
 800398a:	d005      	beq.n	8003998 <CMD_Parsing+0x18>
		 if (src == 0xFD) set_new.source = source_tcp;
 800398c:	2afd      	cmp	r2, #253	; 0xfd
 800398e:	d114      	bne.n	80039ba <CMD_Parsing+0x3a>
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <CMD_Parsing+0x80>)
 8003992:	2202      	movs	r2, #2
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e010      	b.n	80039ba <CMD_Parsing+0x3a>
	 if (src == 0xFE) set_new.source = source_configtool; else
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <CMD_Parsing+0x80>)
 800399a:	2201      	movs	r2, #1
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	e00c      	b.n	80039ba <CMD_Parsing+0x3a>
		  send = 0;

		  if (cmds->Response != NULL)
		    (cmds->Response) (SMS_ptr_send, ntoken, &send, cmds);

		  SMS_ptr_send += strlen (SMS_ptr_send);
 80039a0:	4630      	mov	r0, r6
 80039a2:	f7fc fbd5 	bl	8000150 <strlen>
 80039a6:	4406      	add	r6, r0
		  set_new.param_ID = 0;
 80039a8:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <CMD_Parsing+0x80>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	805a      	strh	r2, [r3, #2]
		}
	      SMS_ptr = TokenNext (SMS_ptr, ';');//strpbrk(SMS_ptr," ;");
 80039ae:	213b      	movs	r1, #59	; 0x3b
 80039b0:	4620      	mov	r0, r4
 80039b2:	f001 f89c 	bl	8004aee <TokenNext>
			DEBUG("SMS send\n\r");
		    };
		};

	    }
	  while ((SMS_ptr != NULL));
 80039b6:	4604      	mov	r4, r0
 80039b8:	b1f8      	cbz	r0, 80039fa <CMD_Parsing+0x7a>
	      cmds = ProcessCommand (SMS_ptr, 0, &ntoken);
 80039ba:	f10d 0206 	add.w	r2, sp, #6
 80039be:	2100      	movs	r1, #0
 80039c0:	4620      	mov	r0, r4
 80039c2:	f7ff ff6d 	bl	80038a0 <ProcessCommand>
	      if (cmds == NULL)
 80039c6:	4605      	mov	r5, r0
 80039c8:	2800      	cmp	r0, #0
 80039ca:	d0f0      	beq.n	80039ae <CMD_Parsing+0x2e>
		  SMS_ptr += ntoken;
 80039cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80039d0:	441c      	add	r4, r3
		  if (cmds->Handler != NULL)
 80039d2:	68c3      	ldr	r3, [r0, #12]
 80039d4:	b11b      	cbz	r3, 80039de <CMD_Parsing+0x5e>
		      if ((cmds->Handler) (SMS_ptr, cmds, true) == E_OK)
 80039d6:	2201      	movs	r2, #1
 80039d8:	4601      	mov	r1, r0
 80039da:	4620      	mov	r0, r4
 80039dc:	4798      	blx	r3
		  send = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	f88d 3007 	strb.w	r3, [sp, #7]
		  if (cmds->Response != NULL)
 80039e4:	692f      	ldr	r7, [r5, #16]
 80039e6:	2f00      	cmp	r7, #0
 80039e8:	d0da      	beq.n	80039a0 <CMD_Parsing+0x20>
		    (cmds->Response) (SMS_ptr_send, ntoken, &send, cmds);
 80039ea:	462b      	mov	r3, r5
 80039ec:	f10d 0207 	add.w	r2, sp, #7
 80039f0:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80039f4:	4630      	mov	r0, r6
 80039f6:	47b8      	blx	r7
 80039f8:	e7d2      	b.n	80039a0 <CMD_Parsing+0x20>
 }
 80039fa:	b003      	add	sp, #12
 80039fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20004278 	.word	0x20004278

08003a04 <get_valve_state>:
{
	//static uint32_t valve_close_tick=0;

#ifdef HW_VEHICLE

	if (IN.valid_valve ==1)
 8003a04:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <get_valve_state+0x3c>)
 8003a06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a0a:	f013 0f04 	tst.w	r3, #4
 8003a0e:	d010      	beq.n	8003a32 <get_valve_state+0x2e>
	{
	//if ((data.Ain1 > 10000) )
	//{
		if (IN.valve_state == state_on && IN.pump_state == state_on)  return (state_on); else
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <get_valve_state+0x3c>)
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a1c:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <get_valve_state+0x40>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00b      	beq.n	8003a3a <get_valve_state+0x36>
			if (IN.valve_state == state_off)return (state_off);
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <get_valve_state+0x3c>)
 8003a24:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
 8003a28:	2801      	cmp	r0, #1
 8003a2a:	d001      	beq.n	8003a30 <get_valve_state+0x2c>
		return (state_unknown);
 8003a2c:	2000      	movs	r0, #0
		}

#endif

	return (state_unknown);
}
 8003a2e:	4770      	bx	lr
 8003a30:	4770      	bx	lr
		return (data.valve_state);	//return last valid state
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <get_valve_state+0x44>)
 8003a34:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8003a38:	4770      	bx	lr
		if (IN.valve_state == state_on && IN.pump_state == state_on)  return (state_on); else
 8003a3a:	2002      	movs	r0, #2
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	200043d8 	.word	0x200043d8
 8003a44:	00020200 	.word	0x00020200
 8003a48:	20004390 	.word	0x20004390

08003a4c <Disp_imp2litr>:
			date.RTC_Minutes);
#endif
}

void Disp_imp2litr(uint32_t cnt)
{
 8003a4c:	b510      	push	{r4, lr}
	static uint32_t c, litr = 0;
	double l;

	if (cnt != c)
 8003a4e:	4b17      	ldr	r3, [pc, #92]	; (8003aac <Disp_imp2litr+0x60>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4283      	cmp	r3, r0
 8003a54:	d012      	beq.n	8003a7c <Disp_imp2litr+0x30>
	{
		c = cnt;
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <Disp_imp2litr+0x60>)
 8003a58:	6018      	str	r0, [r3, #0]
		l = c / settings.cnt_pulses_per_litre;
 8003a5a:	f7fc fcc3 	bl	80003e4 <__aeabi_ui2d>
 8003a5e:	4c14      	ldr	r4, [pc, #80]	; (8003ab0 <Disp_imp2litr+0x64>)
 8003a60:	f8d4 2063 	ldr.w	r2, [r4, #99]	; 0x63
 8003a64:	f8d4 3067 	ldr.w	r3, [r4, #103]	; 0x67
 8003a68:	f7fc fe60 	bl	800072c <__aeabi_ddiv>
		l *= 10;
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <Disp_imp2litr+0x68>)
 8003a70:	f7fc fd32 	bl	80004d8 <__aeabi_dmul>
		litr = (uint32_t) l;
 8003a74:	f7fd f808 	bl	8000a88 <__aeabi_d2uiz>
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <Disp_imp2litr+0x6c>)
 8003a7a:	6018      	str	r0, [r3, #0]
	};

	if (litr < 10)
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <Disp_imp2litr+0x6c>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	2a09      	cmp	r2, #9
 8003a82:	d90e      	bls.n	8003aa2 <Disp_imp2litr+0x56>
		sprintf((char*) &Disp.d[0], "      0%1u", (unsigned int) litr);
	else
		sprintf((char*) &Disp.d[0], "%8u", (unsigned int) litr);
 8003a84:	490d      	ldr	r1, [pc, #52]	; (8003abc <Disp_imp2litr+0x70>)
 8003a86:	480e      	ldr	r0, [pc, #56]	; (8003ac0 <Disp_imp2litr+0x74>)
 8003a88:	f001 fd40 	bl	800550c <siprintf>
	Disp.dot = 0x40;
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <Disp_imp2litr+0x74>)
 8003a8e:	2240      	movs	r2, #64	; 0x40
 8003a90:	765a      	strb	r2, [r3, #25]
	xQueueSend(Data_out_cnt,&litr,0);
 8003a92:	2300      	movs	r3, #0
 8003a94:	461a      	mov	r2, r3
 8003a96:	4908      	ldr	r1, [pc, #32]	; (8003ab8 <Disp_imp2litr+0x6c>)
 8003a98:	480a      	ldr	r0, [pc, #40]	; (8003ac4 <Disp_imp2litr+0x78>)
 8003a9a:	6800      	ldr	r0, [r0, #0]
 8003a9c:	f7fd fbd2 	bl	8001244 <xQueueGenericSend>
}
 8003aa0:	bd10      	pop	{r4, pc}
		sprintf((char*) &Disp.d[0], "      0%1u", (unsigned int) litr);
 8003aa2:	4909      	ldr	r1, [pc, #36]	; (8003ac8 <Disp_imp2litr+0x7c>)
 8003aa4:	4806      	ldr	r0, [pc, #24]	; (8003ac0 <Disp_imp2litr+0x74>)
 8003aa6:	f001 fd31 	bl	800550c <siprintf>
 8003aaa:	e7ef      	b.n	8003a8c <Disp_imp2litr+0x40>
 8003aac:	20003b58 	.word	0x20003b58
 8003ab0:	200042f0 	.word	0x200042f0
 8003ab4:	40240000 	.word	0x40240000
 8003ab8:	20003b5c 	.word	0x20003b5c
 8003abc:	080071cc 	.word	0x080071cc
 8003ac0:	20004374 	.word	0x20004374
 8003ac4:	20003b4c 	.word	0x20003b4c
 8003ac8:	080071c0 	.word	0x080071c0

08003acc <Get_Global>:
 *  Function Name	:	Get_Global
 * Description		:	calculate global counter from pulses in EX
 *
 *****************************************************************************************/
uint32_t Get_Global(uint32_t ex_g)
{
 8003acc:	b5d0      	push	{r4, r6, r7, lr}
	uint32_t out;
	double x;
	//out = (ex - ex_start) / ppl

	x = (ex_g - settings.cnt_EX_trim);
 8003ace:	4c1e      	ldr	r4, [pc, #120]	; (8003b48 <Get_Global+0x7c>)
 8003ad0:	f8d4 306b 	ldr.w	r3, [r4, #107]	; 0x6b
 8003ad4:	1ac0      	subs	r0, r0, r3
 8003ad6:	f7fc fc85 	bl	80003e4 <__aeabi_ui2d>
	x = x / settings.cnt_pulses_per_litre;
 8003ada:	f8d4 2063 	ldr.w	r2, [r4, #99]	; 0x63
 8003ade:	f8d4 3067 	ldr.w	r3, [r4, #103]	; 0x67
 8003ae2:	f7fc fe23 	bl	800072c <__aeabi_ddiv>
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	460f      	mov	r7, r1
	x += settings.cnt_start;
 8003aea:	f8d4 006f 	ldr.w	r0, [r4, #111]	; 0x6f
 8003aee:	f7fc fc79 	bl	80003e4 <__aeabi_ui2d>
 8003af2:	4632      	mov	r2, r6
 8003af4:	463b      	mov	r3, r7
 8003af6:	f7fc fb39 	bl	800016c <__adddf3>

	out = x;
 8003afa:	f7fc ffc5 	bl	8000a88 <__aeabi_d2uiz>
	if (out >=100000000 )
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <Get_Global+0x80>)
 8003b00:	4298      	cmp	r0, r3
 8003b02:	d905      	bls.n	8003b10 <Get_Global+0x44>
		out -=100000000;
 8003b04:	f100 407a 	add.w	r0, r0, #4194304000	; 0xfa000000
 8003b08:	f500 2021 	add.w	r0, r0, #659456	; 0xa1000
 8003b0c:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
	if (out >=100000000 )
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <Get_Global+0x80>)
 8003b12:	4298      	cmp	r0, r3
 8003b14:	d905      	bls.n	8003b22 <Get_Global+0x56>
			out -=100000000;
 8003b16:	f100 407a 	add.w	r0, r0, #4194304000	; 0xfa000000
 8003b1a:	f500 2021 	add.w	r0, r0, #659456	; 0xa1000
 8003b1e:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
	if (out >=100000000 )
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <Get_Global+0x80>)
 8003b24:	4298      	cmp	r0, r3
 8003b26:	d905      	bls.n	8003b34 <Get_Global+0x68>
			out -=100000000;
 8003b28:	f100 407a 	add.w	r0, r0, #4194304000	; 0xfa000000
 8003b2c:	f500 2021 	add.w	r0, r0, #659456	; 0xa1000
 8003b30:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
	if (out >=100000000 )
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <Get_Global+0x80>)
 8003b36:	4298      	cmp	r0, r3
 8003b38:	d905      	bls.n	8003b46 <Get_Global+0x7a>
			out -=100000000;
 8003b3a:	f100 407a 	add.w	r0, r0, #4194304000	; 0xfa000000
 8003b3e:	f500 2021 	add.w	r0, r0, #659456	; 0xa1000
 8003b42:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
	return (uint32_t)(out);

};
 8003b46:	bdd0      	pop	{r4, r6, r7, pc}
 8003b48:	200042f0 	.word	0x200042f0
 8003b4c:	05f5e0ff 	.word	0x05f5e0ff

08003b50 <Disp_Global>:
 *  Function Name	:	Disp_Global
 * Description		:	Convert global liters to string end send to display out
 *
 *****************************************************************************************/
void Disp_Global(uint32_t ex_g)
{
 8003b50:	b530      	push	{r4, r5, lr}
 8003b52:	b083      	sub	sp, #12
	uint32_t x;
	x = Get_Global(ex_g);
 8003b54:	f7ff ffba 	bl	8003acc <Get_Global>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	ac02      	add	r4, sp, #8
 8003b5c:	f844 0d04 	str.w	r0, [r4, #-4]!
	sprintf((char*) &Disp.d[0], "%8u", (unsigned int) x);
 8003b60:	4d07      	ldr	r5, [pc, #28]	; (8003b80 <Disp_Global+0x30>)
 8003b62:	4908      	ldr	r1, [pc, #32]	; (8003b84 <Disp_Global+0x34>)
 8003b64:	4628      	mov	r0, r5
 8003b66:	f001 fcd1 	bl	800550c <siprintf>

	Disp.dot = 0x00;
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	766a      	strb	r2, [r5, #25]
	xQueueSend(Data_out_cnt,&x,0);
 8003b6e:	4613      	mov	r3, r2
 8003b70:	4621      	mov	r1, r4
 8003b72:	4805      	ldr	r0, [pc, #20]	; (8003b88 <Disp_Global+0x38>)
 8003b74:	6800      	ldr	r0, [r0, #0]
 8003b76:	f7fd fb65 	bl	8001244 <xQueueGenericSend>
};
 8003b7a:	b003      	add	sp, #12
 8003b7c:	bd30      	pop	{r4, r5, pc}
 8003b7e:	bf00      	nop
 8003b80:	20004374 	.word	0x20004374
 8003b84:	080071cc 	.word	0x080071cc
 8003b88:	20003b4c 	.word	0x20003b4c

08003b8c <Pr_start>:
/*******************************************************************
 * 		Prepare to starting refueling
 *******************************************************************/
void Pr_start(void)
{
	if (data.G_CNT_EX_stop == 0 && data.G_CNT_EX_start == 0)
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <Pr_start+0x1c>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	b92b      	cbnz	r3, 8003b9e <Pr_start+0x12>
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <Pr_start+0x1c>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	b913      	cbnz	r3, 8003b9e <Pr_start+0x12>
	{
		data.cnt_disp = 0;//reset counter
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <Pr_start+0x1c>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	619a      	str	r2, [r3, #24]
	};

	data.state = SysState_refueling;
 8003b9e:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <Pr_start+0x1c>)
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8003ba6:	4770      	bx	lr
 8003ba8:	20004390 	.word	0x20004390

08003bac <Pr_stop>:
/******************************************************************
 * 		Prepare to stopping refueling
 ******************************************************************/
void Pr_stop (void)
{
	data.state = SysState_stop;
 8003bac:	4b02      	ldr	r3, [pc, #8]	; (8003bb8 <Pr_stop+0xc>)
 8003bae:	2204      	movs	r2, #4
 8003bb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20004390 	.word	0x20004390

08003bbc <vLogicTask>:
{
 8003bbc:	b500      	push	{lr}
 8003bbe:	b085      	sub	sp, #20
	__IO uint32_t previous_cnt=0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	9302      	str	r3, [sp, #8]
	to_display.new_state = 0;
 8003bc4:	4a6b      	ldr	r2, [pc, #428]	; (8003d74 <vLogicTask+0x1b8>)
 8003bc6:	7113      	strb	r3, [r2, #4]
	to_display.pulses = 0;
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e05b      	b.n	8003c84 <vLogicTask+0xc8>
					couner_stable++; //counter was  not change
 8003bcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f88d 300f 	strb.w	r3, [sp, #15]
 8003bd8:	e076      	b.n	8003cc8 <vLogicTask+0x10c>
			vTaskDelay(100);
 8003bda:	2064      	movs	r0, #100	; 0x64
 8003bdc:	f7fd fffe 	bl	8001bdc <vTaskDelay>
		switch (data.state)
 8003be0:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <vLogicTask+0x1bc>)
 8003be2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	d83f      	bhi.n	8003c6a <vLogicTask+0xae>
 8003bea:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003bee:	0006      	.short	0x0006
 8003bf0:	00320025 	.word	0x00320025
 8003bf4:	00b5003e 	.word	0x00b5003e
 8003bf8:	00bf      	.short	0x00bf
			if (IN.valid_CNT == 1) //wait valid counter data
 8003bfa:	4b60      	ldr	r3, [pc, #384]	; (8003d7c <vLogicTask+0x1c0>)
 8003bfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c00:	f013 0f01 	tst.w	r3, #1
 8003c04:	d00e      	beq.n	8003c24 <vLogicTask+0x68>
				if ((IN.G_CNT_EX != 0) && (data.G_CNT_EX_stop == 0))
 8003c06:	4b5d      	ldr	r3, [pc, #372]	; (8003d7c <vLogicTask+0x1c0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	b123      	cbz	r3, 8003c16 <vLogicTask+0x5a>
 8003c0c:	4a5a      	ldr	r2, [pc, #360]	; (8003d78 <vLogicTask+0x1bc>)
 8003c0e:	6892      	ldr	r2, [r2, #8]
 8003c10:	b90a      	cbnz	r2, 8003c16 <vLogicTask+0x5a>
					data.G_CNT_EX_stop = IN.G_CNT_EX;//after power on, save counter as last stop counter
 8003c12:	4a59      	ldr	r2, [pc, #356]	; (8003d78 <vLogicTask+0x1bc>)
 8003c14:	6093      	str	r3, [r2, #8]
				data.state = SysState_normal;	//change system status
 8003c16:	4b58      	ldr	r3, [pc, #352]	; (8003d78 <vLogicTask+0x1bc>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				counter_inreased = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f88d 300e 	strb.w	r3, [sp, #14]
			if (settings.mode == 1) data.state = SysState_slave_mode;
 8003c24:	4b56      	ldr	r3, [pc, #344]	; (8003d80 <vLogicTask+0x1c4>)
 8003c26:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d11d      	bne.n	8003c6a <vLogicTask+0xae>
 8003c2e:	4b52      	ldr	r3, [pc, #328]	; (8003d78 <vLogicTask+0x1bc>)
 8003c30:	2205      	movs	r2, #5
 8003c32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8003c36:	e018      	b.n	8003c6a <vLogicTask+0xae>
			if (get_valve_state() == state_on
 8003c38:	f7ff fee4 	bl	8003a04 <get_valve_state>
 8003c3c:	2802      	cmp	r0, #2
 8003c3e:	d114      	bne.n	8003c6a <vLogicTask+0xae>
				data.valve_state = state_on;
 8003c40:	2302      	movs	r3, #2
 8003c42:	4a4d      	ldr	r2, [pc, #308]	; (8003d78 <vLogicTask+0x1bc>)
 8003c44:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
				to_display.new_state = Display_start_refueling;
 8003c48:	4a4a      	ldr	r2, [pc, #296]	; (8003d74 <vLogicTask+0x1b8>)
 8003c4a:	7113      	strb	r3, [r2, #4]
				Pr_start();
 8003c4c:	f7ff ff9e 	bl	8003b8c <Pr_start>
 8003c50:	e00b      	b.n	8003c6a <vLogicTask+0xae>
			data.cnt_disp = data.G_CNT_EX - data.G_CNT_EX_stop;
 8003c52:	4b49      	ldr	r3, [pc, #292]	; (8003d78 <vLogicTask+0x1bc>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	6899      	ldr	r1, [r3, #8]
 8003c58:	1a52      	subs	r2, r2, r1
 8003c5a:	619a      	str	r2, [r3, #24]
			if (get_valve_state() == state_off
 8003c5c:	f7ff fed2 	bl	8003a04 <get_valve_state>
 8003c60:	2801      	cmp	r0, #1
 8003c62:	d06a      	beq.n	8003d3a <vLogicTask+0x17e>
			to_display.new_state = Display_refueling;
 8003c64:	4b43      	ldr	r3, [pc, #268]	; (8003d74 <vLogicTask+0x1b8>)
 8003c66:	2203      	movs	r2, #3
 8003c68:	711a      	strb	r2, [r3, #4]
		to_display.pulses = data.cnt_disp;
 8003c6a:	4b43      	ldr	r3, [pc, #268]	; (8003d78 <vLogicTask+0x1bc>)
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	4941      	ldr	r1, [pc, #260]	; (8003d74 <vLogicTask+0x1b8>)
 8003c70:	600b      	str	r3, [r1, #0]
		xQueueSend(CNT_disp_queue, &to_display,10);
 8003c72:	2300      	movs	r3, #0
 8003c74:	220a      	movs	r2, #10
 8003c76:	4843      	ldr	r0, [pc, #268]	; (8003d84 <vLogicTask+0x1c8>)
 8003c78:	6800      	ldr	r0, [r0, #0]
 8003c7a:	f7fd fae3 	bl	8001244 <xQueueGenericSend>
		vTaskDelay(10);
 8003c7e:	200a      	movs	r0, #10
 8003c80:	f7fd ffac 	bl	8001bdc <vTaskDelay>
		if (pdPASS == xQueueReceive(Data_IN_queue, &IN, 2500))
 8003c84:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003c88:	493c      	ldr	r1, [pc, #240]	; (8003d7c <vLogicTask+0x1c0>)
 8003c8a:	4b3f      	ldr	r3, [pc, #252]	; (8003d88 <vLogicTask+0x1cc>)
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	f7fd fb9d 	bl	80013cc <xQueueReceive>
 8003c92:	2801      	cmp	r0, #1
 8003c94:	d1a1      	bne.n	8003bda <vLogicTask+0x1e>
			if (IN.valid_CNT == 1)
 8003c96:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <vLogicTask+0x1c0>)
 8003c98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c9c:	f013 0f01 	tst.w	r3, #1
 8003ca0:	d01f      	beq.n	8003ce2 <vLogicTask+0x126>
				if (IN.G_CNT_EX != data.G_CNT_EX)
 8003ca2:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <vLogicTask+0x1c0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a34      	ldr	r2, [pc, #208]	; (8003d78 <vLogicTask+0x1bc>)
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d08e      	beq.n	8003bcc <vLogicTask+0x10>
					data.G_CNT_EX = IN.G_CNT_EX; //Update global counter
 8003cae:	4a32      	ldr	r2, [pc, #200]	; (8003d78 <vLogicTask+0x1bc>)
 8003cb0:	6013      	str	r3, [r2, #0]
					if (data.G_CNT_EX > (previous_cnt+2)) //the counter has increased by more than 2 pulses
 8003cb2:	9a02      	ldr	r2, [sp, #8]
 8003cb4:	3202      	adds	r2, #2
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d903      	bls.n	8003cc2 <vLogicTask+0x106>
						previous_cnt = data.G_CNT_EX;
 8003cba:	9302      	str	r3, [sp, #8]
						counter_inreased = 1;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f88d 300e 	strb.w	r3, [sp, #14]
					couner_stable = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f88d 300f 	strb.w	r3, [sp, #15]
				G_cnt = Get_Global(data.G_CNT_EX);
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <vLogicTask+0x1bc>)
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	f7ff fefe 	bl	8003acc <Get_Global>
 8003cd0:	a904      	add	r1, sp, #16
 8003cd2:	f841 0d0c 	str.w	r0, [r1, #-12]!
				xQueueSend(Data_out_G_cnt,&G_cnt,0);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	461a      	mov	r2, r3
 8003cda:	482c      	ldr	r0, [pc, #176]	; (8003d8c <vLogicTask+0x1d0>)
 8003cdc:	6800      	ldr	r0, [r0, #0]
 8003cde:	f7fd fab1 	bl	8001244 <xQueueGenericSend>
			if (IN.valid_timer == 1)
 8003ce2:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <vLogicTask+0x1c0>)
 8003ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ce8:	f013 0f08 	tst.w	r3, #8
 8003cec:	d003      	beq.n	8003cf6 <vLogicTask+0x13a>
				data.time_TR = IN.time_TR;
 8003cee:	4a23      	ldr	r2, [pc, #140]	; (8003d7c <vLogicTask+0x1c0>)
 8003cf0:	6a11      	ldr	r1, [r2, #32]
 8003cf2:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <vLogicTask+0x1bc>)
 8003cf4:	62d1      	str	r1, [r2, #44]	; 0x2c
			if (IN.valid_AIN == 1)
 8003cf6:	f013 0f02 	tst.w	r3, #2
 8003cfa:	d007      	beq.n	8003d0c <vLogicTask+0x150>
				data.Ain1 = IN.Ain1;
 8003cfc:	491f      	ldr	r1, [pc, #124]	; (8003d7c <vLogicTask+0x1c0>)
 8003cfe:	6848      	ldr	r0, [r1, #4]
 8003d00:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <vLogicTask+0x1bc>)
 8003d02:	60d0      	str	r0, [r2, #12]
				data.Ain2 = IN.Ain2;
 8003d04:	6888      	ldr	r0, [r1, #8]
 8003d06:	6110      	str	r0, [r2, #16]
				data.Ain3 = IN.Ain3;
 8003d08:	68c9      	ldr	r1, [r1, #12]
 8003d0a:	6151      	str	r1, [r2, #20]
			if (IN.valid_card == 1)
 8003d0c:	f013 0f10 	tst.w	r3, #16
 8003d10:	d005      	beq.n	8003d1e <vLogicTask+0x162>
				memcpy(data.CARD, IN.CARD, 5);
 8003d12:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <vLogicTask+0x1bc>)
 8003d14:	491e      	ldr	r1, [pc, #120]	; (8003d90 <vLogicTask+0x1d4>)
 8003d16:	c903      	ldmia	r1, {r0, r1}
 8003d18:	61d0      	str	r0, [r2, #28]
 8003d1a:	f882 1020 	strb.w	r1, [r2, #32]
			if (IN.valid_master_disp ==1)
 8003d1e:	f013 0f20 	tst.w	r3, #32
 8003d22:	f43f af5d 	beq.w	8003be0 <vLogicTask+0x24>
				memcpy(data.display_d ,IN.master_d,8);
 8003d26:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <vLogicTask+0x1bc>)
 8003d28:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <vLogicTask+0x1c0>)
 8003d2a:	f853 1f15 	ldr.w	r1, [r3, #21]!
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f8c2 1021 	str.w	r1, [r2, #33]	; 0x21
 8003d34:	f8c2 3025 	str.w	r3, [r2, #37]	; 0x25
 8003d38:	e752      	b.n	8003be0 <vLogicTask+0x24>
					&& couner_stable > 5) //Stop refueling
 8003d3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b05      	cmp	r3, #5
 8003d42:	d98f      	bls.n	8003c64 <vLogicTask+0xa8>
				data.valve_state = state_off;	//change status
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <vLogicTask+0x1bc>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				to_display.new_state = Display_end_refueling;
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <vLogicTask+0x1b8>)
 8003d4e:	2204      	movs	r2, #4
 8003d50:	711a      	strb	r2, [r3, #4]
				Pr_stop();
 8003d52:	f7ff ff2b 	bl	8003bac <Pr_stop>
 8003d56:	e785      	b.n	8003c64 <vLogicTask+0xa8>
			data.state = SysState_normal;
 8003d58:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <vLogicTask+0x1bc>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			data.G_CNT_EX_stop = data.G_CNT_EX;
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	609a      	str	r2, [r3, #8]
			to_display.new_state = Display_end_refueling;
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <vLogicTask+0x1b8>)
 8003d66:	2204      	movs	r2, #4
 8003d68:	711a      	strb	r2, [r3, #4]
			break;
 8003d6a:	e77e      	b.n	8003c6a <vLogicTask+0xae>
			to_display.new_state = Display_slave_mode;
 8003d6c:	4b01      	ldr	r3, [pc, #4]	; (8003d74 <vLogicTask+0x1b8>)
 8003d6e:	2206      	movs	r2, #6
 8003d70:	711a      	strb	r2, [r3, #4]
			break;
 8003d72:	e77a      	b.n	8003c6a <vLogicTask+0xae>
 8003d74:	20003b64 	.word	0x20003b64
 8003d78:	20004390 	.word	0x20004390
 8003d7c:	200043d8 	.word	0x200043d8
 8003d80:	200042f0 	.word	0x200042f0
 8003d84:	20003b40 	.word	0x20003b40
 8003d88:	20003b44 	.word	0x20003b44
 8003d8c:	20003b48 	.word	0x20003b48
 8003d90:	200043e8 	.word	0x200043e8

08003d94 <RTC_GetDateTime>:
 */

// Get current date
void RTC_GetDateTime(uint32_t RTC_Counter,
		RTC_DateTimeTypeDef* RTC_DateTimeStruct)
{
 8003d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d98:	4681      	mov	r9, r0
 8003d9a:	4688      	mov	r8, r1
	int sec = 0;
	uint64_t jd = 0;

	uint64_t jdn = 0;

	jd = ((RTC_Counter + 43200) / (86400 >> 1)) + (2440587 << 1) + 1;
 8003d9c:	f500 4428 	add.w	r4, r0, #43008	; 0xa800
 8003da0:	34c0      	adds	r4, #192	; 0xc0
 8003da2:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <RTC_GetDateTime+0x108>)
 8003da4:	fba3 1204 	umull	r1, r2, r3, r4
 8003da8:	4c3d      	ldr	r4, [pc, #244]	; (8003ea0 <RTC_GetDateTime+0x10c>)
 8003daa:	eb04 34d2 	add.w	r4, r4, r2, lsr #15
 8003dae:	2500      	movs	r5, #0
	jdn = jd >> 1;
 8003db0:	086d      	lsrs	r5, r5, #1
 8003db2:	ea4f 0434 	mov.w	r4, r4, rrx

	time = RTC_Counter;
	t1 = time / 60;
 8003db6:	4e3b      	ldr	r6, [pc, #236]	; (8003ea4 <RTC_GetDateTime+0x110>)
 8003db8:	fba6 2600 	umull	r2, r6, r6, r0
 8003dbc:	0976      	lsrs	r6, r6, #5
	sec = time - t1 * 60;

	time = t1;
	t1 = time / 60;
 8003dbe:	4f3a      	ldr	r7, [pc, #232]	; (8003ea8 <RTC_GetDateTime+0x114>)
 8003dc0:	fba7 2700 	umull	r2, r7, r7, r0
 8003dc4:	0aff      	lsrs	r7, r7, #11
	min = time - t1 * 60;
 8003dc6:	ebc7 1207 	rsb	r2, r7, r7, lsl #4
 8003dca:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8003dce:	eba6 0a0a 	sub.w	sl, r6, sl

	time = t1;
	t1 = time / 24;
 8003dd2:	fba3 2300 	umull	r2, r3, r3, r0
 8003dd6:	0c1b      	lsrs	r3, r3, #16
	hour = time - t1 * 24;
 8003dd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003ddc:	00da      	lsls	r2, r3, #3
 8003dde:	1abf      	subs	r7, r7, r2

	wday = jdn % 7;
 8003de0:	2207      	movs	r2, #7
 8003de2:	2300      	movs	r3, #0
 8003de4:	4620      	mov	r0, r4
 8003de6:	4629      	mov	r1, r5
 8003de8:	f7fc fe6e 	bl	8000ac8 <__aeabi_uldivmod>

	a = jdn + 32044;
 8003dec:	f504 44fa 	add.w	r4, r4, #32000	; 0x7d00
 8003df0:	342c      	adds	r4, #44	; 0x2c
	b = (4 * a + 3) / 146097;
 8003df2:	00a0      	lsls	r0, r4, #2
 8003df4:	3003      	adds	r0, #3
 8003df6:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <RTC_GetDateTime+0x118>)
 8003df8:	fba3 3000 	umull	r3, r0, r3, r0
 8003dfc:	0bc0      	lsrs	r0, r0, #15
	c = a - (146097 * b) / 4;
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	; (8003eb0 <RTC_GetDateTime+0x11c>)
 8003e00:	fb03 f300 	mul.w	r3, r3, r0
 8003e04:	eba4 0493 	sub.w	r4, r4, r3, lsr #2
	d = (4 * c + 3) / 1461;
 8003e08:	00a5      	lsls	r5, r4, #2
 8003e0a:	3503      	adds	r5, #3
 8003e0c:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <RTC_GetDateTime+0x120>)
 8003e0e:	fba3 3505 	umull	r3, r5, r3, r5
 8003e12:	09ed      	lsrs	r5, r5, #7
	e = c - (1461 * d) / 4;
 8003e14:	f240 53b5 	movw	r3, #1461	; 0x5b5
 8003e18:	fb03 f305 	mul.w	r3, r3, r5
 8003e1c:	eba4 0493 	sub.w	r4, r4, r3, lsr #2
	m = (5 * e + 2) / 153;
 8003e20:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003e24:	3302      	adds	r3, #2
 8003e26:	4924      	ldr	r1, [pc, #144]	; (8003eb8 <RTC_GetDateTime+0x124>)
 8003e28:	fba1 c103 	umull	ip, r1, r1, r3
 8003e2c:	09c9      	lsrs	r1, r1, #7
	mday = e - (153 * m + 2) / 5 + 1;
 8003e2e:	eb01 0cc1 	add.w	ip, r1, r1, lsl #3
 8003e32:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8003e36:	f10c 0c02 	add.w	ip, ip, #2
 8003e3a:	f8df e080 	ldr.w	lr, [pc, #128]	; 8003ebc <RTC_GetDateTime+0x128>
 8003e3e:	fbae ec0c 	umull	lr, ip, lr, ip
 8003e42:	eba4 049c 	sub.w	r4, r4, ip, lsr #2
 8003e46:	3401      	adds	r4, #1
	mon = m + 3 - 12 * (m / 10);
 8003e48:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003ec0 <RTC_GetDateTime+0x12c>
 8003e4c:	fbac c303 	umull	ip, r3, ip, r3
 8003e50:	0a1b      	lsrs	r3, r3, #8
 8003e52:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 8003e56:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 8003e5a:	46e6      	mov	lr, ip
 8003e5c:	eba1 010c 	sub.w	r1, r1, ip
 8003e60:	3103      	adds	r1, #3
	year = 100 * b + d - 4800 + (m / 10);
 8003e62:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8003e66:	fb0c 5000 	mla	r0, ip, r0, r5
 8003e6a:	4403      	add	r3, r0
 8003e6c:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0

	RTC_DateTimeStruct->RTC_Year = year;
 8003e70:	f8a8 3006 	strh.w	r3, [r8, #6]
	RTC_DateTimeStruct->RTC_Month = mon;
 8003e74:	f888 1005 	strb.w	r1, [r8, #5]
	RTC_DateTimeStruct->RTC_Date = mday;
 8003e78:	f888 4003 	strb.w	r4, [r8, #3]
	RTC_DateTimeStruct->RTC_Hours = hour;
 8003e7c:	f888 7000 	strb.w	r7, [r8]
	RTC_DateTimeStruct->RTC_Minutes = min;
 8003e80:	f888 a001 	strb.w	sl, [r8, #1]
	RTC_DateTimeStruct->RTC_Seconds = sec;
 8003e84:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8003e88:	00b3      	lsls	r3, r6, #2
 8003e8a:	eba9 0903 	sub.w	r9, r9, r3
 8003e8e:	f888 9002 	strb.w	r9, [r8, #2]
	RTC_DateTimeStruct->RTC_Wday = wday;
 8003e92:	f888 2004 	strb.w	r2, [r8, #4]
}
 8003e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e9a:	bf00      	nop
 8003e9c:	c22e4507 	.word	0xc22e4507
 8003ea0:	004a7b17 	.word	0x004a7b17
 8003ea4:	88888889 	.word	0x88888889
 8003ea8:	91a2b3c5 	.word	0x91a2b3c5
 8003eac:	396b06bd 	.word	0x396b06bd
 8003eb0:	00023ab1 	.word	0x00023ab1
 8003eb4:	166db073 	.word	0x166db073
 8003eb8:	d62b80d7 	.word	0xd62b80d7
 8003ebc:	cccccccd 	.word	0xcccccccd
 8003ec0:	2ad5802b 	.word	0x2ad5802b

08003ec4 <Disp_time_to_display>:
{
 8003ec4:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	rawtime = RTC_GetCounter();
 8003ec8:	f7fe fce2 	bl	8002890 <RTC_GetCounter>
 8003ecc:	4683      	mov	fp, r0
 8003ece:	f04f 0c00 	mov.w	ip, #0
 8003ed2:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <Disp_time_to_display+0x94>)
 8003ed4:	e9c3 bc00 	strd	fp, ip, [r3]
	if (data.time_TR > 1565702549
 8003ed8:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <Disp_time_to_display+0x98>)
 8003eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003edc:	4b20      	ldr	r3, [pc, #128]	; (8003f60 <Disp_time_to_display+0x9c>)
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d915      	bls.n	8003f0e <Disp_time_to_display+0x4a>
			&& (data.time_TR > (rawtime + 60) || data.time_TR < (rawtime - 60)))
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f110 043c 	adds.w	r4, r0, #60	; 0x3c
 8003ee8:	f14c 0500 	adc.w	r5, ip, #0
 8003eec:	4294      	cmp	r4, r2
 8003eee:	eb75 0103 	sbcs.w	r1, r5, r3
 8003ef2:	db05      	blt.n	8003f00 <Disp_time_to_display+0x3c>
 8003ef4:	383c      	subs	r0, #60	; 0x3c
 8003ef6:	f14c 31ff 	adc.w	r1, ip, #4294967295	; 0xffffffff
 8003efa:	4282      	cmp	r2, r0
 8003efc:	418b      	sbcs	r3, r1
 8003efe:	da06      	bge.n	8003f0e <Disp_time_to_display+0x4a>
		PWR_BackupAccessCmd(ENABLE);
 8003f00:	2001      	movs	r0, #1
 8003f02:	f7fe fc9f 	bl	8002844 <PWR_BackupAccessCmd>
		RTC_SetCounter(data.time_TR);
 8003f06:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <Disp_time_to_display+0x98>)
 8003f08:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003f0a:	f7fe fcc9 	bl	80028a0 <RTC_SetCounter>
	RTC_GetDateTime(rawtime + (3600 * settings.timezone), &date);
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <Disp_time_to_display+0xa0>)
 8003f10:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8003f14:	4c10      	ldr	r4, [pc, #64]	; (8003f58 <Disp_time_to_display+0x94>)
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	4913      	ldr	r1, [pc, #76]	; (8003f68 <Disp_time_to_display+0xa4>)
 8003f1a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8003f1e:	fb00 3002 	mla	r0, r0, r2, r3
 8003f22:	f7ff ff37 	bl	8003d94 <RTC_GetDateTime>
	if ((rawtime & 0x01) !=0)
 8003f26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003f2a:	f002 0001 	and.w	r0, r2, #1
 8003f2e:	2100      	movs	r1, #0
 8003f30:	ea50 0301 	orrs.w	r3, r0, r1
 8003f34:	d10b      	bne.n	8003f4e <Disp_time_to_display+0x8a>
		Disp.dot = 0;
 8003f36:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <Disp_time_to_display+0xa8>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	765a      	strb	r2, [r3, #25]
	sprintf((char*) &Disp.d[0], "   %02u%02u ", date.RTC_Hours,
 8003f3c:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <Disp_time_to_display+0xa4>)
 8003f3e:	7853      	ldrb	r3, [r2, #1]
 8003f40:	7812      	ldrb	r2, [r2, #0]
 8003f42:	490b      	ldr	r1, [pc, #44]	; (8003f70 <Disp_time_to_display+0xac>)
 8003f44:	4809      	ldr	r0, [pc, #36]	; (8003f6c <Disp_time_to_display+0xa8>)
 8003f46:	f001 fae1 	bl	800550c <siprintf>
}
 8003f4a:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
		Disp.dot = 0x10;
 8003f4e:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <Disp_time_to_display+0xa8>)
 8003f50:	2210      	movs	r2, #16
 8003f52:	765a      	strb	r2, [r3, #25]
 8003f54:	e7f2      	b.n	8003f3c <Disp_time_to_display+0x78>
 8003f56:	bf00      	nop
 8003f58:	200043c8 	.word	0x200043c8
 8003f5c:	20004390 	.word	0x20004390
 8003f60:	5d52b995 	.word	0x5d52b995
 8003f64:	200042f0 	.word	0x200042f0
 8003f68:	200043d0 	.word	0x200043d0
 8003f6c:	20004374 	.word	0x20004374
 8003f70:	080071d0 	.word	0x080071d0

08003f74 <vDisplayTask>:
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
	T_display_queue data_for_display={0,0};
 8003f78:	2500      	movs	r5, #0
 8003f7a:	9506      	str	r5, [sp, #24]
 8003f7c:	f88d 501c 	strb.w	r5, [sp, #28]
	Disp.backlight = 1;
 8003f80:	4c97      	ldr	r4, [pc, #604]	; (80041e0 <vDisplayTask+0x26c>)
 8003f82:	2701      	movs	r7, #1
 8003f84:	76a7      	strb	r7, [r4, #26]
	LED1_Port->BSRR = LED1_Pin;
 8003f86:	4e97      	ldr	r6, [pc, #604]	; (80041e4 <vDisplayTask+0x270>)
 8003f88:	6137      	str	r7, [r6, #16]
	sprintf((char*) &Disp.d[0], "  HELLO ");
 8003f8a:	4b97      	ldr	r3, [pc, #604]	; (80041e8 <vDisplayTask+0x274>)
 8003f8c:	cb03      	ldmia	r3!, {r0, r1}
 8003f8e:	6020      	str	r0, [r4, #0]
 8003f90:	6061      	str	r1, [r4, #4]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	7223      	strb	r3, [r4, #8]
	vTaskDelay(1500);
 8003f96:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003f9a:	f7fd fe1f 	bl	8001bdc <vTaskDelay>
	LED1_Port->BRR = LED1_Pin;
 8003f9e:	6177      	str	r7, [r6, #20]
	LED2_Port->BSRR = LED2_Pin;
 8003fa0:	2702      	movs	r7, #2
 8003fa2:	6137      	str	r7, [r6, #16]
	sprintf((char*) &Disp.d[0], "        ");
 8003fa4:	4b91      	ldr	r3, [pc, #580]	; (80041ec <vDisplayTask+0x278>)
 8003fa6:	cb03      	ldmia	r3!, {r0, r1}
 8003fa8:	6020      	str	r0, [r4, #0]
 8003faa:	6061      	str	r1, [r4, #4]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	7223      	strb	r3, [r4, #8]
	vTaskDelay(1000);
 8003fb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fb4:	f7fd fe12 	bl	8001bdc <vTaskDelay>
	LED2_Port->BRR = LED2_Pin;
 8003fb8:	6177      	str	r7, [r6, #20]
	i = 0;
 8003fba:	9503      	str	r5, [sp, #12]
	j = 0;
 8003fbc:	9502      	str	r5, [sp, #8]
 8003fbe:	e01f      	b.n	8004000 <vDisplayTask+0x8c>
			Disp.State = Display_time;
 8003fc0:	4b87      	ldr	r3, [pc, #540]	; (80041e0 <vDisplayTask+0x26c>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	76da      	strb	r2, [r3, #27]
		memcpy(d_out,Disp.d,8);
 8003fc6:	4a86      	ldr	r2, [pc, #536]	; (80041e0 <vDisplayTask+0x26c>)
 8003fc8:	ab04      	add	r3, sp, #16
 8003fca:	6810      	ldr	r0, [r2, #0]
 8003fcc:	6851      	ldr	r1, [r2, #4]
 8003fce:	c303      	stmia	r3!, {r0, r1}
		d_out[0] = Disp.dot;
 8003fd0:	7e53      	ldrb	r3, [r2, #25]
 8003fd2:	a908      	add	r1, sp, #32
 8003fd4:	f801 3d10 	strb.w	r3, [r1, #-16]!
		xQueueSendToBack(Data_out_display,&d_out[0],0);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4884      	ldr	r0, [pc, #528]	; (80041f0 <vDisplayTask+0x27c>)
 8003fde:	6800      	ldr	r0, [r0, #0]
 8003fe0:	f7fd f930 	bl	8001244 <xQueueGenericSend>
		vTaskDelay(10);
 8003fe4:	200a      	movs	r0, #10
 8003fe6:	f7fd fdf9 	bl	8001bdc <vTaskDelay>
		if ((data_for_display.new_state != 0)
 8003fea:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8003fee:	b13b      	cbz	r3, 8004000 <vDisplayTask+0x8c>
				&& (data_for_display.new_state != previous_state))
 8003ff0:	4a80      	ldr	r2, [pc, #512]	; (80041f4 <vDisplayTask+0x280>)
 8003ff2:	7812      	ldrb	r2, [r2, #0]
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <vDisplayTask+0x8c>
			Disp.State = data_for_display.new_state;
 8003ff8:	4a79      	ldr	r2, [pc, #484]	; (80041e0 <vDisplayTask+0x26c>)
 8003ffa:	76d3      	strb	r3, [r2, #27]
			previous_state = data_for_display.new_state;
 8003ffc:	4a7d      	ldr	r2, [pc, #500]	; (80041f4 <vDisplayTask+0x280>)
 8003ffe:	7013      	strb	r3, [r2, #0]
		xQueueReceive(CNT_disp_queue, &data_for_display, 0);
 8004000:	2200      	movs	r2, #0
 8004002:	a906      	add	r1, sp, #24
 8004004:	4b7c      	ldr	r3, [pc, #496]	; (80041f8 <vDisplayTask+0x284>)
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	f7fd f9e0 	bl	80013cc <xQueueReceive>
		switch (Disp.State)
 800400c:	4b74      	ldr	r3, [pc, #464]	; (80041e0 <vDisplayTask+0x26c>)
 800400e:	7edb      	ldrb	r3, [r3, #27]
 8004010:	2b06      	cmp	r3, #6
 8004012:	d8d8      	bhi.n	8003fc6 <vDisplayTask+0x52>
 8004014:	a201      	add	r2, pc, #4	; (adr r2, 800401c <vDisplayTask+0xa8>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	08003fc1 	.word	0x08003fc1
 8004020:	08004039 	.word	0x08004039
 8004024:	080040a7 	.word	0x080040a7
 8004028:	080040d5 	.word	0x080040d5
 800402c:	080040f3 	.word	0x080040f3
 8004030:	08003fc7 	.word	0x08003fc7
 8004034:	080041c9 	.word	0x080041c9
			switch (i)
 8004038:	9b03      	ldr	r3, [sp, #12]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d82a      	bhi.n	8004094 <vDisplayTask+0x120>
 800403e:	e8df f003 	tbb	[pc, r3]
 8004042:	0902      	.short	0x0902
 8004044:	2719      	.short	0x2719
				i++;
 8004046:	9b03      	ldr	r3, [sp, #12]
 8004048:	3301      	adds	r3, #1
 800404a:	9303      	str	r3, [sp, #12]
				tick_start = xTaskGetTickCount();
 800404c:	f7fd fcce 	bl	80019ec <xTaskGetTickCount>
 8004050:	9001      	str	r0, [sp, #4]
				break;
 8004052:	e021      	b.n	8004098 <vDisplayTask+0x124>
				Disp_Global(IN.G_CNT_EX);
 8004054:	4b69      	ldr	r3, [pc, #420]	; (80041fc <vDisplayTask+0x288>)
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	f7ff fd7a 	bl	8003b50 <Disp_Global>
				if (xTaskGetTickCount() > (tick_start + 5000))
 800405c:	f7fd fcc6 	bl	80019ec <xTaskGetTickCount>
 8004060:	9b01      	ldr	r3, [sp, #4]
 8004062:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004066:	3308      	adds	r3, #8
 8004068:	4298      	cmp	r0, r3
 800406a:	d915      	bls.n	8004098 <vDisplayTask+0x124>
					i++;
 800406c:	9b03      	ldr	r3, [sp, #12]
 800406e:	3301      	adds	r3, #1
 8004070:	9303      	str	r3, [sp, #12]
 8004072:	e011      	b.n	8004098 <vDisplayTask+0x124>
				Disp_time_to_display();
 8004074:	f7ff ff26 	bl	8003ec4 <Disp_time_to_display>
				if (xTaskGetTickCount() > (tick_start + 12000))
 8004078:	f7fd fcb8 	bl	80019ec <xTaskGetTickCount>
 800407c:	9b01      	ldr	r3, [sp, #4]
 800407e:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004082:	3320      	adds	r3, #32
 8004084:	4298      	cmp	r0, r3
 8004086:	d907      	bls.n	8004098 <vDisplayTask+0x124>
					i++;
 8004088:	9b03      	ldr	r3, [sp, #12]
 800408a:	3301      	adds	r3, #1
 800408c:	9303      	str	r3, [sp, #12]
 800408e:	e003      	b.n	8004098 <vDisplayTask+0x124>
				i = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	9303      	str	r3, [sp, #12]
				i = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	9303      	str	r3, [sp, #12]
			vTaskDelay(10);
 8004098:	200a      	movs	r0, #10
 800409a:	f7fd fd9f 	bl	8001bdc <vTaskDelay>
			LED2_Port->BRR = LED2_Pin;
 800409e:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <vDisplayTask+0x270>)
 80040a0:	2202      	movs	r2, #2
 80040a2:	615a      	str	r2, [r3, #20]
			break;
 80040a4:	e78f      	b.n	8003fc6 <vDisplayTask+0x52>
			sprintf((char*) &Disp.d[0], "  START ");
 80040a6:	4c4e      	ldr	r4, [pc, #312]	; (80041e0 <vDisplayTask+0x26c>)
 80040a8:	4b55      	ldr	r3, [pc, #340]	; (8004200 <vDisplayTask+0x28c>)
 80040aa:	cb03      	ldmia	r3!, {r0, r1}
 80040ac:	6020      	str	r0, [r4, #0]
 80040ae:	6061      	str	r1, [r4, #4]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	7223      	strb	r3, [r4, #8]
			Disp.dot = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	7663      	strb	r3, [r4, #25]
			LED1_Port->BSRR = LED1_Pin;
 80040b8:	4b4a      	ldr	r3, [pc, #296]	; (80041e4 <vDisplayTask+0x270>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	611a      	str	r2, [r3, #16]
			LED2_Port->BRR = LED2_Pin;
 80040be:	2202      	movs	r2, #2
 80040c0:	615a      	str	r2, [r3, #20]
			vTaskDelay(800);
 80040c2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80040c6:	f7fd fd89 	bl	8001bdc <vTaskDelay>
			Disp.State = Display_refueling;
 80040ca:	2303      	movs	r3, #3
 80040cc:	76e3      	strb	r3, [r4, #27]
			data_for_display.new_state = Disp.State;
 80040ce:	f88d 301c 	strb.w	r3, [sp, #28]
			break;
 80040d2:	e778      	b.n	8003fc6 <vDisplayTask+0x52>
			if (get_valve_state() == state_on)
 80040d4:	f7ff fc96 	bl	8003a04 <get_valve_state>
 80040d8:	2802      	cmp	r0, #2
 80040da:	d006      	beq.n	80040ea <vDisplayTask+0x176>
			Disp_imp2litr(data_for_display.pulses);
 80040dc:	9806      	ldr	r0, [sp, #24]
 80040de:	f7ff fcb5 	bl	8003a4c <Disp_imp2litr>
			i = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	9303      	str	r3, [sp, #12]
			j = 0;
 80040e6:	9302      	str	r3, [sp, #8]
			break;
 80040e8:	e76d      	b.n	8003fc6 <vDisplayTask+0x52>
				LED1_Port->BSRR = LED1_Pin;
 80040ea:	4b3e      	ldr	r3, [pc, #248]	; (80041e4 <vDisplayTask+0x270>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	611a      	str	r2, [r3, #16]
 80040f0:	e7f4      	b.n	80040dc <vDisplayTask+0x168>
			LED1_Port->BRR = LED1_Pin;
 80040f2:	4b3c      	ldr	r3, [pc, #240]	; (80041e4 <vDisplayTask+0x270>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	615a      	str	r2, [r3, #20]
			LED2_Port->BSRR = LED2_Pin;
 80040f8:	2202      	movs	r2, #2
 80040fa:	611a      	str	r2, [r3, #16]
			switch (i)
 80040fc:	9b03      	ldr	r3, [sp, #12]
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d85f      	bhi.n	80041c2 <vDisplayTask+0x24e>
 8004102:	e8df f003 	tbb	[pc, r3]
 8004106:	1304      	.short	0x1304
 8004108:	493a291a 	.word	0x493a291a
 800410c:	54          	.byte	0x54
 800410d:	00          	.byte	0x00
				i++;
 800410e:	9b03      	ldr	r3, [sp, #12]
 8004110:	3301      	adds	r3, #1
 8004112:	9303      	str	r3, [sp, #12]
				sprintf((char*) &Disp.d[0], "  STOP ");
 8004114:	4a32      	ldr	r2, [pc, #200]	; (80041e0 <vDisplayTask+0x26c>)
 8004116:	4b3b      	ldr	r3, [pc, #236]	; (8004204 <vDisplayTask+0x290>)
 8004118:	cb03      	ldmia	r3!, {r0, r1}
 800411a:	6010      	str	r0, [r2, #0]
 800411c:	6051      	str	r1, [r2, #4]
				Disp.dot = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	7653      	strb	r3, [r2, #25]
				vTaskDelay(1500);
 8004122:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004126:	f7fd fd59 	bl	8001bdc <vTaskDelay>
				break;
 800412a:	e74c      	b.n	8003fc6 <vDisplayTask+0x52>
				i++;
 800412c:	9b03      	ldr	r3, [sp, #12]
 800412e:	3301      	adds	r3, #1
 8004130:	9303      	str	r3, [sp, #12]
				tick_start = xTaskGetTickCount();
 8004132:	f7fd fc5b 	bl	80019ec <xTaskGetTickCount>
 8004136:	9001      	str	r0, [sp, #4]
				break;
 8004138:	e745      	b.n	8003fc6 <vDisplayTask+0x52>
				Disp_imp2litr(data_for_display.pulses);
 800413a:	9806      	ldr	r0, [sp, #24]
 800413c:	f7ff fc86 	bl	8003a4c <Disp_imp2litr>
				if (xTaskGetTickCount() > tick_start + 2000)
 8004140:	f7fd fc54 	bl	80019ec <xTaskGetTickCount>
 8004144:	9b01      	ldr	r3, [sp, #4]
 8004146:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800414a:	4298      	cmp	r0, r3
 800414c:	f67f af3b 	bls.w	8003fc6 <vDisplayTask+0x52>
					i++;
 8004150:	9b03      	ldr	r3, [sp, #12]
 8004152:	3301      	adds	r3, #1
 8004154:	9303      	str	r3, [sp, #12]
 8004156:	e736      	b.n	8003fc6 <vDisplayTask+0x52>
				Disp_Global(IN.G_CNT_EX);
 8004158:	4b28      	ldr	r3, [pc, #160]	; (80041fc <vDisplayTask+0x288>)
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	f7ff fcf8 	bl	8003b50 <Disp_Global>
				if (xTaskGetTickCount() > tick_start + 10000)
 8004160:	f7fd fc44 	bl	80019ec <xTaskGetTickCount>
 8004164:	9b01      	ldr	r3, [sp, #4]
 8004166:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800416a:	3310      	adds	r3, #16
 800416c:	4298      	cmp	r0, r3
 800416e:	f67f af2a 	bls.w	8003fc6 <vDisplayTask+0x52>
					i++;
 8004172:	9b03      	ldr	r3, [sp, #12]
 8004174:	3301      	adds	r3, #1
 8004176:	9303      	str	r3, [sp, #12]
 8004178:	e725      	b.n	8003fc6 <vDisplayTask+0x52>
				Disp_time_to_display();
 800417a:	f7ff fea3 	bl	8003ec4 <Disp_time_to_display>
				if (xTaskGetTickCount() > tick_start + 12000)
 800417e:	f7fd fc35 	bl	80019ec <xTaskGetTickCount>
 8004182:	9b01      	ldr	r3, [sp, #4]
 8004184:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004188:	3320      	adds	r3, #32
 800418a:	4298      	cmp	r0, r3
 800418c:	f67f af1b 	bls.w	8003fc6 <vDisplayTask+0x52>
					i++;
 8004190:	9b03      	ldr	r3, [sp, #12]
 8004192:	3301      	adds	r3, #1
 8004194:	9303      	str	r3, [sp, #12]
 8004196:	e716      	b.n	8003fc6 <vDisplayTask+0x52>
				if (xTaskGetTickCount() > tick_start + 14000)
 8004198:	f7fd fc28 	bl	80019ec <xTaskGetTickCount>
 800419c:	9b01      	ldr	r3, [sp, #4]
 800419e:	f503 535a 	add.w	r3, r3, #13952	; 0x3680
 80041a2:	3330      	adds	r3, #48	; 0x30
 80041a4:	4298      	cmp	r0, r3
 80041a6:	d902      	bls.n	80041ae <vDisplayTask+0x23a>
					i++;
 80041a8:	9b03      	ldr	r3, [sp, #12]
 80041aa:	3301      	adds	r3, #1
 80041ac:	9303      	str	r3, [sp, #12]
				i = 1;
 80041ae:	2301      	movs	r3, #1
 80041b0:	9303      	str	r3, [sp, #12]
				if (j++ > 25)
 80041b2:	9b02      	ldr	r3, [sp, #8]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	9202      	str	r2, [sp, #8]
 80041b8:	2b19      	cmp	r3, #25
 80041ba:	d902      	bls.n	80041c2 <vDisplayTask+0x24e>
					Disp.State = Display_time;
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <vDisplayTask+0x26c>)
 80041be:	2201      	movs	r2, #1
 80041c0:	76da      	strb	r2, [r3, #27]
				i = 1;
 80041c2:	2301      	movs	r3, #1
 80041c4:	9303      	str	r3, [sp, #12]
				break;
 80041c6:	e6fe      	b.n	8003fc6 <vDisplayTask+0x52>
			memcpy(Disp.d, data.display_d,8);
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <vDisplayTask+0x26c>)
 80041ca:	490f      	ldr	r1, [pc, #60]	; (8004208 <vDisplayTask+0x294>)
 80041cc:	460a      	mov	r2, r1
 80041ce:	f852 0f21 	ldr.w	r0, [r2, #33]!
 80041d2:	6852      	ldr	r2, [r2, #4]
 80041d4:	6018      	str	r0, [r3, #0]
 80041d6:	605a      	str	r2, [r3, #4]
			Disp.dot = data.display_d[0];
 80041d8:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
 80041dc:	765a      	strb	r2, [r3, #25]
			break;
 80041de:	e6f2      	b.n	8003fc6 <vDisplayTask+0x52>
 80041e0:	20004374 	.word	0x20004374
 80041e4:	40010c00 	.word	0x40010c00
 80041e8:	08007214 	.word	0x08007214
 80041ec:	08007220 	.word	0x08007220
 80041f0:	20003b50 	.word	0x20003b50
 80041f4:	20003b60 	.word	0x20003b60
 80041f8:	20003b40 	.word	0x20003b40
 80041fc:	200043d8 	.word	0x200043d8
 8004200:	0800722c 	.word	0x0800722c
 8004204:	08007238 	.word	0x08007238
 8004208:	20004390 	.word	0x20004390

0800420c <CRC_Calc>:

uint32_t CRC_Calc(uint32_t * ptr, uint32_t BufferLength)
{
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	4604      	mov	r4, r0
 8004210:	460d      	mov	r5, r1
  uint32_t index = 0;

  CRC_ResetDR();
 8004212:	f7fe fa2d 	bl	8002670 <CRC_ResetDR>
  for(index = 0; index < BufferLength; index+=4)
 8004216:	2300      	movs	r3, #0
 8004218:	e004      	b.n	8004224 <CRC_Calc+0x18>
  {
    CRC->DR = *ptr++;
 800421a:	6821      	ldr	r1, [r4, #0]
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <CRC_Calc+0x24>)
 800421e:	6011      	str	r1, [r2, #0]
  for(index = 0; index < BufferLength; index+=4)
 8004220:	3304      	adds	r3, #4
    CRC->DR = *ptr++;
 8004222:	3404      	adds	r4, #4
  for(index = 0; index < BufferLength; index+=4)
 8004224:	42ab      	cmp	r3, r5
 8004226:	d3f8      	bcc.n	800421a <CRC_Calc+0xe>
  }
  return (uint32_t)(CRC->DR);
 8004228:	4b01      	ldr	r3, [pc, #4]	; (8004230 <CRC_Calc+0x24>)
 800422a:	6818      	ldr	r0, [r3, #0]
}
 800422c:	bd38      	pop	{r3, r4, r5, pc}
 800422e:	bf00      	nop
 8004230:	40023000 	.word	0x40023000

08004234 <Settings_read>:

}


uint8_t Settings_read (T_settings * s,uint32_t  Addr)
{
 8004234:	b508      	push	{r3, lr}
	//st_src = (uint8_t *)SETTINGS_START;
	memcpy(s,(__IO uint32_t*)Addr,sizeof(T_settings));
 8004236:	2280      	movs	r2, #128	; 0x80
 8004238:	f000 fd05 	bl	8004c46 <memcpy>
	return E_OK;
}
 800423c:	2000      	movs	r0, #0
 800423e:	bd08      	pop	{r3, pc}

08004240 <Settings_check>:

uint8_t Settings_check (T_settings * s)
{
 8004240:	b510      	push	{r4, lr}
 8004242:	4604      	mov	r4, r0
	uint32_t crc;

	crc = CRC_Calc((void *)s,sizeof (T_settings) - 4);
 8004244:	217c      	movs	r1, #124	; 0x7c
 8004246:	f7ff ffe1 	bl	800420c <CRC_Calc>
	if (crc == s->crc && crc!=0) return E_OK;
 800424a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800424c:	4283      	cmp	r3, r0
 800424e:	d001      	beq.n	8004254 <Settings_check+0x14>
	return E_ERROR;
 8004250:	2001      	movs	r0, #1
}
 8004252:	bd10      	pop	{r4, pc}
	if (crc == s->crc && crc!=0) return E_OK;
 8004254:	b908      	cbnz	r0, 800425a <Settings_check+0x1a>
	return E_ERROR;
 8004256:	2001      	movs	r0, #1
 8004258:	e7fb      	b.n	8004252 <Settings_check+0x12>
	if (crc == s->crc && crc!=0) return E_OK;
 800425a:	2000      	movs	r0, #0
 800425c:	e7f9      	b.n	8004252 <Settings_check+0x12>

0800425e <Settings_write>:

uint8_t Settings_write(T_settings * s, uint32_t Addr) {
 800425e:	b570      	push	{r4, r5, r6, lr}
 8004260:	4606      	mov	r6, r0
 8004262:	460d      	mov	r5, r1
	uint32_t size;
	FLASH_Unlock();
 8004264:	f7fe fa0a 	bl	800267c <FLASH_Unlock>
	FLASH_ErasePage(Addr);
 8004268:	4628      	mov	r0, r5
 800426a:	f7fe fa3d 	bl	80026e8 <FLASH_ErasePage>
	uint32_t *source_addr = (void *) s;
	uint32_t *dest_addr = (uint32_t *) Addr;
	size = sizeof(T_settings) / 2;
	s->crc = CRC_Calc(source_addr, sizeof(T_settings)-4);
 800426e:	217c      	movs	r1, #124	; 0x7c
 8004270:	4630      	mov	r0, r6
 8004272:	f7ff ffcb 	bl	800420c <CRC_Calc>
 8004276:	67f0      	str	r0, [r6, #124]	; 0x7c
	for (uint16_t i = 0; i < size; i++) {
 8004278:	2400      	movs	r4, #0
 800427a:	e007      	b.n	800428c <Settings_write+0x2e>
		FLASH_ProgramWord((uint32_t) dest_addr, *source_addr);
 800427c:	f856 1b04 	ldr.w	r1, [r6], #4
 8004280:	4628      	mov	r0, r5
 8004282:	f7fe fa51 	bl	8002728 <FLASH_ProgramWord>
		source_addr++;
		dest_addr++;
 8004286:	3504      	adds	r5, #4
	for (uint16_t i = 0; i < size; i++) {
 8004288:	3401      	adds	r4, #1
 800428a:	b2a4      	uxth	r4, r4
 800428c:	2c3f      	cmp	r4, #63	; 0x3f
 800428e:	d9f5      	bls.n	800427c <Settings_write+0x1e>
	}
	return E_OK;
}
 8004290:	2000      	movs	r0, #0
 8004292:	bd70      	pop	{r4, r5, r6, pc}

08004294 <Write_settings>:
{
 8004294:	b510      	push	{r4, lr}
 8004296:	b0a0      	sub	sp, #128	; 0x80
	res = Settings_write(&settings, SETTINGS_START);
 8004298:	4c0e      	ldr	r4, [pc, #56]	; (80042d4 <Write_settings+0x40>)
 800429a:	4621      	mov	r1, r4
 800429c:	480e      	ldr	r0, [pc, #56]	; (80042d8 <Write_settings+0x44>)
 800429e:	f7ff ffde 	bl	800425e <Settings_write>
	res = Settings_read(&tmp, SETTINGS_START);
 80042a2:	4621      	mov	r1, r4
 80042a4:	4668      	mov	r0, sp
 80042a6:	f7ff ffc5 	bl	8004234 <Settings_read>
	if (Settings_check(&tmp) == E_OK)
 80042aa:	4668      	mov	r0, sp
 80042ac:	f7ff ffc8 	bl	8004240 <Settings_check>
 80042b0:	b108      	cbz	r0, 80042b6 <Write_settings+0x22>
}
 80042b2:	b020      	add	sp, #128	; 0x80
 80042b4:	bd10      	pop	{r4, pc}
		Settings_write(&settings, SETTINGS_START_COPY);
 80042b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80042ba:	4621      	mov	r1, r4
 80042bc:	4806      	ldr	r0, [pc, #24]	; (80042d8 <Write_settings+0x44>)
 80042be:	f7ff ffce 	bl	800425e <Settings_write>
		Settings_read(&tmp, SETTINGS_START_COPY);
 80042c2:	4621      	mov	r1, r4
 80042c4:	4668      	mov	r0, sp
 80042c6:	f7ff ffb5 	bl	8004234 <Settings_read>
		if (Settings_check(&tmp) != E_OK)
 80042ca:	4668      	mov	r0, sp
 80042cc:	f7ff ffb8 	bl	8004240 <Settings_check>
}
 80042d0:	e7ef      	b.n	80042b2 <Write_settings+0x1e>
 80042d2:	bf00      	nop
 80042d4:	0801f800 	.word	0x0801f800
 80042d8:	200042f0 	.word	0x200042f0

080042dc <vDefaultTask>:
{
 80042dc:	b508      	push	{r3, lr}
 80042de:	e004      	b.n	80042ea <vDefaultTask+0xe>
	    vTaskDelay(10);
 80042e0:	200a      	movs	r0, #10
 80042e2:	f7fd fc7b 	bl	8001bdc <vTaskDelay>
	    IWDG_ReloadCounter();
 80042e6:	f7fe faa5 	bl	8002834 <IWDG_ReloadCounter>
	    LED_Port->BSRR = LED_Pin;
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <vDefaultTask+0x2c>)
 80042ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042f0:	611a      	str	r2, [r3, #16]
	    if (xSemaphoreTake(S_Save,0) == pdTRUE)
 80042f2:	2100      	movs	r1, #0
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <vDefaultTask+0x30>)
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	f7fd f8ee 	bl	80014d8 <xQueueSemaphoreTake>
 80042fc:	2801      	cmp	r0, #1
 80042fe:	d1ef      	bne.n	80042e0 <vDefaultTask+0x4>
	    	Write_settings();
 8004300:	f7ff ffc8 	bl	8004294 <Write_settings>
 8004304:	e7ec      	b.n	80042e0 <vDefaultTask+0x4>
 8004306:	bf00      	nop
 8004308:	40011000 	.word	0x40011000
 800430c:	20003b54 	.word	0x20003b54

08004310 <Settings_default>:



void Settings_default (T_settings * s)
{
 8004310:	b4f0      	push	{r4, r5, r6, r7}

			//set default
		   s->CNT.addr = ADDR_EX;
 8004312:	2703      	movs	r7, #3
 8004314:	70c7      	strb	r7, [r0, #3]
		   s->CNT.pgn = CNT_PGN;
 8004316:	2300      	movs	r3, #0
 8004318:	2243      	movs	r2, #67	; 0x43
 800431a:	71c2      	strb	r2, [r0, #7]
 800431c:	f06f 0408 	mvn.w	r4, #8
 8004320:	7204      	strb	r4, [r0, #8]
 8004322:	2118      	movs	r1, #24
 8004324:	7241      	strb	r1, [r0, #9]
 8004326:	7283      	strb	r3, [r0, #10]
		   s->CNT.start = CNT_Start;
 8004328:	72c3      	strb	r3, [r0, #11]
		   s->CNT.bit = CNT_Bit;
 800432a:	2620      	movs	r6, #32
 800432c:	7306      	strb	r6, [r0, #12]
		   s->CNT.timeout = CNT_timeout;
 800432e:	2205      	movs	r2, #5
 8004330:	7342      	strb	r2, [r0, #13]
 8004332:	7383      	strb	r3, [r0, #14]

		   s->valve.addr = ADDR_EX;
 8004334:	73c7      	strb	r7, [r0, #15]
		   s->valve.pgn = VLV_PGN;
 8004336:	2510      	movs	r5, #16
 8004338:	74c5      	strb	r5, [r0, #19]
 800433a:	7504      	strb	r4, [r0, #20]
 800433c:	7541      	strb	r1, [r0, #21]
 800433e:	7583      	strb	r3, [r0, #22]
		   s->valve.start = VLV_Start;
 8004340:	2530      	movs	r5, #48	; 0x30
 8004342:	75c5      	strb	r5, [r0, #23]
		   s->valve.bit  =VLV_Bit;
 8004344:	2501      	movs	r5, #1
 8004346:	7605      	strb	r5, [r0, #24]
		   s->valve.timeout = VLV_timeout;
 8004348:	7642      	strb	r2, [r0, #25]
 800434a:	7683      	strb	r3, [r0, #26]

		   s->Ain.addr = ADDR_EX;
 800434c:	76c7      	strb	r7, [r0, #27]
		   s->Ain.pgn = AIN_PGN;
 800434e:	77c6      	strb	r6, [r0, #31]
 8004350:	f880 4020 	strb.w	r4, [r0, #32]
 8004354:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
 8004358:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
		   s->Ain.start = AIN_Start;
 800435c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		   s->Ain.bit = AIN_Bit;
 8004360:	2710      	movs	r7, #16
 8004362:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
		   s->Ain.timeout = AIN_timeout;
 8004366:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 800436a:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

		   s->Time.addr = Time_ADDR;
 800436e:	f880 5027 	strb.w	r5, [r0, #39]	; 0x27
		   s->Time.pgn = Time_PGN;
 8004372:	f06f 0c0c 	mvn.w	ip, #12
 8004376:	f880 c02b 	strb.w	ip, [r0, #43]	; 0x2b
 800437a:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
 800437e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 8004382:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
		   s->Time.start = Time_Start;
 8004386:	f880 602f 	strb.w	r6, [r0, #47]	; 0x2f
		   s->Time.bit = Time_Bit;
 800438a:	f880 6030 	strb.w	r6, [r0, #48]	; 0x30
		   s->Time.timeout = Time_timeout;
 800438e:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
 8004392:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32

		   s->MY_ADDR = UNIT_ADDR;
 8004396:	2628      	movs	r6, #40	; 0x28
 8004398:	7006      	strb	r6, [r0, #0]

		   s->CADR.addr  = ADDR_CARD;
 800439a:	f04f 0c06 	mov.w	ip, #6
 800439e:	f880 c033 	strb.w	ip, [r0, #51]	; 0x33
		   s->CADR.pgn = CARD_PGN;
 80043a2:	f04f 0c03 	mov.w	ip, #3
 80043a6:	f880 c037 	strb.w	ip, [r0, #55]	; 0x37
 80043aa:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
 80043ae:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 80043b2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		   s->CADR.bit = CARD_Bit;
 80043b6:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
		   s->CADR.start = CARD_Start;
 80043ba:	f880 703b 	strb.w	r7, [r0, #59]	; 0x3b
		   s->CADR.timeout = CARD_timeout;
 80043be:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 80043c2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
//		   s->TX_MSG[0].timeout = MSG1_TIMEOUT;
//
//		   s->TX_MSG[1].PGN = MSG2_PGN;
//		   s->TX_MSG[1].timeout = MSG2_TIMEOUT;

		   s->TX_MSG[0].enable =1;
 80043c6:	f880 5051 	strb.w	r5, [r0, #81]	; 0x51
		   s->TX_MSG[1].enable =1;
 80043ca:	f880 5059 	strb.w	r5, [r0, #89]	; 0x59

		   s->TPASS = TPASS_DEFAULT;
 80043ce:	2267      	movs	r2, #103	; 0x67
 80043d0:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 80043d4:	222b      	movs	r2, #43	; 0x2b
 80043d6:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
 80043da:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
 80043de:	f880 307b 	strb.w	r3, [r0, #123]	; 0x7b
		   //settings.cnt_ratio = 0.0479;
		  // s->cnt_ratio = 0.023809524;//rassvet2
		   //settings.cnt_ratio = 0.022893773;//rassvet
		   settings.cnt_pulses_per_litre = 20.855;//old - 20.87682672;
 80043e2:	4a0c      	ldr	r2, [pc, #48]	; (8004414 <Settings_default+0x104>)
 80043e4:	f102 0363 	add.w	r3, r2, #99	; 0x63
 80043e8:	217b      	movs	r1, #123	; 0x7b
 80043ea:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
 80043ee:	2214      	movs	r2, #20
 80043f0:	705a      	strb	r2, [r3, #1]
 80043f2:	f06f 0251 	mvn.w	r2, #81	; 0x51
 80043f6:	709a      	strb	r2, [r3, #2]
 80043f8:	2247      	movs	r2, #71	; 0x47
 80043fa:	70da      	strb	r2, [r3, #3]
 80043fc:	f06f 021e 	mvn.w	r2, #30
 8004400:	711a      	strb	r2, [r3, #4]
 8004402:	f06f 0225 	mvn.w	r2, #37	; 0x25
 8004406:	715a      	strb	r2, [r3, #5]
 8004408:	2234      	movs	r2, #52	; 0x34
 800440a:	719a      	strb	r2, [r3, #6]
 800440c:	2240      	movs	r2, #64	; 0x40
 800440e:	71da      	strb	r2, [r3, #7]
//	   //settings.cnt_ratio = 0.022893773;//rassvet
//	   //settings.cnt_pulses_per_litre = 20.855;//old - 20.87682672;
//	   //settings.cnt_pulses_per_litre = 43.68;//rassvet
//	  settings.cnt_pulses_per_litre = 42;//rassvet2

}
 8004410:	bcf0      	pop	{r4, r5, r6, r7}
 8004412:	4770      	bx	lr
 8004414:	200042f0 	.word	0x200042f0

08004418 <Read_settings>:
{
 8004418:	b510      	push	{r4, lr}
 800441a:	b0a0      	sub	sp, #128	; 0x80
	res = Settings_read(&tmp, SETTINGS_START);
 800441c:	4910      	ldr	r1, [pc, #64]	; (8004460 <Read_settings+0x48>)
 800441e:	4668      	mov	r0, sp
 8004420:	f7ff ff08 	bl	8004234 <Settings_read>
	if (Settings_check(&tmp) != E_OK)
 8004424:	4668      	mov	r0, sp
 8004426:	f7ff ff0b 	bl	8004240 <Settings_check>
 800442a:	b930      	cbnz	r0, 800443a <Read_settings+0x22>
		memcpy(&settings,&tmp,sizeof(T_settings));
 800442c:	2280      	movs	r2, #128	; 0x80
 800442e:	4669      	mov	r1, sp
 8004430:	480c      	ldr	r0, [pc, #48]	; (8004464 <Read_settings+0x4c>)
 8004432:	f000 fc08 	bl	8004c46 <memcpy>
}
 8004436:	b020      	add	sp, #128	; 0x80
 8004438:	bd10      	pop	{r4, pc}
		res = Settings_read(&tmp, SETTINGS_START_COPY);
 800443a:	490b      	ldr	r1, [pc, #44]	; (8004468 <Read_settings+0x50>)
 800443c:	4668      	mov	r0, sp
 800443e:	f7ff fef9 	bl	8004234 <Settings_read>
		if (Settings_check(&tmp) != E_OK)
 8004442:	4668      	mov	r0, sp
 8004444:	f7ff fefc 	bl	8004240 <Settings_check>
 8004448:	2800      	cmp	r0, #0
 800444a:	d0f4      	beq.n	8004436 <Read_settings+0x1e>
			Settings_default(&settings);
 800444c:	4c05      	ldr	r4, [pc, #20]	; (8004464 <Read_settings+0x4c>)
 800444e:	4620      	mov	r0, r4
 8004450:	f7ff ff5e 	bl	8004310 <Settings_default>
			Settings_write(&settings, SETTINGS_START);
 8004454:	4902      	ldr	r1, [pc, #8]	; (8004460 <Read_settings+0x48>)
 8004456:	4620      	mov	r0, r4
 8004458:	f7ff ff01 	bl	800425e <Settings_write>
 800445c:	e7eb      	b.n	8004436 <Read_settings+0x1e>
 800445e:	bf00      	nop
 8004460:	0801f800 	.word	0x0801f800
 8004464:	200042f0 	.word	0x200042f0
 8004468:	0801fc00 	.word	0x0801fc00

0800446c <main>:
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
    Init_sys();
 8004470:	f7fe fab2 	bl	80029d8 <Init_sys>
    Read_settings();
 8004474:	f7ff ffd0 	bl	8004418 <Read_settings>
    xTaskCreate(vDefaultTask,"SYS_Task",configMINIMAL_STACK_SIZE,NULL,tskIDLE_PRIORITY,NULL);
 8004478:	2400      	movs	r4, #0
 800447a:	9401      	str	r4, [sp, #4]
 800447c:	9400      	str	r4, [sp, #0]
 800447e:	4623      	mov	r3, r4
 8004480:	2280      	movs	r2, #128	; 0x80
 8004482:	4931      	ldr	r1, [pc, #196]	; (8004548 <main+0xdc>)
 8004484:	4831      	ldr	r0, [pc, #196]	; (800454c <main+0xe0>)
 8004486:	f7fd fa41 	bl	800190c <xTaskCreate>
    xTaskCreate(vDisplayTask,"Display_Task",512,NULL,tskIDLE_PRIORITY+1,NULL);
 800448a:	9401      	str	r4, [sp, #4]
 800448c:	2601      	movs	r6, #1
 800448e:	9600      	str	r6, [sp, #0]
 8004490:	4623      	mov	r3, r4
 8004492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004496:	492e      	ldr	r1, [pc, #184]	; (8004550 <main+0xe4>)
 8004498:	482e      	ldr	r0, [pc, #184]	; (8004554 <main+0xe8>)
 800449a:	f7fd fa37 	bl	800190c <xTaskCreate>
    xTaskCreate(vCanTask,"CAN_Task",1024,NULL,tskIDLE_PRIORITY+3,NULL);
 800449e:	9401      	str	r4, [sp, #4]
 80044a0:	f04f 0803 	mov.w	r8, #3
 80044a4:	f8cd 8000 	str.w	r8, [sp]
 80044a8:	4623      	mov	r3, r4
 80044aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044ae:	492a      	ldr	r1, [pc, #168]	; (8004558 <main+0xec>)
 80044b0:	482a      	ldr	r0, [pc, #168]	; (800455c <main+0xf0>)
 80044b2:	f7fd fa2b 	bl	800190c <xTaskCreate>
    xTaskCreate(vLogicTask,"Logic_Task",512,NULL,tskIDLE_PRIORITY+2,NULL);
 80044b6:	9401      	str	r4, [sp, #4]
 80044b8:	2502      	movs	r5, #2
 80044ba:	9500      	str	r5, [sp, #0]
 80044bc:	4623      	mov	r3, r4
 80044be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c2:	4927      	ldr	r1, [pc, #156]	; (8004560 <main+0xf4>)
 80044c4:	4827      	ldr	r0, [pc, #156]	; (8004564 <main+0xf8>)
 80044c6:	f7fd fa21 	bl	800190c <xTaskCreate>
    CNT_disp_queue =  xQueueCreate(4,sizeof(T_display_queue));
 80044ca:	4622      	mov	r2, r4
 80044cc:	2108      	movs	r1, #8
 80044ce:	2004      	movs	r0, #4
 80044d0:	f7fc fe9e 	bl	8001210 <xQueueGenericCreate>
 80044d4:	4f24      	ldr	r7, [pc, #144]	; (8004568 <main+0xfc>)
 80044d6:	6038      	str	r0, [r7, #0]
    Data_IN_queue = xQueueCreate(2,sizeof(T_data_IN));
 80044d8:	4622      	mov	r2, r4
 80044da:	2128      	movs	r1, #40	; 0x28
 80044dc:	4628      	mov	r0, r5
 80044de:	f7fc fe97 	bl	8001210 <xQueueGenericCreate>
 80044e2:	4b22      	ldr	r3, [pc, #136]	; (800456c <main+0x100>)
 80044e4:	6018      	str	r0, [r3, #0]
    Data_out_cnt = xQueueCreate(2,sizeof(uint64_t));
 80044e6:	4622      	mov	r2, r4
 80044e8:	2108      	movs	r1, #8
 80044ea:	4628      	mov	r0, r5
 80044ec:	f7fc fe90 	bl	8001210 <xQueueGenericCreate>
 80044f0:	4b1f      	ldr	r3, [pc, #124]	; (8004570 <main+0x104>)
 80044f2:	6018      	str	r0, [r3, #0]
    Data_out_G_cnt = xQueueCreate(2,sizeof(uint64_t));
 80044f4:	4622      	mov	r2, r4
 80044f6:	2108      	movs	r1, #8
 80044f8:	4628      	mov	r0, r5
 80044fa:	f7fc fe89 	bl	8001210 <xQueueGenericCreate>
 80044fe:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <main+0x108>)
 8004500:	6018      	str	r0, [r3, #0]
    Data_out_display = xQueueCreate(1,sizeof(Disp.d));
 8004502:	4622      	mov	r2, r4
 8004504:	2108      	movs	r1, #8
 8004506:	4630      	mov	r0, r6
 8004508:	f7fc fe82 	bl	8001210 <xQueueGenericCreate>
 800450c:	4b1a      	ldr	r3, [pc, #104]	; (8004578 <main+0x10c>)
 800450e:	6018      	str	r0, [r3, #0]
    S_Save = xSemaphoreCreateBinary();
 8004510:	4642      	mov	r2, r8
 8004512:	4621      	mov	r1, r4
 8004514:	4630      	mov	r0, r6
 8004516:	f7fc fe7b 	bl	8001210 <xQueueGenericCreate>
 800451a:	4b18      	ldr	r3, [pc, #96]	; (800457c <main+0x110>)
 800451c:	6018      	str	r0, [r3, #0]
    if (CNT_disp_queue== NULL
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	b15b      	cbz	r3, 800453a <main+0xce>
    		|| Data_IN_queue == NULL
 8004522:	4b12      	ldr	r3, [pc, #72]	; (800456c <main+0x100>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	b143      	cbz	r3, 800453a <main+0xce>
			|| Data_out_cnt == NULL
 8004528:	4b11      	ldr	r3, [pc, #68]	; (8004570 <main+0x104>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	b12b      	cbz	r3, 800453a <main+0xce>
			|| Data_out_G_cnt == NULL
 800452e:	4b11      	ldr	r3, [pc, #68]	; (8004574 <main+0x108>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	b113      	cbz	r3, 800453a <main+0xce>
			|| Data_out_display == NULL)
 8004534:	4b10      	ldr	r3, [pc, #64]	; (8004578 <main+0x10c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	b913      	cbnz	r3, 8004540 <main+0xd4>
static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 800453a:	bf00      	nop
 800453c:	bf00      	nop
 800453e:	bf00      	nop
    vTaskStartScheduler();
 8004540:	f7fd fa16 	bl	8001970 <vTaskStartScheduler>
 8004544:	e7fe      	b.n	8004544 <main+0xd8>
 8004546:	bf00      	nop
 8004548:	080071e0 	.word	0x080071e0
 800454c:	080042dd 	.word	0x080042dd
 8004550:	080071ec 	.word	0x080071ec
 8004554:	08003f75 	.word	0x08003f75
 8004558:	080071fc 	.word	0x080071fc
 800455c:	08002c11 	.word	0x08002c11
 8004560:	08007208 	.word	0x08007208
 8004564:	08003bbd 	.word	0x08003bbd
 8004568:	20003b40 	.word	0x20003b40
 800456c:	20003b44 	.word	0x20003b44
 8004570:	20003b4c 	.word	0x20003b4c
 8004574:	20003b48 	.word	0x20003b48
 8004578:	20003b50 	.word	0x20003b50
 800457c:	20003b54 	.word	0x20003b54

08004580 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004580:	4770      	bx	lr

08004582 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004582:	e7fe      	b.n	8004582 <HardFault_Handler>

08004584 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004584:	e7fe      	b.n	8004584 <MemManage_Handler>

08004586 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004586:	e7fe      	b.n	8004586 <BusFault_Handler>

08004588 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004588:	e7fe      	b.n	8004588 <UsageFault_Handler>

0800458a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800458a:	4770      	bx	lr

0800458c <USART1_IRQHandler>:
  /* USER CODE END USART1_IRQn 0 */
 // HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800458c:	4770      	bx	lr

0800458e <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)

{


};
 800458e:	4770      	bx	lr

08004590 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8004590:	b410      	push	{r4}
 8004592:	b083      	sub	sp, #12
	__IO uint32_t temp = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	9301      	str	r3, [sp, #4]
#ifdef USE_DISPLAY_LCD_6
	static uint8_t inv = 0;
#endif
	static uint8_t xx = 0;
#ifdef USE_DISPLAY_SERIAL
	Disp_RCK_Port->BSRR = Disp_RCK_Pin;
 8004598:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800459c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80045a0:	2240      	movs	r2, #64	; 0x40
 80045a2:	611a      	str	r2, [r3, #16]
 80045a4:	bf00      	nop
	__NOP();
	Disp_RCK_Port->BRR = Disp_RCK_Pin;
 80045a6:	615a      	str	r2, [r3, #20]
	temp = ((0x100<<Disp.index)|( 0xFF & ~SevenSegmentASCII[Disp.d[Disp.index]]));
 80045a8:	4814      	ldr	r0, [pc, #80]	; (80045fc <TIM3_IRQHandler+0x6c>)
 80045aa:	7e01      	ldrb	r1, [r0, #24]
 80045ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045b0:	408b      	lsls	r3, r1
 80045b2:	5c42      	ldrb	r2, [r0, r1]
 80045b4:	4c12      	ldr	r4, [pc, #72]	; (8004600 <TIM3_IRQHandler+0x70>)
 80045b6:	5ca2      	ldrb	r2, [r4, r2]
 80045b8:	43d2      	mvns	r2, r2
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	4313      	orrs	r3, r2
 80045be:	9301      	str	r3, [sp, #4]
	if ((Disp.dot>>Disp.index & 0x01 )!=0) temp &= ~(0x80);
 80045c0:	7e43      	ldrb	r3, [r0, #25]
 80045c2:	410b      	asrs	r3, r1
 80045c4:	f013 0f01 	tst.w	r3, #1
 80045c8:	d003      	beq.n	80045d2 <TIM3_IRQHandler+0x42>
 80045ca:	9b01      	ldr	r3, [sp, #4]
 80045cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d0:	9301      	str	r3, [sp, #4]
	if ((SPI1->SR & SPI_SR_TXE) !=0) SPI1->DR = temp;
 80045d2:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <TIM3_IRQHandler+0x74>)
 80045d4:	891b      	ldrh	r3, [r3, #8]
 80045d6:	f013 0f02 	tst.w	r3, #2
 80045da:	d003      	beq.n	80045e4 <TIM3_IRQHandler+0x54>
 80045dc:	9b01      	ldr	r3, [sp, #4]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	4a08      	ldr	r2, [pc, #32]	; (8004604 <TIM3_IRQHandler+0x74>)
 80045e2:	8193      	strh	r3, [r2, #12]
	Disp.index++;
 80045e4:	4a05      	ldr	r2, [pc, #20]	; (80045fc <TIM3_IRQHandler+0x6c>)
 80045e6:	7e13      	ldrb	r3, [r2, #24]
 80045e8:	3301      	adds	r3, #1
	Disp.index &=0x07;
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	7613      	strb	r3, [r2, #24]
#elif USE_DISPLAY_GR


#endif

	TIM3->SR = 0;
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <TIM3_IRQHandler+0x78>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	821a      	strh	r2, [r3, #16]
}
 80045f6:	b003      	add	sp, #12
 80045f8:	bc10      	pop	{r4}
 80045fa:	4770      	bx	lr
 80045fc:	20004374 	.word	0x20004374
 8004600:	08006e34 	.word	0x08006e34
 8004604:	40013000 	.word	0x40013000
 8004608:	40000400 	.word	0x40000400

0800460c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800460c:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	9300      	str	r3, [sp, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004614:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <SetSysClockTo72+0xbc>)
 8004616:	6813      	ldr	r3, [r2, #0]
 8004618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800461e:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <SetSysClockTo72+0xbc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	9300      	str	r3, [sp, #0]
    StartUpCounter++;  
 8004628:	9b01      	ldr	r3, [sp, #4]
 800462a:	3301      	adds	r3, #1
 800462c:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800462e:	9b00      	ldr	r3, [sp, #0]
 8004630:	b91b      	cbnz	r3, 800463a <SetSysClockTo72+0x2e>
 8004632:	9b01      	ldr	r3, [sp, #4]
 8004634:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004638:	d1f1      	bne.n	800461e <SetSysClockTo72+0x12>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800463a:	4b23      	ldr	r3, [pc, #140]	; (80046c8 <SetSysClockTo72+0xbc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004642:	d006      	beq.n	8004652 <SetSysClockTo72+0x46>
  {
    HSEStatus = (uint32_t)0x01;
 8004644:	2301      	movs	r3, #1
 8004646:	9300      	str	r3, [sp, #0]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }  

  if (HSEStatus == (uint32_t)0x01)
 8004648:	9b00      	ldr	r3, [sp, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d004      	beq.n	8004658 <SetSysClockTo72+0x4c>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800464e:	b002      	add	sp, #8
 8004650:	4770      	bx	lr
    HSEStatus = (uint32_t)0x00;
 8004652:	2300      	movs	r3, #0
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	e7f7      	b.n	8004648 <SetSysClockTo72+0x3c>
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8004658:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <SetSysClockTo72+0xc0>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	f042 0210 	orr.w	r2, r2, #16
 8004660:	601a      	str	r2, [r3, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	f022 0203 	bic.w	r2, r2, #3
 8004668:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	f042 0202 	orr.w	r2, r2, #2
 8004670:	601a      	str	r2, [r3, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004672:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004684:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800468c:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8004694:	605a      	str	r2, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800469c:	601a      	str	r2, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800469e:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <SetSysClockTo72+0xbc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80046a6:	d0fa      	beq.n	800469e <SetSysClockTo72+0x92>
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <SetSysClockTo72+0xbc>)
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	f022 0203 	bic.w	r2, r2, #3
 80046b0:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	f042 0202 	orr.w	r2, r2, #2
 80046b8:	605a      	str	r2, [r3, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80046ba:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <SetSysClockTo72+0xbc>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d1f9      	bne.n	80046ba <SetSysClockTo72+0xae>
 80046c6:	e7c2      	b.n	800464e <SetSysClockTo72+0x42>
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40022000 	.word	0x40022000

080046d0 <SetSysClock>:
{
 80046d0:	b508      	push	{r3, lr}
  SetSysClockTo72();
 80046d2:	f7ff ff9b 	bl	800460c <SetSysClockTo72>
}
 80046d6:	bd08      	pop	{r3, pc}

080046d8 <SystemInit>:
{
 80046d8:	b508      	push	{r3, lr}
  RCC->CR |= (uint32_t)0x00000001;
 80046da:	4b10      	ldr	r3, [pc, #64]	; (800471c <SystemInit+0x44>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80046e4:	6859      	ldr	r1, [r3, #4]
 80046e6:	4a0e      	ldr	r2, [pc, #56]	; (8004720 <SystemInit+0x48>)
 80046e8:	400a      	ands	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80046f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046f6:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046fe:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004706:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000;
 8004708:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800470c:	609a      	str	r2, [r3, #8]
  SetSysClock();
 800470e:	f7ff ffdf 	bl	80046d0 <SetSysClock>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004712:	4b04      	ldr	r3, [pc, #16]	; (8004724 <SystemInit+0x4c>)
 8004714:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004718:	609a      	str	r2, [r3, #8]
}
 800471a:	bd08      	pop	{r3, pc}
 800471c:	40021000 	.word	0x40021000
 8004720:	f8ff0000 	.word	0xf8ff0000
 8004724:	e000ed00 	.word	0xe000ed00

08004728 <nmea_atoi>:

/**
 * \brief Convert string to number
 */
int nmea_atoi(const char *str, int str_sz, int radix)
{
 8004728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800472c:	4691      	mov	r9, r2
	char c;
	int value = 0;
	int find_minus = 0;
 800472e:	f04f 0800 	mov.w	r8, #0
	int value = 0;
 8004732:	4646      	mov	r6, r8

	while (str_sz-- != 0)
 8004734:	e018      	b.n	8004768 <nmea_atoi+0x40>
			continue;
		}

		if (isdigit(c))
		{
			value = value * radix + (c - '0');
 8004736:	3c30      	subs	r4, #48	; 0x30
 8004738:	fb09 4606 	mla	r6, r9, r6, r4
	while (str_sz-- != 0)
 800473c:	4639      	mov	r1, r7
			continue;
 800473e:	e012      	b.n	8004766 <nmea_atoi+0x3e>
		}

		if (radix == 16)
		{
			c = toupper(c);
 8004740:	f000 fa44 	bl	8004bcc <__locale_ctype_ptr>
 8004744:	f810 300a 	ldrb.w	r3, [r0, sl]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d005      	beq.n	800475c <nmea_atoi+0x34>
			if (c > 'A' || c < 'F')
			{
				value = value * radix + (c - ('A' - 10));
 8004750:	b2e3      	uxtb	r3, r4
 8004752:	3b37      	subs	r3, #55	; 0x37
 8004754:	fb09 3606 	mla	r6, r9, r6, r3
	while (str_sz-- != 0)
 8004758:	4639      	mov	r1, r7
				continue;
 800475a:	e004      	b.n	8004766 <nmea_atoi+0x3e>
			c = toupper(c);
 800475c:	3c20      	subs	r4, #32
 800475e:	e7f7      	b.n	8004750 <nmea_atoi+0x28>
	while (str_sz-- != 0)
 8004760:	4639      	mov	r1, r7
			find_minus = 1;
 8004762:	f04f 0801 	mov.w	r8, #1
	while (str_sz-- != 0)
 8004766:	4628      	mov	r0, r5
 8004768:	1e4f      	subs	r7, r1, #1
 800476a:	b189      	cbz	r1, 8004790 <nmea_atoi+0x68>
		c = *str++;
 800476c:	1c45      	adds	r5, r0, #1
 800476e:	7804      	ldrb	r4, [r0, #0]
		if (c == ' ')
 8004770:	2c20      	cmp	r4, #32
 8004772:	d0f8      	beq.n	8004766 <nmea_atoi+0x3e>
		if (c == '-')
 8004774:	2c2d      	cmp	r4, #45	; 0x2d
 8004776:	d0f3      	beq.n	8004760 <nmea_atoi+0x38>
		if (isdigit(c))
 8004778:	f000 fa28 	bl	8004bcc <__locale_ctype_ptr>
 800477c:	f104 0a01 	add.w	sl, r4, #1
 8004780:	f810 300a 	ldrb.w	r3, [r0, sl]
 8004784:	f013 0f04 	tst.w	r3, #4
 8004788:	d1d5      	bne.n	8004736 <nmea_atoi+0xe>
		if (radix == 16)
 800478a:	f1b9 0f10 	cmp.w	r9, #16
 800478e:	d0d7      	beq.n	8004740 <nmea_atoi+0x18>
			}
		}
		break;
	}
	return (find_minus ? -value : value);
 8004790:	f1b8 0f00 	cmp.w	r8, #0
 8004794:	d000      	beq.n	8004798 <nmea_atoi+0x70>
 8004796:	4276      	negs	r6, r6
}
 8004798:	4630      	mov	r0, r6
 800479a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080047a0 <nmea_atof>:

/**
 * \brief Convert string to fraction number
 */
double nmea_atof(const char *str, int str_sz)
{
 80047a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	b084      	sub	sp, #16
	double value = 0;
	double decimal = 0;
	double divider = 10.0;
	int find_minus = 0;
	int use_decimal = 0;
	int scan_minus = 1;
 80047a6:	2301      	movs	r3, #1
	int use_decimal = 0;
 80047a8:	2500      	movs	r5, #0
	int find_minus = 0;
 80047aa:	46aa      	mov	sl, r5
	double divider = 10.0;
 80047ac:	2600      	movs	r6, #0
 80047ae:	4f3b      	ldr	r7, [pc, #236]	; (800489c <nmea_atof+0xfc>)
 80047b0:	e9cd 6702 	strd	r6, r7, [sp, #8]
	double decimal = 0;
 80047b4:	f04f 0800 	mov.w	r8, #0
 80047b8:	f04f 0900 	mov.w	r9, #0
	double value = 0;
 80047bc:	e9cd 8900 	strd	r8, r9, [sp]

	while(str_sz-- != 0)
 80047c0:	1e4e      	subs	r6, r1, #1
 80047c2:	b1a9      	cbz	r1, 80047f0 <nmea_atof+0x50>
	{
		c = *str++;
 80047c4:	1c47      	adds	r7, r0, #1
 80047c6:	7804      	ldrb	r4, [r0, #0]
		if (scan_minus)
 80047c8:	b11b      	cbz	r3, 80047d2 <nmea_atof+0x32>
		{
			if (c == '-')
 80047ca:	2c2d      	cmp	r4, #45	; 0x2d
 80047cc:	d063      	beq.n	8004896 <nmea_atof+0xf6>
			{
				scan_minus = 0;
				find_minus = 1;
				continue;
			}
			if (c == ' ')
 80047ce:	2c20      	cmp	r4, #32
 80047d0:	d035      	beq.n	800483e <nmea_atof+0x9e>
				continue;
		}
		if (use_decimal)
 80047d2:	2d00      	cmp	r5, #0
 80047d4:	d036      	beq.n	8004844 <nmea_atof+0xa4>
		{
			if (isdigit(c))
 80047d6:	f000 f9f9 	bl	8004bcc <__locale_ctype_ptr>
 80047da:	4420      	add	r0, r4
 80047dc:	7843      	ldrb	r3, [r0, #1]
 80047de:	f013 0f04 	tst.w	r3, #4
 80047e2:	d113      	bne.n	800480c <nmea_atof+0x6c>
			scan_minus = 0;
			use_decimal = 1;
			continue;
		}
		value = 0.0;
		decimal = 0.0;
 80047e4:	f04f 0800 	mov.w	r8, #0
 80047e8:	f04f 0900 	mov.w	r9, #0
		value = 0.0;
 80047ec:	e9cd 8900 	strd	r8, r9, [sp]
		break;
	}
	value += decimal;
 80047f0:	4642      	mov	r2, r8
 80047f2:	464b      	mov	r3, r9
 80047f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047f8:	f7fb fcb8 	bl	800016c <__adddf3>
	return (find_minus ? -value : value);
 80047fc:	f1ba 0f00 	cmp.w	sl, #0
 8004800:	d001      	beq.n	8004806 <nmea_atof+0x66>
 8004802:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
}
 8004806:	b004      	add	sp, #16
 8004808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				decimal += ((double)(c - '0')) / divider;
 800480c:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
 8004810:	f7fb fdf8 	bl	8000404 <__aeabi_i2d>
 8004814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004818:	f7fb ff88 	bl	800072c <__aeabi_ddiv>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4640      	mov	r0, r8
 8004822:	4649      	mov	r1, r9
 8004824:	f7fb fca2 	bl	800016c <__adddf3>
 8004828:	4680      	mov	r8, r0
 800482a:	4689      	mov	r9, r1
				divider *= 10.0;
 800482c:	2200      	movs	r2, #0
 800482e:	4b1b      	ldr	r3, [pc, #108]	; (800489c <nmea_atof+0xfc>)
 8004830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004834:	f7fb fe50 	bl	80004d8 <__aeabi_dmul>
 8004838:	e9cd 0102 	strd	r0, r1, [sp, #8]
				scan_minus = 0;
 800483c:	2300      	movs	r3, #0
			scan_minus = 0;
 800483e:	4631      	mov	r1, r6
 8004840:	4638      	mov	r0, r7
 8004842:	e7bd      	b.n	80047c0 <nmea_atof+0x20>
		else if (isdigit(c))
 8004844:	f000 f9c2 	bl	8004bcc <__locale_ctype_ptr>
 8004848:	4420      	add	r0, r4
 800484a:	7843      	ldrb	r3, [r0, #1]
 800484c:	f013 0f04 	tst.w	r3, #4
 8004850:	d108      	bne.n	8004864 <nmea_atof+0xc4>
		else if (c == '.')
 8004852:	2c2e      	cmp	r4, #46	; 0x2e
 8004854:	d01c      	beq.n	8004890 <nmea_atof+0xf0>
		decimal = 0.0;
 8004856:	f04f 0800 	mov.w	r8, #0
 800485a:	f04f 0900 	mov.w	r9, #0
		value = 0.0;
 800485e:	e9cd 8900 	strd	r8, r9, [sp]
 8004862:	e7c5      	b.n	80047f0 <nmea_atof+0x50>
			value = value * 10.0 + (c - '0');
 8004864:	2200      	movs	r2, #0
 8004866:	4b0d      	ldr	r3, [pc, #52]	; (800489c <nmea_atof+0xfc>)
 8004868:	e9dd 0100 	ldrd	r0, r1, [sp]
 800486c:	f7fb fe34 	bl	80004d8 <__aeabi_dmul>
 8004870:	e9cd 0100 	strd	r0, r1, [sp]
 8004874:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
 8004878:	f7fb fdc4 	bl	8000404 <__aeabi_i2d>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004884:	f7fb fc72 	bl	800016c <__adddf3>
 8004888:	e9cd 0100 	strd	r0, r1, [sp]
			scan_minus = 0;
 800488c:	462b      	mov	r3, r5
			continue;
 800488e:	e7d6      	b.n	800483e <nmea_atof+0x9e>
			scan_minus = 0;
 8004890:	462b      	mov	r3, r5
			use_decimal = 1;
 8004892:	2501      	movs	r5, #1
 8004894:	e7d3      	b.n	800483e <nmea_atof+0x9e>
				find_minus = 1;
 8004896:	469a      	mov	sl, r3
				scan_minus = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	e7d0      	b.n	800483e <nmea_atof+0x9e>
 800489c:	40240000 	.word	0x40240000

080048a0 <nmea_scanf>:

/**
 * \brief Analyse string (specificate for NMEA sentences)
 */
int nmea_scanf(const char *buff, int buff_sz, const char *format, ...)
{
 80048a0:	b40c      	push	{r2, r3}
 80048a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a6:	b083      	sub	sp, #12
 80048a8:	4605      	mov	r5, r0
 80048aa:	ab0c      	add	r3, sp, #48	; 0x30
 80048ac:	f853 4b04 	ldr.w	r4, [r3], #4
	const char *beg_tok;
	const char *end_buf = buff + buff_sz;
 80048b0:	1847      	adds	r7, r0, r1
	int snum = 0, unum = 0;

	int tok_count = 0;
	void *parg_target;

	va_start(arg_ptr, format);
 80048b2:	9301      	str	r3, [sp, #4]
	int tok_count = 0;
 80048b4:	f04f 0900 	mov.w	r9, #0
	const char *beg_fmt = 0;
 80048b8:	46ca      	mov	sl, r9
	int width = 0;
 80048ba:	464e      	mov	r6, r9
	int tok_type = NMEA_TOKS_COMPARE;
 80048bc:	f04f 0801 	mov.w	r8, #1
	
	for(; *format && buff < end_buf; ++format)
 80048c0:	e078      	b.n	80049b4 <nmea_scanf+0x114>
	{
		switch (tok_type)
		{
		case NMEA_TOKS_COMPARE:
			if ('%' == *format)
 80048c2:	2a25      	cmp	r2, #37	; 0x25
 80048c4:	f000 80f2 	beq.w	8004aac <nmea_scanf+0x20c>
				tok_type = NMEA_TOKS_PERCENT;
			else if (*buff++ != *format)
 80048c8:	1c69      	adds	r1, r5, #1
 80048ca:	782b      	ldrb	r3, [r5, #0]
 80048cc:	4293      	cmp	r3, r2
 80048ce:	f040 80f8 	bne.w	8004ac2 <nmea_scanf+0x222>
 80048d2:	460d      	mov	r5, r1
 80048d4:	e06d      	b.n	80049b2 <nmea_scanf+0x112>
				goto fail;
			break;
		case NMEA_TOKS_PERCENT:
			width = 0;
			beg_fmt = format;
 80048d6:	46a2      	mov	sl, r4
			width = 0;
 80048d8:	2600      	movs	r6, #0
			tok_type = NMEA_TOKS_WIDTH;
 80048da:	f04f 0803 	mov.w	r8, #3
		case NMEA_TOKS_WIDTH:
			if (isdigit(*format))
 80048de:	f000 f975 	bl	8004bcc <__locale_ctype_ptr>
 80048e2:	7823      	ldrb	r3, [r4, #0]
 80048e4:	4418      	add	r0, r3
 80048e6:	7843      	ldrb	r3, [r0, #1]
 80048e8:	f013 0f04 	tst.w	r3, #4
 80048ec:	d161      	bne.n	80049b2 <nmea_scanf+0x112>
				break;
			{
				tok_type = NMEA_TOKS_TYPE;
				if (format > beg_fmt)
 80048ee:	4554      	cmp	r4, sl
 80048f0:	d832      	bhi.n	8004958 <nmea_scanf+0xb8>
					width = nmea_atoi(beg_fmt, (int)(format - beg_fmt), 10);
			}
		case NMEA_TOKS_TYPE:
			beg_tok = buff;

			if (width == 0 &&
 80048f2:	b926      	cbnz	r6, 80048fe <nmea_scanf+0x5e>
				(*format == 'c' || *format == 'C')
 80048f4:	7823      	ldrb	r3, [r4, #0]
			if (width == 0 &&
 80048f6:	2b63      	cmp	r3, #99	; 0x63
 80048f8:	d036      	beq.n	8004968 <nmea_scanf+0xc8>
				(*format == 'c' || *format == 'C')
 80048fa:	2b43      	cmp	r3, #67	; 0x43
 80048fc:	d034      	beq.n	8004968 <nmea_scanf+0xc8>
				&& *buff != format[1]
				)
				width = 1;

			if (width)
 80048fe:	b3ce      	cbz	r6, 8004974 <nmea_scanf+0xd4>
			{
				if (buff + width <= end_buf)
 8004900:	eb05 0806 	add.w	r8, r5, r6
 8004904:	45b8      	cmp	r8, r7
 8004906:	f200 80dc 	bhi.w	8004ac2 <nmea_scanf+0x222>
			{
				if (!format[1] || ((buff = (char *)memchr(buff, format[1], end_buf - buff)) == 0))
					buff = end_buf;
			}

			if (buff > end_buf)
 800490a:	45b8      	cmp	r8, r7
 800490c:	f200 80d9 	bhi.w	8004ac2 <nmea_scanf+0x222>
				goto fail;

			tok_type = NMEA_TOKS_COMPARE;
			tok_count++;
 8004910:	f109 0901 	add.w	r9, r9, #1

			parg_target = 0;
			width = (int)(buff - beg_tok);
 8004914:	eba8 0605 	sub.w	r6, r8, r5

			switch (*format)
 8004918:	7823      	ldrb	r3, [r4, #0]
 800491a:	3b43      	subs	r3, #67	; 0x43
 800491c:	2b30      	cmp	r3, #48	; 0x30
 800491e:	f200 8083 	bhi.w	8004a28 <nmea_scanf+0x188>
 8004922:	e8df f003 	tbb	[pc, r3]
 8004926:	8134      	.short	0x8134
 8004928:	81708170 	.word	0x81708170
 800492c:	81818181 	.word	0x81818181
 8004930:	81818181 	.word	0x81818181
 8004934:	815d8181 	.word	0x815d8181
 8004938:	81818181 	.word	0x81818181
 800493c:	81818181 	.word	0x81818181
 8004940:	81818181 	.word	0x81818181
 8004944:	81348181 	.word	0x81348181
 8004948:	81707070 	.word	0x81707070
 800494c:	81818181 	.word	0x81818181
 8004950:	81818181 	.word	0x81818181
 8004954:	8181      	.short	0x8181
 8004956:	5d          	.byte	0x5d
 8004957:	00          	.byte	0x00
					width = nmea_atoi(beg_fmt, (int)(format - beg_fmt), 10);
 8004958:	220a      	movs	r2, #10
 800495a:	eba4 010a 	sub.w	r1, r4, sl
 800495e:	4650      	mov	r0, sl
 8004960:	f7ff fee2 	bl	8004728 <nmea_atoi>
 8004964:	4606      	mov	r6, r0
 8004966:	e7c4      	b.n	80048f2 <nmea_scanf+0x52>
				&& *buff != format[1]
 8004968:	782a      	ldrb	r2, [r5, #0]
 800496a:	7863      	ldrb	r3, [r4, #1]
 800496c:	429a      	cmp	r2, r3
 800496e:	d0c6      	beq.n	80048fe <nmea_scanf+0x5e>
				width = 1;
 8004970:	2601      	movs	r6, #1
 8004972:	e7c5      	b.n	8004900 <nmea_scanf+0x60>
				if (!format[1] || ((buff = (char *)memchr(buff, format[1], end_buf - buff)) == 0))
 8004974:	7861      	ldrb	r1, [r4, #1]
 8004976:	b141      	cbz	r1, 800498a <nmea_scanf+0xea>
 8004978:	1b7a      	subs	r2, r7, r5
 800497a:	4628      	mov	r0, r5
 800497c:	f000 f946 	bl	8004c0c <memchr>
 8004980:	4680      	mov	r8, r0
 8004982:	2800      	cmp	r0, #0
 8004984:	d1c1      	bne.n	800490a <nmea_scanf+0x6a>
					buff = end_buf;
 8004986:	46b8      	mov	r8, r7
 8004988:	e7bf      	b.n	800490a <nmea_scanf+0x6a>
 800498a:	46b8      	mov	r8, r7
 800498c:	e7bd      	b.n	800490a <nmea_scanf+0x6a>
			{
			case 'c':
			case 'C':
				parg_target = (void *)va_arg(arg_ptr, char *);
 800498e:	9b01      	ldr	r3, [sp, #4]
 8004990:	1d1a      	adds	r2, r3, #4
 8004992:	9201      	str	r2, [sp, #4]
 8004994:	f8d3 b000 	ldr.w	fp, [r3]
				if (width && parg_target != 0)
 8004998:	b12e      	cbz	r6, 80049a6 <nmea_scanf+0x106>
 800499a:	f1bb 0f00 	cmp.w	fp, #0
 800499e:	d002      	beq.n	80049a6 <nmea_scanf+0x106>
					*((char *)parg_target) = *beg_tok;
 80049a0:	782b      	ldrb	r3, [r5, #0]
 80049a2:	f88b 3000 	strb.w	r3, [fp]
				if (width && 0 != (parg_target))
					*((double *)parg_target) = nmea_atof(beg_tok, width);
				break;
			};

			if (parg_target)
 80049a6:	f1bb 0f00 	cmp.w	fp, #0
 80049aa:	d03d      	beq.n	8004a28 <nmea_scanf+0x188>
 80049ac:	4645      	mov	r5, r8
			tok_type = NMEA_TOKS_COMPARE;
 80049ae:	f04f 0801 	mov.w	r8, #1
	for(; *format && buff < end_buf; ++format)
 80049b2:	3401      	adds	r4, #1
 80049b4:	7822      	ldrb	r2, [r4, #0]
 80049b6:	2a00      	cmp	r2, #0
 80049b8:	f000 8083 	beq.w	8004ac2 <nmea_scanf+0x222>
 80049bc:	42bd      	cmp	r5, r7
 80049be:	f080 8080 	bcs.w	8004ac2 <nmea_scanf+0x222>
		switch (tok_type)
 80049c2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d8f3      	bhi.n	80049b2 <nmea_scanf+0x112>
 80049ca:	a101      	add	r1, pc, #4	; (adr r1, 80049d0 <nmea_scanf+0x130>)
 80049cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049d0:	080048c3 	.word	0x080048c3
 80049d4:	080048d7 	.word	0x080048d7
 80049d8:	080048df 	.word	0x080048df
 80049dc:	080048f3 	.word	0x080048f3
				parg_target = (void *)va_arg(arg_ptr, char *);
 80049e0:	9b01      	ldr	r3, [sp, #4]
 80049e2:	1d1a      	adds	r2, r3, #4
 80049e4:	9201      	str	r2, [sp, #4]
 80049e6:	f8d3 b000 	ldr.w	fp, [r3]
				if (width && parg_target != 0)
 80049ea:	2e00      	cmp	r6, #0
 80049ec:	d0db      	beq.n	80049a6 <nmea_scanf+0x106>
 80049ee:	f1bb 0f00 	cmp.w	fp, #0
 80049f2:	d0d8      	beq.n	80049a6 <nmea_scanf+0x106>
					memcpy(parg_target, beg_tok, width);
 80049f4:	4632      	mov	r2, r6
 80049f6:	4629      	mov	r1, r5
 80049f8:	4658      	mov	r0, fp
 80049fa:	f000 f924 	bl	8004c46 <memcpy>
					((char *)parg_target)[width] = '\0';
 80049fe:	2300      	movs	r3, #0
 8004a00:	f80b 3006 	strb.w	r3, [fp, r6]
 8004a04:	e7cf      	b.n	80049a6 <nmea_scanf+0x106>
				parg_target = (void *)va_arg(arg_ptr, double *);
 8004a06:	9b01      	ldr	r3, [sp, #4]
 8004a08:	1d1a      	adds	r2, r3, #4
 8004a0a:	9201      	str	r2, [sp, #4]
 8004a0c:	f8d3 b000 	ldr.w	fp, [r3]
				if (width && 0 != (parg_target))
 8004a10:	2e00      	cmp	r6, #0
 8004a12:	d0c8      	beq.n	80049a6 <nmea_scanf+0x106>
 8004a14:	f1bb 0f00 	cmp.w	fp, #0
 8004a18:	d0c5      	beq.n	80049a6 <nmea_scanf+0x106>
					*((double *)parg_target) = nmea_atof(beg_tok, width);
 8004a1a:	4631      	mov	r1, r6
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f7ff febf 	bl	80047a0 <nmea_atof>
 8004a22:	e9cb 0100 	strd	r0, r1, [fp]
 8004a26:	e7be      	b.n	80049a6 <nmea_scanf+0x106>
				break;
			if (0 == (parg_target = (void *)va_arg(arg_ptr, int *)))
 8004a28:	9b01      	ldr	r3, [sp, #4]
 8004a2a:	1d1a      	adds	r2, r3, #4
 8004a2c:	9201      	str	r2, [sp, #4]
 8004a2e:	f8d3 b000 	ldr.w	fp, [r3]
 8004a32:	f1bb 0f00 	cmp.w	fp, #0
 8004a36:	d03c      	beq.n	8004ab2 <nmea_scanf+0x212>
				break;
			if (!width)
 8004a38:	2e00      	cmp	r6, #0
 8004a3a:	d03e      	beq.n	8004aba <nmea_scanf+0x21a>
				break;

			switch(*format)
 8004a3c:	7823      	ldrb	r3, [r4, #0]
 8004a3e:	3b58      	subs	r3, #88	; 0x58
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d83e      	bhi.n	8004ac2 <nmea_scanf+0x222>
 8004a44:	e8df f003 	tbb	[pc, r3]
 8004a48:	3d3d3d27 	.word	0x3d3d3d27
 8004a4c:	3d3d3d3d 	.word	0x3d3d3d3d
 8004a50:	3d3d3d3d 	.word	0x3d3d3d3d
 8004a54:	3d3d3d11 	.word	0x3d3d3d11
 8004a58:	3d3d113d 	.word	0x3d3d113d
 8004a5c:	3d3d3d3d 	.word	0x3d3d3d3d
 8004a60:	3d3d3d3d 	.word	0x3d3d3d3d
 8004a64:	3d3d1c3d 	.word	0x3d3d1c3d
 8004a68:	27          	.byte	0x27
 8004a69:	00          	.byte	0x00
			{
			case 'd':
			case 'i':
				snum = nmea_atoi(beg_tok, width, 10);
 8004a6a:	220a      	movs	r2, #10
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f7ff fe5a 	bl	8004728 <nmea_atoi>
				memcpy(parg_target, &snum, sizeof(int));
 8004a74:	f8cb 0000 	str.w	r0, [fp]
				break;
 8004a78:	4645      	mov	r5, r8
			tok_type = NMEA_TOKS_COMPARE;
 8004a7a:	f04f 0801 	mov.w	r8, #1
				break;
 8004a7e:	e798      	b.n	80049b2 <nmea_scanf+0x112>
			case 'u':
				unum = nmea_atoi(beg_tok, width, 10);
 8004a80:	220a      	movs	r2, #10
 8004a82:	4631      	mov	r1, r6
 8004a84:	4628      	mov	r0, r5
 8004a86:	f7ff fe4f 	bl	8004728 <nmea_atoi>
				memcpy(parg_target, &unum, sizeof(unsigned int));
 8004a8a:	f8cb 0000 	str.w	r0, [fp]
				break;
 8004a8e:	4645      	mov	r5, r8
			tok_type = NMEA_TOKS_COMPARE;
 8004a90:	f04f 0801 	mov.w	r8, #1
				break;
 8004a94:	e78d      	b.n	80049b2 <nmea_scanf+0x112>
			case 'x':
			case 'X':
				unum = nmea_atoi(beg_tok, width, 16);
 8004a96:	2210      	movs	r2, #16
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f7ff fe44 	bl	8004728 <nmea_atoi>
				memcpy(parg_target, &unum, sizeof(unsigned int));
 8004aa0:	f8cb 0000 	str.w	r0, [fp]
				break;
 8004aa4:	4645      	mov	r5, r8
			tok_type = NMEA_TOKS_COMPARE;
 8004aa6:	f04f 0801 	mov.w	r8, #1
				break;
 8004aaa:	e782      	b.n	80049b2 <nmea_scanf+0x112>
				tok_type = NMEA_TOKS_PERCENT;
 8004aac:	f04f 0802 	mov.w	r8, #2
 8004ab0:	e77f      	b.n	80049b2 <nmea_scanf+0x112>
 8004ab2:	4645      	mov	r5, r8
			tok_type = NMEA_TOKS_COMPARE;
 8004ab4:	f04f 0801 	mov.w	r8, #1
 8004ab8:	e77b      	b.n	80049b2 <nmea_scanf+0x112>
 8004aba:	4645      	mov	r5, r8
 8004abc:	f04f 0801 	mov.w	r8, #1
 8004ac0:	e777      	b.n	80049b2 <nmea_scanf+0x112>
fail:

	va_end(arg_ptr);

	return tok_count;
}
 8004ac2:	4648      	mov	r0, r9
 8004ac4:	b003      	add	sp, #12
 8004ac6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aca:	b002      	add	sp, #8
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop

08004ad0 <TokenSize>:
}

int TokenSize(char* src,char c)
{
	char* pos = src;
	if (src != NULL && *src != 0)
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	b150      	cbz	r0, 8004aea <TokenSize+0x1a>
 8004ad4:	7803      	ldrb	r3, [r0, #0]
 8004ad6:	b913      	cbnz	r3, 8004ade <TokenSize+0xe>
	{
		while (*src != 0 && *src != c)
			src++;
		return (src - pos);
	}
	return 0;
 8004ad8:	2000      	movs	r0, #0
 8004ada:	4770      	bx	lr
			src++;
 8004adc:	3001      	adds	r0, #1
		while (*src != 0 && *src != c)
 8004ade:	7803      	ldrb	r3, [r0, #0]
 8004ae0:	b10b      	cbz	r3, 8004ae6 <TokenSize+0x16>
 8004ae2:	428b      	cmp	r3, r1
 8004ae4:	d1fa      	bne.n	8004adc <TokenSize+0xc>
		return (src - pos);
 8004ae6:	1a80      	subs	r0, r0, r2
 8004ae8:	4770      	bx	lr
	return 0;
 8004aea:	2000      	movs	r0, #0
}
 8004aec:	4770      	bx	lr

08004aee <TokenNext>:
	return NULL;
}

char* TokenNext(char *src, char c)
{
	if (src != NULL)
 8004aee:	4603      	mov	r3, r0
 8004af0:	b130      	cbz	r0, 8004b00 <TokenNext+0x12>
	{
		while (*src != 0)
 8004af2:	781a      	ldrb	r2, [r3, #0]
 8004af4:	b12a      	cbz	r2, 8004b02 <TokenNext+0x14>
			if (*src++ == c)
 8004af6:	3301      	adds	r3, #1
 8004af8:	428a      	cmp	r2, r1
 8004afa:	d1fa      	bne.n	8004af2 <TokenNext+0x4>
 8004afc:	4618      	mov	r0, r3
 8004afe:	e001      	b.n	8004b04 <TokenNext+0x16>
 8004b00:	4770      	bx	lr
 8004b02:	4618      	mov	r0, r3
				break;
		if (*src != 0)
 8004b04:	7803      	ldrb	r3, [r0, #0]
 8004b06:	b103      	cbz	r3, 8004b0a <TokenNext+0x1c>
			return src;
	}
	return NULL;
}
 8004b08:	4770      	bx	lr
	return NULL;
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	e7fc      	b.n	8004b08 <TokenNext+0x1a>

08004b0e <strcpyEx>:
	return eos;
}

char * strcpyEx(char *dst, const char *src)
{
	if (src != NULL)
 8004b0e:	460b      	mov	r3, r1
 8004b10:	b919      	cbnz	r1, 8004b1a <strcpyEx+0xc>
 8004b12:	e005      	b.n	8004b20 <strcpyEx+0x12>
		while (*src != '\0')
			*dst++ = *src++;
 8004b14:	3301      	adds	r3, #1
 8004b16:	7002      	strb	r2, [r0, #0]
 8004b18:	3001      	adds	r0, #1
		while (*src != '\0')
 8004b1a:	781a      	ldrb	r2, [r3, #0]
 8004b1c:	2a00      	cmp	r2, #0
 8004b1e:	d1f9      	bne.n	8004b14 <strcpyEx+0x6>
	*dst = '\0';
 8004b20:	2300      	movs	r3, #0
 8004b22:	7003      	strb	r3, [r0, #0]
	return dst;
}
 8004b24:	4770      	bx	lr
	...

08004b28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004b28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004b2a:	e003      	b.n	8004b34 <LoopCopyDataInit>

08004b2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004b2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004b30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004b32:	3104      	adds	r1, #4

08004b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004b34:	480a      	ldr	r0, [pc, #40]	; (8004b60 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004b38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004b3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004b3c:	d3f6      	bcc.n	8004b2c <CopyDataInit>
  ldr r2, =_sbss
 8004b3e:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004b40:	e002      	b.n	8004b48 <LoopFillZerobss>

08004b42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004b42:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004b44:	f842 3b04 	str.w	r3, [r2], #4

08004b48 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004b48:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004b4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004b4c:	d3f9      	bcc.n	8004b42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b4e:	f7ff fdc3 	bl	80046d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b52:	f000 f813 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b56:	f7ff fc89 	bl	800446c <main>
  bx lr
 8004b5a:	4770      	bx	lr
  ldr r3, =_sidata
 8004b5c:	080074b0 	.word	0x080074b0
  ldr r0, =_sdata
 8004b60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004b64:	200001d4 	.word	0x200001d4
  ldr r2, =_sbss
 8004b68:	200001d8 	.word	0x200001d8
  ldr r3, = _ebss
 8004b6c:	20004404 	.word	0x20004404

08004b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b70:	e7fe      	b.n	8004b70 <ADC1_2_IRQHandler>

08004b72 <atoi>:
 8004b72:	220a      	movs	r2, #10
 8004b74:	2100      	movs	r1, #0
 8004b76:	f000 bd7f 	b.w	8005678 <strtol>
	...

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	2500      	movs	r5, #0
 8004b80:	4e0c      	ldr	r6, [pc, #48]	; (8004bb4 <__libc_init_array+0x38>)
 8004b82:	4c0d      	ldr	r4, [pc, #52]	; (8004bb8 <__libc_init_array+0x3c>)
 8004b84:	1ba4      	subs	r4, r4, r6
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	42a5      	cmp	r5, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	f002 f93c 	bl	8006e08 <_init>
 8004b90:	2500      	movs	r5, #0
 8004b92:	4e0a      	ldr	r6, [pc, #40]	; (8004bbc <__libc_init_array+0x40>)
 8004b94:	4c0a      	ldr	r4, [pc, #40]	; (8004bc0 <__libc_init_array+0x44>)
 8004b96:	1ba4      	subs	r4, r4, r6
 8004b98:	10a4      	asrs	r4, r4, #2
 8004b9a:	42a5      	cmp	r5, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ba4:	4798      	blx	r3
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bae:	4798      	blx	r3
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	080074a8 	.word	0x080074a8
 8004bb8:	080074a8 	.word	0x080074a8
 8004bbc:	080074a8 	.word	0x080074a8
 8004bc0:	080074ac 	.word	0x080074ac

08004bc4 <__locale_ctype_ptr_l>:
 8004bc4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004bc8:	4770      	bx	lr
	...

08004bcc <__locale_ctype_ptr>:
 8004bcc:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <__locale_ctype_ptr+0x14>)
 8004bce:	4a05      	ldr	r2, [pc, #20]	; (8004be4 <__locale_ctype_ptr+0x18>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bf08      	it	eq
 8004bd8:	4613      	moveq	r3, r2
 8004bda:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004bde:	4770      	bx	lr
 8004be0:	20000004 	.word	0x20000004
 8004be4:	20000068 	.word	0x20000068

08004be8 <__ascii_mbtowc>:
 8004be8:	b082      	sub	sp, #8
 8004bea:	b901      	cbnz	r1, 8004bee <__ascii_mbtowc+0x6>
 8004bec:	a901      	add	r1, sp, #4
 8004bee:	b142      	cbz	r2, 8004c02 <__ascii_mbtowc+0x1a>
 8004bf0:	b14b      	cbz	r3, 8004c06 <__ascii_mbtowc+0x1e>
 8004bf2:	7813      	ldrb	r3, [r2, #0]
 8004bf4:	600b      	str	r3, [r1, #0]
 8004bf6:	7812      	ldrb	r2, [r2, #0]
 8004bf8:	1c10      	adds	r0, r2, #0
 8004bfa:	bf18      	it	ne
 8004bfc:	2001      	movne	r0, #1
 8004bfe:	b002      	add	sp, #8
 8004c00:	4770      	bx	lr
 8004c02:	4610      	mov	r0, r2
 8004c04:	e7fb      	b.n	8004bfe <__ascii_mbtowc+0x16>
 8004c06:	f06f 0001 	mvn.w	r0, #1
 8004c0a:	e7f8      	b.n	8004bfe <__ascii_mbtowc+0x16>

08004c0c <memchr>:
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	b2c9      	uxtb	r1, r1
 8004c10:	4402      	add	r2, r0
 8004c12:	4290      	cmp	r0, r2
 8004c14:	4603      	mov	r3, r0
 8004c16:	d101      	bne.n	8004c1c <memchr+0x10>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e003      	b.n	8004c24 <memchr+0x18>
 8004c1c:	781c      	ldrb	r4, [r3, #0]
 8004c1e:	3001      	adds	r0, #1
 8004c20:	428c      	cmp	r4, r1
 8004c22:	d1f6      	bne.n	8004c12 <memchr+0x6>
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd10      	pop	{r4, pc}

08004c28 <memcmp>:
 8004c28:	b530      	push	{r4, r5, lr}
 8004c2a:	2400      	movs	r4, #0
 8004c2c:	42a2      	cmp	r2, r4
 8004c2e:	d101      	bne.n	8004c34 <memcmp+0xc>
 8004c30:	2000      	movs	r0, #0
 8004c32:	e007      	b.n	8004c44 <memcmp+0x1c>
 8004c34:	5d03      	ldrb	r3, [r0, r4]
 8004c36:	3401      	adds	r4, #1
 8004c38:	190d      	adds	r5, r1, r4
 8004c3a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004c3e:	42ab      	cmp	r3, r5
 8004c40:	d0f4      	beq.n	8004c2c <memcmp+0x4>
 8004c42:	1b58      	subs	r0, r3, r5
 8004c44:	bd30      	pop	{r4, r5, pc}

08004c46 <memcpy>:
 8004c46:	b510      	push	{r4, lr}
 8004c48:	1e43      	subs	r3, r0, #1
 8004c4a:	440a      	add	r2, r1
 8004c4c:	4291      	cmp	r1, r2
 8004c4e:	d100      	bne.n	8004c52 <memcpy+0xc>
 8004c50:	bd10      	pop	{r4, pc}
 8004c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c5a:	e7f7      	b.n	8004c4c <memcpy+0x6>

08004c5c <memset>:
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4402      	add	r2, r0
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d100      	bne.n	8004c66 <memset+0xa>
 8004c64:	4770      	bx	lr
 8004c66:	f803 1b01 	strb.w	r1, [r3], #1
 8004c6a:	e7f9      	b.n	8004c60 <memset+0x4>

08004c6c <__cvt>:
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c72:	461e      	mov	r6, r3
 8004c74:	bfbb      	ittet	lt
 8004c76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004c7a:	461e      	movlt	r6, r3
 8004c7c:	2300      	movge	r3, #0
 8004c7e:	232d      	movlt	r3, #45	; 0x2d
 8004c80:	b088      	sub	sp, #32
 8004c82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004c84:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004c88:	f027 0720 	bic.w	r7, r7, #32
 8004c8c:	2f46      	cmp	r7, #70	; 0x46
 8004c8e:	4614      	mov	r4, r2
 8004c90:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004c92:	700b      	strb	r3, [r1, #0]
 8004c94:	d004      	beq.n	8004ca0 <__cvt+0x34>
 8004c96:	2f45      	cmp	r7, #69	; 0x45
 8004c98:	d100      	bne.n	8004c9c <__cvt+0x30>
 8004c9a:	3501      	adds	r5, #1
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e000      	b.n	8004ca2 <__cvt+0x36>
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	aa07      	add	r2, sp, #28
 8004ca4:	9204      	str	r2, [sp, #16]
 8004ca6:	aa06      	add	r2, sp, #24
 8004ca8:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004cac:	e9cd 3500 	strd	r3, r5, [sp]
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	4633      	mov	r3, r6
 8004cb4:	f000 fd94 	bl	80057e0 <_dtoa_r>
 8004cb8:	2f47      	cmp	r7, #71	; 0x47
 8004cba:	4680      	mov	r8, r0
 8004cbc:	d102      	bne.n	8004cc4 <__cvt+0x58>
 8004cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cc0:	07db      	lsls	r3, r3, #31
 8004cc2:	d526      	bpl.n	8004d12 <__cvt+0xa6>
 8004cc4:	2f46      	cmp	r7, #70	; 0x46
 8004cc6:	eb08 0905 	add.w	r9, r8, r5
 8004cca:	d111      	bne.n	8004cf0 <__cvt+0x84>
 8004ccc:	f898 3000 	ldrb.w	r3, [r8]
 8004cd0:	2b30      	cmp	r3, #48	; 0x30
 8004cd2:	d10a      	bne.n	8004cea <__cvt+0x7e>
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	4620      	mov	r0, r4
 8004cda:	4631      	mov	r1, r6
 8004cdc:	f7fb fe64 	bl	80009a8 <__aeabi_dcmpeq>
 8004ce0:	b918      	cbnz	r0, 8004cea <__cvt+0x7e>
 8004ce2:	f1c5 0501 	rsb	r5, r5, #1
 8004ce6:	f8ca 5000 	str.w	r5, [sl]
 8004cea:	f8da 3000 	ldr.w	r3, [sl]
 8004cee:	4499      	add	r9, r3
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	f7fb fe56 	bl	80009a8 <__aeabi_dcmpeq>
 8004cfc:	b938      	cbnz	r0, 8004d0e <__cvt+0xa2>
 8004cfe:	2230      	movs	r2, #48	; 0x30
 8004d00:	9b07      	ldr	r3, [sp, #28]
 8004d02:	454b      	cmp	r3, r9
 8004d04:	d205      	bcs.n	8004d12 <__cvt+0xa6>
 8004d06:	1c59      	adds	r1, r3, #1
 8004d08:	9107      	str	r1, [sp, #28]
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e7f8      	b.n	8004d00 <__cvt+0x94>
 8004d0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d12:	4640      	mov	r0, r8
 8004d14:	9b07      	ldr	r3, [sp, #28]
 8004d16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d18:	eba3 0308 	sub.w	r3, r3, r8
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	b008      	add	sp, #32
 8004d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004d24 <__exponent>:
 8004d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d26:	2900      	cmp	r1, #0
 8004d28:	bfb4      	ite	lt
 8004d2a:	232d      	movlt	r3, #45	; 0x2d
 8004d2c:	232b      	movge	r3, #43	; 0x2b
 8004d2e:	4604      	mov	r4, r0
 8004d30:	bfb8      	it	lt
 8004d32:	4249      	neglt	r1, r1
 8004d34:	2909      	cmp	r1, #9
 8004d36:	f804 2b02 	strb.w	r2, [r4], #2
 8004d3a:	7043      	strb	r3, [r0, #1]
 8004d3c:	dd21      	ble.n	8004d82 <__exponent+0x5e>
 8004d3e:	f10d 0307 	add.w	r3, sp, #7
 8004d42:	461f      	mov	r7, r3
 8004d44:	260a      	movs	r6, #10
 8004d46:	fb91 f5f6 	sdiv	r5, r1, r6
 8004d4a:	fb06 1115 	mls	r1, r6, r5, r1
 8004d4e:	2d09      	cmp	r5, #9
 8004d50:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004d54:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d58:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	dc09      	bgt.n	8004d74 <__exponent+0x50>
 8004d60:	3130      	adds	r1, #48	; 0x30
 8004d62:	3b02      	subs	r3, #2
 8004d64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004d68:	42bb      	cmp	r3, r7
 8004d6a:	4622      	mov	r2, r4
 8004d6c:	d304      	bcc.n	8004d78 <__exponent+0x54>
 8004d6e:	1a10      	subs	r0, r2, r0
 8004d70:	b003      	add	sp, #12
 8004d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d74:	4613      	mov	r3, r2
 8004d76:	e7e6      	b.n	8004d46 <__exponent+0x22>
 8004d78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d7c:	f804 2b01 	strb.w	r2, [r4], #1
 8004d80:	e7f2      	b.n	8004d68 <__exponent+0x44>
 8004d82:	2330      	movs	r3, #48	; 0x30
 8004d84:	4419      	add	r1, r3
 8004d86:	7083      	strb	r3, [r0, #2]
 8004d88:	1d02      	adds	r2, r0, #4
 8004d8a:	70c1      	strb	r1, [r0, #3]
 8004d8c:	e7ef      	b.n	8004d6e <__exponent+0x4a>
	...

08004d90 <_printf_float>:
 8004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	b091      	sub	sp, #68	; 0x44
 8004d96:	460c      	mov	r4, r1
 8004d98:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004d9a:	4693      	mov	fp, r2
 8004d9c:	461e      	mov	r6, r3
 8004d9e:	4605      	mov	r5, r0
 8004da0:	f001 fad2 	bl	8006348 <_localeconv_r>
 8004da4:	6803      	ldr	r3, [r0, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	9309      	str	r3, [sp, #36]	; 0x24
 8004daa:	f7fb f9d1 	bl	8000150 <strlen>
 8004dae:	2300      	movs	r3, #0
 8004db0:	930e      	str	r3, [sp, #56]	; 0x38
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	900a      	str	r0, [sp, #40]	; 0x28
 8004db6:	3307      	adds	r3, #7
 8004db8:	f023 0307 	bic.w	r3, r3, #7
 8004dbc:	f103 0208 	add.w	r2, r3, #8
 8004dc0:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004dc4:	f8d4 a000 	ldr.w	sl, [r4]
 8004dc8:	603a      	str	r2, [r7, #0]
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004dd2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004dd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004dda:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004de0:	4ba6      	ldr	r3, [pc, #664]	; (800507c <_printf_float+0x2ec>)
 8004de2:	4638      	mov	r0, r7
 8004de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004de6:	f7fb fe11 	bl	8000a0c <__aeabi_dcmpun>
 8004dea:	bb68      	cbnz	r0, 8004e48 <_printf_float+0xb8>
 8004dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df0:	4ba2      	ldr	r3, [pc, #648]	; (800507c <_printf_float+0x2ec>)
 8004df2:	4638      	mov	r0, r7
 8004df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004df6:	f7fb fdeb 	bl	80009d0 <__aeabi_dcmple>
 8004dfa:	bb28      	cbnz	r0, 8004e48 <_printf_float+0xb8>
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2300      	movs	r3, #0
 8004e00:	4638      	mov	r0, r7
 8004e02:	4649      	mov	r1, r9
 8004e04:	f7fb fdda 	bl	80009bc <__aeabi_dcmplt>
 8004e08:	b110      	cbz	r0, 8004e10 <_printf_float+0x80>
 8004e0a:	232d      	movs	r3, #45	; 0x2d
 8004e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e10:	4f9b      	ldr	r7, [pc, #620]	; (8005080 <_printf_float+0x2f0>)
 8004e12:	4b9c      	ldr	r3, [pc, #624]	; (8005084 <_printf_float+0x2f4>)
 8004e14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e18:	bf98      	it	ls
 8004e1a:	461f      	movls	r7, r3
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	f04f 0900 	mov.w	r9, #0
 8004e22:	6123      	str	r3, [r4, #16]
 8004e24:	f02a 0304 	bic.w	r3, sl, #4
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	9600      	str	r6, [sp, #0]
 8004e2c:	465b      	mov	r3, fp
 8004e2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004e30:	4621      	mov	r1, r4
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 f9e2 	bl	80051fc <_printf_common>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	f040 8090 	bne.w	8004f5e <_printf_float+0x1ce>
 8004e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e42:	b011      	add	sp, #68	; 0x44
 8004e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e48:	463a      	mov	r2, r7
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	4649      	mov	r1, r9
 8004e50:	f7fb fddc 	bl	8000a0c <__aeabi_dcmpun>
 8004e54:	b110      	cbz	r0, 8004e5c <_printf_float+0xcc>
 8004e56:	4f8c      	ldr	r7, [pc, #560]	; (8005088 <_printf_float+0x2f8>)
 8004e58:	4b8c      	ldr	r3, [pc, #560]	; (800508c <_printf_float+0x2fc>)
 8004e5a:	e7db      	b.n	8004e14 <_printf_float+0x84>
 8004e5c:	6863      	ldr	r3, [r4, #4]
 8004e5e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004e62:	1c59      	adds	r1, r3, #1
 8004e64:	a80d      	add	r0, sp, #52	; 0x34
 8004e66:	a90e      	add	r1, sp, #56	; 0x38
 8004e68:	d140      	bne.n	8004eec <_printf_float+0x15c>
 8004e6a:	2306      	movs	r3, #6
 8004e6c:	6063      	str	r3, [r4, #4]
 8004e6e:	f04f 0c00 	mov.w	ip, #0
 8004e72:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004e76:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004e7a:	6863      	ldr	r3, [r4, #4]
 8004e7c:	6022      	str	r2, [r4, #0]
 8004e7e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	463a      	mov	r2, r7
 8004e86:	464b      	mov	r3, r9
 8004e88:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f7ff feed 	bl	8004c6c <__cvt>
 8004e92:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004e96:	2b47      	cmp	r3, #71	; 0x47
 8004e98:	4607      	mov	r7, r0
 8004e9a:	d109      	bne.n	8004eb0 <_printf_float+0x120>
 8004e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e9e:	1cd8      	adds	r0, r3, #3
 8004ea0:	db02      	blt.n	8004ea8 <_printf_float+0x118>
 8004ea2:	6862      	ldr	r2, [r4, #4]
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	dd47      	ble.n	8004f38 <_printf_float+0x1a8>
 8004ea8:	f1a8 0802 	sub.w	r8, r8, #2
 8004eac:	fa5f f888 	uxtb.w	r8, r8
 8004eb0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004eb4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004eb6:	d824      	bhi.n	8004f02 <_printf_float+0x172>
 8004eb8:	3901      	subs	r1, #1
 8004eba:	4642      	mov	r2, r8
 8004ebc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ec0:	910d      	str	r1, [sp, #52]	; 0x34
 8004ec2:	f7ff ff2f 	bl	8004d24 <__exponent>
 8004ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ec8:	4681      	mov	r9, r0
 8004eca:	1813      	adds	r3, r2, r0
 8004ecc:	2a01      	cmp	r2, #1
 8004ece:	6123      	str	r3, [r4, #16]
 8004ed0:	dc02      	bgt.n	8004ed8 <_printf_float+0x148>
 8004ed2:	6822      	ldr	r2, [r4, #0]
 8004ed4:	07d1      	lsls	r1, r2, #31
 8004ed6:	d501      	bpl.n	8004edc <_printf_float+0x14c>
 8004ed8:	3301      	adds	r3, #1
 8004eda:	6123      	str	r3, [r4, #16]
 8004edc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0a2      	beq.n	8004e2a <_printf_float+0x9a>
 8004ee4:	232d      	movs	r3, #45	; 0x2d
 8004ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eea:	e79e      	b.n	8004e2a <_printf_float+0x9a>
 8004eec:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004ef0:	f000 816e 	beq.w	80051d0 <_printf_float+0x440>
 8004ef4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ef8:	d1b9      	bne.n	8004e6e <_printf_float+0xde>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1b7      	bne.n	8004e6e <_printf_float+0xde>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e7b4      	b.n	8004e6c <_printf_float+0xdc>
 8004f02:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004f06:	d119      	bne.n	8004f3c <_printf_float+0x1ac>
 8004f08:	2900      	cmp	r1, #0
 8004f0a:	6863      	ldr	r3, [r4, #4]
 8004f0c:	dd0c      	ble.n	8004f28 <_printf_float+0x198>
 8004f0e:	6121      	str	r1, [r4, #16]
 8004f10:	b913      	cbnz	r3, 8004f18 <_printf_float+0x188>
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	07d2      	lsls	r2, r2, #31
 8004f16:	d502      	bpl.n	8004f1e <_printf_float+0x18e>
 8004f18:	3301      	adds	r3, #1
 8004f1a:	440b      	add	r3, r1
 8004f1c:	6123      	str	r3, [r4, #16]
 8004f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f20:	f04f 0900 	mov.w	r9, #0
 8004f24:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f26:	e7d9      	b.n	8004edc <_printf_float+0x14c>
 8004f28:	b913      	cbnz	r3, 8004f30 <_printf_float+0x1a0>
 8004f2a:	6822      	ldr	r2, [r4, #0]
 8004f2c:	07d0      	lsls	r0, r2, #31
 8004f2e:	d501      	bpl.n	8004f34 <_printf_float+0x1a4>
 8004f30:	3302      	adds	r3, #2
 8004f32:	e7f3      	b.n	8004f1c <_printf_float+0x18c>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e7f1      	b.n	8004f1c <_printf_float+0x18c>
 8004f38:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004f3c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004f40:	4293      	cmp	r3, r2
 8004f42:	db05      	blt.n	8004f50 <_printf_float+0x1c0>
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	6123      	str	r3, [r4, #16]
 8004f48:	07d1      	lsls	r1, r2, #31
 8004f4a:	d5e8      	bpl.n	8004f1e <_printf_float+0x18e>
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	e7e5      	b.n	8004f1c <_printf_float+0x18c>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bfcc      	ite	gt
 8004f54:	2301      	movgt	r3, #1
 8004f56:	f1c3 0302 	rsble	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	e7de      	b.n	8004f1c <_printf_float+0x18c>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	055a      	lsls	r2, r3, #21
 8004f62:	d407      	bmi.n	8004f74 <_printf_float+0x1e4>
 8004f64:	6923      	ldr	r3, [r4, #16]
 8004f66:	463a      	mov	r2, r7
 8004f68:	4659      	mov	r1, fp
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	47b0      	blx	r6
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d129      	bne.n	8004fc6 <_printf_float+0x236>
 8004f72:	e764      	b.n	8004e3e <_printf_float+0xae>
 8004f74:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004f78:	f240 80d7 	bls.w	800512a <_printf_float+0x39a>
 8004f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f80:	2200      	movs	r2, #0
 8004f82:	2300      	movs	r3, #0
 8004f84:	f7fb fd10 	bl	80009a8 <__aeabi_dcmpeq>
 8004f88:	b388      	cbz	r0, 8004fee <_printf_float+0x25e>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4a40      	ldr	r2, [pc, #256]	; (8005090 <_printf_float+0x300>)
 8004f8e:	4659      	mov	r1, fp
 8004f90:	4628      	mov	r0, r5
 8004f92:	47b0      	blx	r6
 8004f94:	3001      	adds	r0, #1
 8004f96:	f43f af52 	beq.w	8004e3e <_printf_float+0xae>
 8004f9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	db02      	blt.n	8004fa8 <_printf_float+0x218>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	07d8      	lsls	r0, r3, #31
 8004fa6:	d50e      	bpl.n	8004fc6 <_printf_float+0x236>
 8004fa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fac:	4659      	mov	r1, fp
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b0      	blx	r6
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	f43f af43 	beq.w	8004e3e <_printf_float+0xae>
 8004fb8:	2700      	movs	r7, #0
 8004fba:	f104 081a 	add.w	r8, r4, #26
 8004fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	42bb      	cmp	r3, r7
 8004fc4:	dc09      	bgt.n	8004fda <_printf_float+0x24a>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	079f      	lsls	r7, r3, #30
 8004fca:	f100 80fd 	bmi.w	80051c8 <_printf_float+0x438>
 8004fce:	68e0      	ldr	r0, [r4, #12]
 8004fd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fd2:	4298      	cmp	r0, r3
 8004fd4:	bfb8      	it	lt
 8004fd6:	4618      	movlt	r0, r3
 8004fd8:	e733      	b.n	8004e42 <_printf_float+0xb2>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4642      	mov	r2, r8
 8004fde:	4659      	mov	r1, fp
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	47b0      	blx	r6
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	f43f af2a 	beq.w	8004e3e <_printf_float+0xae>
 8004fea:	3701      	adds	r7, #1
 8004fec:	e7e7      	b.n	8004fbe <_printf_float+0x22e>
 8004fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	dc2b      	bgt.n	800504c <_printf_float+0x2bc>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	4a26      	ldr	r2, [pc, #152]	; (8005090 <_printf_float+0x300>)
 8004ff8:	4659      	mov	r1, fp
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	47b0      	blx	r6
 8004ffe:	3001      	adds	r0, #1
 8005000:	f43f af1d 	beq.w	8004e3e <_printf_float+0xae>
 8005004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005006:	b923      	cbnz	r3, 8005012 <_printf_float+0x282>
 8005008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800500a:	b913      	cbnz	r3, 8005012 <_printf_float+0x282>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	07d9      	lsls	r1, r3, #31
 8005010:	d5d9      	bpl.n	8004fc6 <_printf_float+0x236>
 8005012:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005016:	4659      	mov	r1, fp
 8005018:	4628      	mov	r0, r5
 800501a:	47b0      	blx	r6
 800501c:	3001      	adds	r0, #1
 800501e:	f43f af0e 	beq.w	8004e3e <_printf_float+0xae>
 8005022:	f04f 0800 	mov.w	r8, #0
 8005026:	f104 091a 	add.w	r9, r4, #26
 800502a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800502c:	425b      	negs	r3, r3
 800502e:	4543      	cmp	r3, r8
 8005030:	dc01      	bgt.n	8005036 <_printf_float+0x2a6>
 8005032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005034:	e797      	b.n	8004f66 <_printf_float+0x1d6>
 8005036:	2301      	movs	r3, #1
 8005038:	464a      	mov	r2, r9
 800503a:	4659      	mov	r1, fp
 800503c:	4628      	mov	r0, r5
 800503e:	47b0      	blx	r6
 8005040:	3001      	adds	r0, #1
 8005042:	f43f aefc 	beq.w	8004e3e <_printf_float+0xae>
 8005046:	f108 0801 	add.w	r8, r8, #1
 800504a:	e7ee      	b.n	800502a <_printf_float+0x29a>
 800504c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800504e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005050:	429a      	cmp	r2, r3
 8005052:	bfa8      	it	ge
 8005054:	461a      	movge	r2, r3
 8005056:	2a00      	cmp	r2, #0
 8005058:	4690      	mov	r8, r2
 800505a:	dd07      	ble.n	800506c <_printf_float+0x2dc>
 800505c:	4613      	mov	r3, r2
 800505e:	4659      	mov	r1, fp
 8005060:	463a      	mov	r2, r7
 8005062:	4628      	mov	r0, r5
 8005064:	47b0      	blx	r6
 8005066:	3001      	adds	r0, #1
 8005068:	f43f aee9 	beq.w	8004e3e <_printf_float+0xae>
 800506c:	f104 031a 	add.w	r3, r4, #26
 8005070:	f04f 0a00 	mov.w	sl, #0
 8005074:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005078:	930b      	str	r3, [sp, #44]	; 0x2c
 800507a:	e015      	b.n	80050a8 <_printf_float+0x318>
 800507c:	7fefffff 	.word	0x7fefffff
 8005080:	0800724e 	.word	0x0800724e
 8005084:	0800724a 	.word	0x0800724a
 8005088:	08007256 	.word	0x08007256
 800508c:	08007252 	.word	0x08007252
 8005090:	0800725a 	.word	0x0800725a
 8005094:	2301      	movs	r3, #1
 8005096:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005098:	4659      	mov	r1, fp
 800509a:	4628      	mov	r0, r5
 800509c:	47b0      	blx	r6
 800509e:	3001      	adds	r0, #1
 80050a0:	f43f aecd 	beq.w	8004e3e <_printf_float+0xae>
 80050a4:	f10a 0a01 	add.w	sl, sl, #1
 80050a8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80050ac:	eba9 0308 	sub.w	r3, r9, r8
 80050b0:	4553      	cmp	r3, sl
 80050b2:	dcef      	bgt.n	8005094 <_printf_float+0x304>
 80050b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050b8:	429a      	cmp	r2, r3
 80050ba:	444f      	add	r7, r9
 80050bc:	db14      	blt.n	80050e8 <_printf_float+0x358>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	07da      	lsls	r2, r3, #31
 80050c2:	d411      	bmi.n	80050e8 <_printf_float+0x358>
 80050c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80050c8:	eba3 0209 	sub.w	r2, r3, r9
 80050cc:	eba3 0901 	sub.w	r9, r3, r1
 80050d0:	4591      	cmp	r9, r2
 80050d2:	bfa8      	it	ge
 80050d4:	4691      	movge	r9, r2
 80050d6:	f1b9 0f00 	cmp.w	r9, #0
 80050da:	dc0d      	bgt.n	80050f8 <_printf_float+0x368>
 80050dc:	2700      	movs	r7, #0
 80050de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050e2:	f104 081a 	add.w	r8, r4, #26
 80050e6:	e018      	b.n	800511a <_printf_float+0x38a>
 80050e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050ec:	4659      	mov	r1, fp
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b0      	blx	r6
 80050f2:	3001      	adds	r0, #1
 80050f4:	d1e6      	bne.n	80050c4 <_printf_float+0x334>
 80050f6:	e6a2      	b.n	8004e3e <_printf_float+0xae>
 80050f8:	464b      	mov	r3, r9
 80050fa:	463a      	mov	r2, r7
 80050fc:	4659      	mov	r1, fp
 80050fe:	4628      	mov	r0, r5
 8005100:	47b0      	blx	r6
 8005102:	3001      	adds	r0, #1
 8005104:	d1ea      	bne.n	80050dc <_printf_float+0x34c>
 8005106:	e69a      	b.n	8004e3e <_printf_float+0xae>
 8005108:	2301      	movs	r3, #1
 800510a:	4642      	mov	r2, r8
 800510c:	4659      	mov	r1, fp
 800510e:	4628      	mov	r0, r5
 8005110:	47b0      	blx	r6
 8005112:	3001      	adds	r0, #1
 8005114:	f43f ae93 	beq.w	8004e3e <_printf_float+0xae>
 8005118:	3701      	adds	r7, #1
 800511a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	eba3 0309 	sub.w	r3, r3, r9
 8005124:	42bb      	cmp	r3, r7
 8005126:	dcef      	bgt.n	8005108 <_printf_float+0x378>
 8005128:	e74d      	b.n	8004fc6 <_printf_float+0x236>
 800512a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800512c:	2a01      	cmp	r2, #1
 800512e:	dc01      	bgt.n	8005134 <_printf_float+0x3a4>
 8005130:	07db      	lsls	r3, r3, #31
 8005132:	d538      	bpl.n	80051a6 <_printf_float+0x416>
 8005134:	2301      	movs	r3, #1
 8005136:	463a      	mov	r2, r7
 8005138:	4659      	mov	r1, fp
 800513a:	4628      	mov	r0, r5
 800513c:	47b0      	blx	r6
 800513e:	3001      	adds	r0, #1
 8005140:	f43f ae7d 	beq.w	8004e3e <_printf_float+0xae>
 8005144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005148:	4659      	mov	r1, fp
 800514a:	4628      	mov	r0, r5
 800514c:	47b0      	blx	r6
 800514e:	3001      	adds	r0, #1
 8005150:	f107 0701 	add.w	r7, r7, #1
 8005154:	f43f ae73 	beq.w	8004e3e <_printf_float+0xae>
 8005158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800515c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800515e:	2200      	movs	r2, #0
 8005160:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005164:	2300      	movs	r3, #0
 8005166:	f7fb fc1f 	bl	80009a8 <__aeabi_dcmpeq>
 800516a:	b9c0      	cbnz	r0, 800519e <_printf_float+0x40e>
 800516c:	4643      	mov	r3, r8
 800516e:	463a      	mov	r2, r7
 8005170:	4659      	mov	r1, fp
 8005172:	4628      	mov	r0, r5
 8005174:	47b0      	blx	r6
 8005176:	3001      	adds	r0, #1
 8005178:	d10d      	bne.n	8005196 <_printf_float+0x406>
 800517a:	e660      	b.n	8004e3e <_printf_float+0xae>
 800517c:	2301      	movs	r3, #1
 800517e:	4642      	mov	r2, r8
 8005180:	4659      	mov	r1, fp
 8005182:	4628      	mov	r0, r5
 8005184:	47b0      	blx	r6
 8005186:	3001      	adds	r0, #1
 8005188:	f43f ae59 	beq.w	8004e3e <_printf_float+0xae>
 800518c:	3701      	adds	r7, #1
 800518e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005190:	3b01      	subs	r3, #1
 8005192:	42bb      	cmp	r3, r7
 8005194:	dcf2      	bgt.n	800517c <_printf_float+0x3ec>
 8005196:	464b      	mov	r3, r9
 8005198:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800519c:	e6e4      	b.n	8004f68 <_printf_float+0x1d8>
 800519e:	2700      	movs	r7, #0
 80051a0:	f104 081a 	add.w	r8, r4, #26
 80051a4:	e7f3      	b.n	800518e <_printf_float+0x3fe>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e7e1      	b.n	800516e <_printf_float+0x3de>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4642      	mov	r2, r8
 80051ae:	4659      	mov	r1, fp
 80051b0:	4628      	mov	r0, r5
 80051b2:	47b0      	blx	r6
 80051b4:	3001      	adds	r0, #1
 80051b6:	f43f ae42 	beq.w	8004e3e <_printf_float+0xae>
 80051ba:	3701      	adds	r7, #1
 80051bc:	68e3      	ldr	r3, [r4, #12]
 80051be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	42bb      	cmp	r3, r7
 80051c4:	dcf1      	bgt.n	80051aa <_printf_float+0x41a>
 80051c6:	e702      	b.n	8004fce <_printf_float+0x23e>
 80051c8:	2700      	movs	r7, #0
 80051ca:	f104 0819 	add.w	r8, r4, #25
 80051ce:	e7f5      	b.n	80051bc <_printf_float+0x42c>
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f43f ae94 	beq.w	8004efe <_printf_float+0x16e>
 80051d6:	f04f 0c00 	mov.w	ip, #0
 80051da:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80051de:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80051e2:	6022      	str	r2, [r4, #0]
 80051e4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80051e8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	463a      	mov	r2, r7
 80051f0:	464b      	mov	r3, r9
 80051f2:	4628      	mov	r0, r5
 80051f4:	f7ff fd3a 	bl	8004c6c <__cvt>
 80051f8:	4607      	mov	r7, r0
 80051fa:	e64f      	b.n	8004e9c <_printf_float+0x10c>

080051fc <_printf_common>:
 80051fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005200:	4691      	mov	r9, r2
 8005202:	461f      	mov	r7, r3
 8005204:	688a      	ldr	r2, [r1, #8]
 8005206:	690b      	ldr	r3, [r1, #16]
 8005208:	4606      	mov	r6, r0
 800520a:	4293      	cmp	r3, r2
 800520c:	bfb8      	it	lt
 800520e:	4613      	movlt	r3, r2
 8005210:	f8c9 3000 	str.w	r3, [r9]
 8005214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005218:	460c      	mov	r4, r1
 800521a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800521e:	b112      	cbz	r2, 8005226 <_printf_common+0x2a>
 8005220:	3301      	adds	r3, #1
 8005222:	f8c9 3000 	str.w	r3, [r9]
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	0699      	lsls	r1, r3, #26
 800522a:	bf42      	ittt	mi
 800522c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005230:	3302      	addmi	r3, #2
 8005232:	f8c9 3000 	strmi.w	r3, [r9]
 8005236:	6825      	ldr	r5, [r4, #0]
 8005238:	f015 0506 	ands.w	r5, r5, #6
 800523c:	d107      	bne.n	800524e <_printf_common+0x52>
 800523e:	f104 0a19 	add.w	sl, r4, #25
 8005242:	68e3      	ldr	r3, [r4, #12]
 8005244:	f8d9 2000 	ldr.w	r2, [r9]
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	42ab      	cmp	r3, r5
 800524c:	dc29      	bgt.n	80052a2 <_printf_common+0xa6>
 800524e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005252:	6822      	ldr	r2, [r4, #0]
 8005254:	3300      	adds	r3, #0
 8005256:	bf18      	it	ne
 8005258:	2301      	movne	r3, #1
 800525a:	0692      	lsls	r2, r2, #26
 800525c:	d42e      	bmi.n	80052bc <_printf_common+0xc0>
 800525e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005262:	4639      	mov	r1, r7
 8005264:	4630      	mov	r0, r6
 8005266:	47c0      	blx	r8
 8005268:	3001      	adds	r0, #1
 800526a:	d021      	beq.n	80052b0 <_printf_common+0xb4>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	68e5      	ldr	r5, [r4, #12]
 8005270:	f003 0306 	and.w	r3, r3, #6
 8005274:	2b04      	cmp	r3, #4
 8005276:	bf18      	it	ne
 8005278:	2500      	movne	r5, #0
 800527a:	f8d9 2000 	ldr.w	r2, [r9]
 800527e:	f04f 0900 	mov.w	r9, #0
 8005282:	bf08      	it	eq
 8005284:	1aad      	subeq	r5, r5, r2
 8005286:	68a3      	ldr	r3, [r4, #8]
 8005288:	6922      	ldr	r2, [r4, #16]
 800528a:	bf08      	it	eq
 800528c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005290:	4293      	cmp	r3, r2
 8005292:	bfc4      	itt	gt
 8005294:	1a9b      	subgt	r3, r3, r2
 8005296:	18ed      	addgt	r5, r5, r3
 8005298:	341a      	adds	r4, #26
 800529a:	454d      	cmp	r5, r9
 800529c:	d11a      	bne.n	80052d4 <_printf_common+0xd8>
 800529e:	2000      	movs	r0, #0
 80052a0:	e008      	b.n	80052b4 <_printf_common+0xb8>
 80052a2:	2301      	movs	r3, #1
 80052a4:	4652      	mov	r2, sl
 80052a6:	4639      	mov	r1, r7
 80052a8:	4630      	mov	r0, r6
 80052aa:	47c0      	blx	r8
 80052ac:	3001      	adds	r0, #1
 80052ae:	d103      	bne.n	80052b8 <_printf_common+0xbc>
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b8:	3501      	adds	r5, #1
 80052ba:	e7c2      	b.n	8005242 <_printf_common+0x46>
 80052bc:	2030      	movs	r0, #48	; 0x30
 80052be:	18e1      	adds	r1, r4, r3
 80052c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052ca:	4422      	add	r2, r4
 80052cc:	3302      	adds	r3, #2
 80052ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052d2:	e7c4      	b.n	800525e <_printf_common+0x62>
 80052d4:	2301      	movs	r3, #1
 80052d6:	4622      	mov	r2, r4
 80052d8:	4639      	mov	r1, r7
 80052da:	4630      	mov	r0, r6
 80052dc:	47c0      	blx	r8
 80052de:	3001      	adds	r0, #1
 80052e0:	d0e6      	beq.n	80052b0 <_printf_common+0xb4>
 80052e2:	f109 0901 	add.w	r9, r9, #1
 80052e6:	e7d8      	b.n	800529a <_printf_common+0x9e>

080052e8 <_printf_i>:
 80052e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052f0:	460c      	mov	r4, r1
 80052f2:	7e09      	ldrb	r1, [r1, #24]
 80052f4:	b085      	sub	sp, #20
 80052f6:	296e      	cmp	r1, #110	; 0x6e
 80052f8:	4617      	mov	r7, r2
 80052fa:	4606      	mov	r6, r0
 80052fc:	4698      	mov	r8, r3
 80052fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005300:	f000 80b3 	beq.w	800546a <_printf_i+0x182>
 8005304:	d822      	bhi.n	800534c <_printf_i+0x64>
 8005306:	2963      	cmp	r1, #99	; 0x63
 8005308:	d036      	beq.n	8005378 <_printf_i+0x90>
 800530a:	d80a      	bhi.n	8005322 <_printf_i+0x3a>
 800530c:	2900      	cmp	r1, #0
 800530e:	f000 80b9 	beq.w	8005484 <_printf_i+0x19c>
 8005312:	2958      	cmp	r1, #88	; 0x58
 8005314:	f000 8083 	beq.w	800541e <_printf_i+0x136>
 8005318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800531c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005320:	e032      	b.n	8005388 <_printf_i+0xa0>
 8005322:	2964      	cmp	r1, #100	; 0x64
 8005324:	d001      	beq.n	800532a <_printf_i+0x42>
 8005326:	2969      	cmp	r1, #105	; 0x69
 8005328:	d1f6      	bne.n	8005318 <_printf_i+0x30>
 800532a:	6820      	ldr	r0, [r4, #0]
 800532c:	6813      	ldr	r3, [r2, #0]
 800532e:	0605      	lsls	r5, r0, #24
 8005330:	f103 0104 	add.w	r1, r3, #4
 8005334:	d52a      	bpl.n	800538c <_printf_i+0xa4>
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6011      	str	r1, [r2, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	da03      	bge.n	8005346 <_printf_i+0x5e>
 800533e:	222d      	movs	r2, #45	; 0x2d
 8005340:	425b      	negs	r3, r3
 8005342:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005346:	486f      	ldr	r0, [pc, #444]	; (8005504 <_printf_i+0x21c>)
 8005348:	220a      	movs	r2, #10
 800534a:	e039      	b.n	80053c0 <_printf_i+0xd8>
 800534c:	2973      	cmp	r1, #115	; 0x73
 800534e:	f000 809d 	beq.w	800548c <_printf_i+0x1a4>
 8005352:	d808      	bhi.n	8005366 <_printf_i+0x7e>
 8005354:	296f      	cmp	r1, #111	; 0x6f
 8005356:	d020      	beq.n	800539a <_printf_i+0xb2>
 8005358:	2970      	cmp	r1, #112	; 0x70
 800535a:	d1dd      	bne.n	8005318 <_printf_i+0x30>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	f043 0320 	orr.w	r3, r3, #32
 8005362:	6023      	str	r3, [r4, #0]
 8005364:	e003      	b.n	800536e <_printf_i+0x86>
 8005366:	2975      	cmp	r1, #117	; 0x75
 8005368:	d017      	beq.n	800539a <_printf_i+0xb2>
 800536a:	2978      	cmp	r1, #120	; 0x78
 800536c:	d1d4      	bne.n	8005318 <_printf_i+0x30>
 800536e:	2378      	movs	r3, #120	; 0x78
 8005370:	4865      	ldr	r0, [pc, #404]	; (8005508 <_printf_i+0x220>)
 8005372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005376:	e055      	b.n	8005424 <_printf_i+0x13c>
 8005378:	6813      	ldr	r3, [r2, #0]
 800537a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800537e:	1d19      	adds	r1, r3, #4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6011      	str	r1, [r2, #0]
 8005384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005388:	2301      	movs	r3, #1
 800538a:	e08c      	b.n	80054a6 <_printf_i+0x1be>
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005392:	6011      	str	r1, [r2, #0]
 8005394:	bf18      	it	ne
 8005396:	b21b      	sxthne	r3, r3
 8005398:	e7cf      	b.n	800533a <_printf_i+0x52>
 800539a:	6813      	ldr	r3, [r2, #0]
 800539c:	6825      	ldr	r5, [r4, #0]
 800539e:	1d18      	adds	r0, r3, #4
 80053a0:	6010      	str	r0, [r2, #0]
 80053a2:	0628      	lsls	r0, r5, #24
 80053a4:	d501      	bpl.n	80053aa <_printf_i+0xc2>
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	e002      	b.n	80053b0 <_printf_i+0xc8>
 80053aa:	0668      	lsls	r0, r5, #25
 80053ac:	d5fb      	bpl.n	80053a6 <_printf_i+0xbe>
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	296f      	cmp	r1, #111	; 0x6f
 80053b2:	bf14      	ite	ne
 80053b4:	220a      	movne	r2, #10
 80053b6:	2208      	moveq	r2, #8
 80053b8:	4852      	ldr	r0, [pc, #328]	; (8005504 <_printf_i+0x21c>)
 80053ba:	2100      	movs	r1, #0
 80053bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053c0:	6865      	ldr	r5, [r4, #4]
 80053c2:	2d00      	cmp	r5, #0
 80053c4:	60a5      	str	r5, [r4, #8]
 80053c6:	f2c0 8095 	blt.w	80054f4 <_printf_i+0x20c>
 80053ca:	6821      	ldr	r1, [r4, #0]
 80053cc:	f021 0104 	bic.w	r1, r1, #4
 80053d0:	6021      	str	r1, [r4, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d13d      	bne.n	8005452 <_printf_i+0x16a>
 80053d6:	2d00      	cmp	r5, #0
 80053d8:	f040 808e 	bne.w	80054f8 <_printf_i+0x210>
 80053dc:	4665      	mov	r5, ip
 80053de:	2a08      	cmp	r2, #8
 80053e0:	d10b      	bne.n	80053fa <_printf_i+0x112>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	07db      	lsls	r3, r3, #31
 80053e6:	d508      	bpl.n	80053fa <_printf_i+0x112>
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	6862      	ldr	r2, [r4, #4]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	bfde      	ittt	le
 80053f0:	2330      	movle	r3, #48	; 0x30
 80053f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053f6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80053fa:	ebac 0305 	sub.w	r3, ip, r5
 80053fe:	6123      	str	r3, [r4, #16]
 8005400:	f8cd 8000 	str.w	r8, [sp]
 8005404:	463b      	mov	r3, r7
 8005406:	aa03      	add	r2, sp, #12
 8005408:	4621      	mov	r1, r4
 800540a:	4630      	mov	r0, r6
 800540c:	f7ff fef6 	bl	80051fc <_printf_common>
 8005410:	3001      	adds	r0, #1
 8005412:	d14d      	bne.n	80054b0 <_printf_i+0x1c8>
 8005414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005418:	b005      	add	sp, #20
 800541a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800541e:	4839      	ldr	r0, [pc, #228]	; (8005504 <_printf_i+0x21c>)
 8005420:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005424:	6813      	ldr	r3, [r2, #0]
 8005426:	6821      	ldr	r1, [r4, #0]
 8005428:	1d1d      	adds	r5, r3, #4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6015      	str	r5, [r2, #0]
 800542e:	060a      	lsls	r2, r1, #24
 8005430:	d50b      	bpl.n	800544a <_printf_i+0x162>
 8005432:	07ca      	lsls	r2, r1, #31
 8005434:	bf44      	itt	mi
 8005436:	f041 0120 	orrmi.w	r1, r1, #32
 800543a:	6021      	strmi	r1, [r4, #0]
 800543c:	b91b      	cbnz	r3, 8005446 <_printf_i+0x15e>
 800543e:	6822      	ldr	r2, [r4, #0]
 8005440:	f022 0220 	bic.w	r2, r2, #32
 8005444:	6022      	str	r2, [r4, #0]
 8005446:	2210      	movs	r2, #16
 8005448:	e7b7      	b.n	80053ba <_printf_i+0xd2>
 800544a:	064d      	lsls	r5, r1, #25
 800544c:	bf48      	it	mi
 800544e:	b29b      	uxthmi	r3, r3
 8005450:	e7ef      	b.n	8005432 <_printf_i+0x14a>
 8005452:	4665      	mov	r5, ip
 8005454:	fbb3 f1f2 	udiv	r1, r3, r2
 8005458:	fb02 3311 	mls	r3, r2, r1, r3
 800545c:	5cc3      	ldrb	r3, [r0, r3]
 800545e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005462:	460b      	mov	r3, r1
 8005464:	2900      	cmp	r1, #0
 8005466:	d1f5      	bne.n	8005454 <_printf_i+0x16c>
 8005468:	e7b9      	b.n	80053de <_printf_i+0xf6>
 800546a:	6813      	ldr	r3, [r2, #0]
 800546c:	6825      	ldr	r5, [r4, #0]
 800546e:	1d18      	adds	r0, r3, #4
 8005470:	6961      	ldr	r1, [r4, #20]
 8005472:	6010      	str	r0, [r2, #0]
 8005474:	0628      	lsls	r0, r5, #24
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	d501      	bpl.n	800547e <_printf_i+0x196>
 800547a:	6019      	str	r1, [r3, #0]
 800547c:	e002      	b.n	8005484 <_printf_i+0x19c>
 800547e:	066a      	lsls	r2, r5, #25
 8005480:	d5fb      	bpl.n	800547a <_printf_i+0x192>
 8005482:	8019      	strh	r1, [r3, #0]
 8005484:	2300      	movs	r3, #0
 8005486:	4665      	mov	r5, ip
 8005488:	6123      	str	r3, [r4, #16]
 800548a:	e7b9      	b.n	8005400 <_printf_i+0x118>
 800548c:	6813      	ldr	r3, [r2, #0]
 800548e:	1d19      	adds	r1, r3, #4
 8005490:	6011      	str	r1, [r2, #0]
 8005492:	681d      	ldr	r5, [r3, #0]
 8005494:	6862      	ldr	r2, [r4, #4]
 8005496:	2100      	movs	r1, #0
 8005498:	4628      	mov	r0, r5
 800549a:	f7ff fbb7 	bl	8004c0c <memchr>
 800549e:	b108      	cbz	r0, 80054a4 <_printf_i+0x1bc>
 80054a0:	1b40      	subs	r0, r0, r5
 80054a2:	6060      	str	r0, [r4, #4]
 80054a4:	6863      	ldr	r3, [r4, #4]
 80054a6:	6123      	str	r3, [r4, #16]
 80054a8:	2300      	movs	r3, #0
 80054aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ae:	e7a7      	b.n	8005400 <_printf_i+0x118>
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	462a      	mov	r2, r5
 80054b4:	4639      	mov	r1, r7
 80054b6:	4630      	mov	r0, r6
 80054b8:	47c0      	blx	r8
 80054ba:	3001      	adds	r0, #1
 80054bc:	d0aa      	beq.n	8005414 <_printf_i+0x12c>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	079b      	lsls	r3, r3, #30
 80054c2:	d413      	bmi.n	80054ec <_printf_i+0x204>
 80054c4:	68e0      	ldr	r0, [r4, #12]
 80054c6:	9b03      	ldr	r3, [sp, #12]
 80054c8:	4298      	cmp	r0, r3
 80054ca:	bfb8      	it	lt
 80054cc:	4618      	movlt	r0, r3
 80054ce:	e7a3      	b.n	8005418 <_printf_i+0x130>
 80054d0:	2301      	movs	r3, #1
 80054d2:	464a      	mov	r2, r9
 80054d4:	4639      	mov	r1, r7
 80054d6:	4630      	mov	r0, r6
 80054d8:	47c0      	blx	r8
 80054da:	3001      	adds	r0, #1
 80054dc:	d09a      	beq.n	8005414 <_printf_i+0x12c>
 80054de:	3501      	adds	r5, #1
 80054e0:	68e3      	ldr	r3, [r4, #12]
 80054e2:	9a03      	ldr	r2, [sp, #12]
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	42ab      	cmp	r3, r5
 80054e8:	dcf2      	bgt.n	80054d0 <_printf_i+0x1e8>
 80054ea:	e7eb      	b.n	80054c4 <_printf_i+0x1dc>
 80054ec:	2500      	movs	r5, #0
 80054ee:	f104 0919 	add.w	r9, r4, #25
 80054f2:	e7f5      	b.n	80054e0 <_printf_i+0x1f8>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1ac      	bne.n	8005452 <_printf_i+0x16a>
 80054f8:	7803      	ldrb	r3, [r0, #0]
 80054fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005502:	e76c      	b.n	80053de <_printf_i+0xf6>
 8005504:	0800725c 	.word	0x0800725c
 8005508:	0800726d 	.word	0x0800726d

0800550c <siprintf>:
 800550c:	b40e      	push	{r1, r2, r3}
 800550e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005512:	b500      	push	{lr}
 8005514:	b09c      	sub	sp, #112	; 0x70
 8005516:	ab1d      	add	r3, sp, #116	; 0x74
 8005518:	9002      	str	r0, [sp, #8]
 800551a:	9006      	str	r0, [sp, #24]
 800551c:	9107      	str	r1, [sp, #28]
 800551e:	9104      	str	r1, [sp, #16]
 8005520:	4808      	ldr	r0, [pc, #32]	; (8005544 <siprintf+0x38>)
 8005522:	4909      	ldr	r1, [pc, #36]	; (8005548 <siprintf+0x3c>)
 8005524:	f853 2b04 	ldr.w	r2, [r3], #4
 8005528:	9105      	str	r1, [sp, #20]
 800552a:	6800      	ldr	r0, [r0, #0]
 800552c:	a902      	add	r1, sp, #8
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	f001 fb0a 	bl	8006b48 <_svfiprintf_r>
 8005534:	2200      	movs	r2, #0
 8005536:	9b02      	ldr	r3, [sp, #8]
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	b01c      	add	sp, #112	; 0x70
 800553c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005540:	b003      	add	sp, #12
 8005542:	4770      	bx	lr
 8005544:	20000004 	.word	0x20000004
 8005548:	ffff0208 	.word	0xffff0208

0800554c <strpbrk>:
 800554c:	b570      	push	{r4, r5, r6, lr}
 800554e:	7803      	ldrb	r3, [r0, #0]
 8005550:	b1a3      	cbz	r3, 800557c <strpbrk+0x30>
 8005552:	4603      	mov	r3, r0
 8005554:	460c      	mov	r4, r1
 8005556:	4618      	mov	r0, r3
 8005558:	f813 5b01 	ldrb.w	r5, [r3], #1
 800555c:	b14d      	cbz	r5, 8005572 <strpbrk+0x26>
 800555e:	460a      	mov	r2, r1
 8005560:	e001      	b.n	8005566 <strpbrk+0x1a>
 8005562:	42ae      	cmp	r6, r5
 8005564:	d005      	beq.n	8005572 <strpbrk+0x26>
 8005566:	4614      	mov	r4, r2
 8005568:	f812 6b01 	ldrb.w	r6, [r2], #1
 800556c:	2e00      	cmp	r6, #0
 800556e:	d1f8      	bne.n	8005562 <strpbrk+0x16>
 8005570:	e7f1      	b.n	8005556 <strpbrk+0xa>
 8005572:	7823      	ldrb	r3, [r4, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	bf08      	it	eq
 8005578:	2000      	moveq	r0, #0
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	4618      	mov	r0, r3
 800557e:	e7fc      	b.n	800557a <strpbrk+0x2e>

08005580 <_strtol_l.isra.0>:
 8005580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005584:	4680      	mov	r8, r0
 8005586:	4689      	mov	r9, r1
 8005588:	4692      	mov	sl, r2
 800558a:	461e      	mov	r6, r3
 800558c:	460f      	mov	r7, r1
 800558e:	463d      	mov	r5, r7
 8005590:	9808      	ldr	r0, [sp, #32]
 8005592:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005596:	f7ff fb15 	bl	8004bc4 <__locale_ctype_ptr_l>
 800559a:	4420      	add	r0, r4
 800559c:	7843      	ldrb	r3, [r0, #1]
 800559e:	f013 0308 	ands.w	r3, r3, #8
 80055a2:	d132      	bne.n	800560a <_strtol_l.isra.0+0x8a>
 80055a4:	2c2d      	cmp	r4, #45	; 0x2d
 80055a6:	d132      	bne.n	800560e <_strtol_l.isra.0+0x8e>
 80055a8:	2201      	movs	r2, #1
 80055aa:	787c      	ldrb	r4, [r7, #1]
 80055ac:	1cbd      	adds	r5, r7, #2
 80055ae:	2e00      	cmp	r6, #0
 80055b0:	d05d      	beq.n	800566e <_strtol_l.isra.0+0xee>
 80055b2:	2e10      	cmp	r6, #16
 80055b4:	d109      	bne.n	80055ca <_strtol_l.isra.0+0x4a>
 80055b6:	2c30      	cmp	r4, #48	; 0x30
 80055b8:	d107      	bne.n	80055ca <_strtol_l.isra.0+0x4a>
 80055ba:	782b      	ldrb	r3, [r5, #0]
 80055bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80055c0:	2b58      	cmp	r3, #88	; 0x58
 80055c2:	d14f      	bne.n	8005664 <_strtol_l.isra.0+0xe4>
 80055c4:	2610      	movs	r6, #16
 80055c6:	786c      	ldrb	r4, [r5, #1]
 80055c8:	3502      	adds	r5, #2
 80055ca:	2a00      	cmp	r2, #0
 80055cc:	bf14      	ite	ne
 80055ce:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80055d2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80055d6:	2700      	movs	r7, #0
 80055d8:	fbb1 fcf6 	udiv	ip, r1, r6
 80055dc:	4638      	mov	r0, r7
 80055de:	fb06 1e1c 	mls	lr, r6, ip, r1
 80055e2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80055e6:	2b09      	cmp	r3, #9
 80055e8:	d817      	bhi.n	800561a <_strtol_l.isra.0+0x9a>
 80055ea:	461c      	mov	r4, r3
 80055ec:	42a6      	cmp	r6, r4
 80055ee:	dd23      	ble.n	8005638 <_strtol_l.isra.0+0xb8>
 80055f0:	1c7b      	adds	r3, r7, #1
 80055f2:	d007      	beq.n	8005604 <_strtol_l.isra.0+0x84>
 80055f4:	4584      	cmp	ip, r0
 80055f6:	d31c      	bcc.n	8005632 <_strtol_l.isra.0+0xb2>
 80055f8:	d101      	bne.n	80055fe <_strtol_l.isra.0+0x7e>
 80055fa:	45a6      	cmp	lr, r4
 80055fc:	db19      	blt.n	8005632 <_strtol_l.isra.0+0xb2>
 80055fe:	2701      	movs	r7, #1
 8005600:	fb00 4006 	mla	r0, r0, r6, r4
 8005604:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005608:	e7eb      	b.n	80055e2 <_strtol_l.isra.0+0x62>
 800560a:	462f      	mov	r7, r5
 800560c:	e7bf      	b.n	800558e <_strtol_l.isra.0+0xe>
 800560e:	2c2b      	cmp	r4, #43	; 0x2b
 8005610:	bf04      	itt	eq
 8005612:	1cbd      	addeq	r5, r7, #2
 8005614:	787c      	ldrbeq	r4, [r7, #1]
 8005616:	461a      	mov	r2, r3
 8005618:	e7c9      	b.n	80055ae <_strtol_l.isra.0+0x2e>
 800561a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800561e:	2b19      	cmp	r3, #25
 8005620:	d801      	bhi.n	8005626 <_strtol_l.isra.0+0xa6>
 8005622:	3c37      	subs	r4, #55	; 0x37
 8005624:	e7e2      	b.n	80055ec <_strtol_l.isra.0+0x6c>
 8005626:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800562a:	2b19      	cmp	r3, #25
 800562c:	d804      	bhi.n	8005638 <_strtol_l.isra.0+0xb8>
 800562e:	3c57      	subs	r4, #87	; 0x57
 8005630:	e7dc      	b.n	80055ec <_strtol_l.isra.0+0x6c>
 8005632:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005636:	e7e5      	b.n	8005604 <_strtol_l.isra.0+0x84>
 8005638:	1c7b      	adds	r3, r7, #1
 800563a:	d108      	bne.n	800564e <_strtol_l.isra.0+0xce>
 800563c:	2322      	movs	r3, #34	; 0x22
 800563e:	4608      	mov	r0, r1
 8005640:	f8c8 3000 	str.w	r3, [r8]
 8005644:	f1ba 0f00 	cmp.w	sl, #0
 8005648:	d107      	bne.n	800565a <_strtol_l.isra.0+0xda>
 800564a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564e:	b102      	cbz	r2, 8005652 <_strtol_l.isra.0+0xd2>
 8005650:	4240      	negs	r0, r0
 8005652:	f1ba 0f00 	cmp.w	sl, #0
 8005656:	d0f8      	beq.n	800564a <_strtol_l.isra.0+0xca>
 8005658:	b10f      	cbz	r7, 800565e <_strtol_l.isra.0+0xde>
 800565a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800565e:	f8ca 9000 	str.w	r9, [sl]
 8005662:	e7f2      	b.n	800564a <_strtol_l.isra.0+0xca>
 8005664:	2430      	movs	r4, #48	; 0x30
 8005666:	2e00      	cmp	r6, #0
 8005668:	d1af      	bne.n	80055ca <_strtol_l.isra.0+0x4a>
 800566a:	2608      	movs	r6, #8
 800566c:	e7ad      	b.n	80055ca <_strtol_l.isra.0+0x4a>
 800566e:	2c30      	cmp	r4, #48	; 0x30
 8005670:	d0a3      	beq.n	80055ba <_strtol_l.isra.0+0x3a>
 8005672:	260a      	movs	r6, #10
 8005674:	e7a9      	b.n	80055ca <_strtol_l.isra.0+0x4a>
	...

08005678 <strtol>:
 8005678:	4b08      	ldr	r3, [pc, #32]	; (800569c <strtol+0x24>)
 800567a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800567c:	681c      	ldr	r4, [r3, #0]
 800567e:	4d08      	ldr	r5, [pc, #32]	; (80056a0 <strtol+0x28>)
 8005680:	6a23      	ldr	r3, [r4, #32]
 8005682:	2b00      	cmp	r3, #0
 8005684:	bf08      	it	eq
 8005686:	462b      	moveq	r3, r5
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4613      	mov	r3, r2
 800568c:	460a      	mov	r2, r1
 800568e:	4601      	mov	r1, r0
 8005690:	4620      	mov	r0, r4
 8005692:	f7ff ff75 	bl	8005580 <_strtol_l.isra.0>
 8005696:	b003      	add	sp, #12
 8005698:	bd30      	pop	{r4, r5, pc}
 800569a:	bf00      	nop
 800569c:	20000004 	.word	0x20000004
 80056a0:	20000068 	.word	0x20000068

080056a4 <__ascii_wctomb>:
 80056a4:	b149      	cbz	r1, 80056ba <__ascii_wctomb+0x16>
 80056a6:	2aff      	cmp	r2, #255	; 0xff
 80056a8:	bf8b      	itete	hi
 80056aa:	238a      	movhi	r3, #138	; 0x8a
 80056ac:	700a      	strbls	r2, [r1, #0]
 80056ae:	6003      	strhi	r3, [r0, #0]
 80056b0:	2001      	movls	r0, #1
 80056b2:	bf88      	it	hi
 80056b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80056b8:	4770      	bx	lr
 80056ba:	4608      	mov	r0, r1
 80056bc:	4770      	bx	lr

080056be <quorem>:
 80056be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c2:	6903      	ldr	r3, [r0, #16]
 80056c4:	690c      	ldr	r4, [r1, #16]
 80056c6:	4680      	mov	r8, r0
 80056c8:	42a3      	cmp	r3, r4
 80056ca:	f2c0 8084 	blt.w	80057d6 <quorem+0x118>
 80056ce:	3c01      	subs	r4, #1
 80056d0:	f101 0714 	add.w	r7, r1, #20
 80056d4:	f100 0614 	add.w	r6, r0, #20
 80056d8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80056dc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80056e0:	3501      	adds	r5, #1
 80056e2:	fbb0 f5f5 	udiv	r5, r0, r5
 80056e6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80056ea:	eb06 030c 	add.w	r3, r6, ip
 80056ee:	eb07 090c 	add.w	r9, r7, ip
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	b39d      	cbz	r5, 800575e <quorem+0xa0>
 80056f6:	f04f 0a00 	mov.w	sl, #0
 80056fa:	4638      	mov	r0, r7
 80056fc:	46b6      	mov	lr, r6
 80056fe:	46d3      	mov	fp, sl
 8005700:	f850 2b04 	ldr.w	r2, [r0], #4
 8005704:	b293      	uxth	r3, r2
 8005706:	fb05 a303 	mla	r3, r5, r3, sl
 800570a:	0c12      	lsrs	r2, r2, #16
 800570c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005710:	fb05 a202 	mla	r2, r5, r2, sl
 8005714:	b29b      	uxth	r3, r3
 8005716:	ebab 0303 	sub.w	r3, fp, r3
 800571a:	f8de b000 	ldr.w	fp, [lr]
 800571e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005722:	fa1f fb8b 	uxth.w	fp, fp
 8005726:	445b      	add	r3, fp
 8005728:	fa1f fb82 	uxth.w	fp, r2
 800572c:	f8de 2000 	ldr.w	r2, [lr]
 8005730:	4581      	cmp	r9, r0
 8005732:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005736:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800573a:	b29b      	uxth	r3, r3
 800573c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005740:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005744:	f84e 3b04 	str.w	r3, [lr], #4
 8005748:	d2da      	bcs.n	8005700 <quorem+0x42>
 800574a:	f856 300c 	ldr.w	r3, [r6, ip]
 800574e:	b933      	cbnz	r3, 800575e <quorem+0xa0>
 8005750:	9b01      	ldr	r3, [sp, #4]
 8005752:	3b04      	subs	r3, #4
 8005754:	429e      	cmp	r6, r3
 8005756:	461a      	mov	r2, r3
 8005758:	d331      	bcc.n	80057be <quorem+0x100>
 800575a:	f8c8 4010 	str.w	r4, [r8, #16]
 800575e:	4640      	mov	r0, r8
 8005760:	f001 f81c 	bl	800679c <__mcmp>
 8005764:	2800      	cmp	r0, #0
 8005766:	db26      	blt.n	80057b6 <quorem+0xf8>
 8005768:	4630      	mov	r0, r6
 800576a:	f04f 0c00 	mov.w	ip, #0
 800576e:	3501      	adds	r5, #1
 8005770:	f857 1b04 	ldr.w	r1, [r7], #4
 8005774:	f8d0 e000 	ldr.w	lr, [r0]
 8005778:	b28b      	uxth	r3, r1
 800577a:	ebac 0303 	sub.w	r3, ip, r3
 800577e:	fa1f f28e 	uxth.w	r2, lr
 8005782:	4413      	add	r3, r2
 8005784:	0c0a      	lsrs	r2, r1, #16
 8005786:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800578a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800578e:	b29b      	uxth	r3, r3
 8005790:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005794:	45b9      	cmp	r9, r7
 8005796:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800579a:	f840 3b04 	str.w	r3, [r0], #4
 800579e:	d2e7      	bcs.n	8005770 <quorem+0xb2>
 80057a0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80057a4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80057a8:	b92a      	cbnz	r2, 80057b6 <quorem+0xf8>
 80057aa:	3b04      	subs	r3, #4
 80057ac:	429e      	cmp	r6, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	d30b      	bcc.n	80057ca <quorem+0x10c>
 80057b2:	f8c8 4010 	str.w	r4, [r8, #16]
 80057b6:	4628      	mov	r0, r5
 80057b8:	b003      	add	sp, #12
 80057ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	3b04      	subs	r3, #4
 80057c2:	2a00      	cmp	r2, #0
 80057c4:	d1c9      	bne.n	800575a <quorem+0x9c>
 80057c6:	3c01      	subs	r4, #1
 80057c8:	e7c4      	b.n	8005754 <quorem+0x96>
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	3b04      	subs	r3, #4
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	d1ef      	bne.n	80057b2 <quorem+0xf4>
 80057d2:	3c01      	subs	r4, #1
 80057d4:	e7ea      	b.n	80057ac <quorem+0xee>
 80057d6:	2000      	movs	r0, #0
 80057d8:	e7ee      	b.n	80057b8 <quorem+0xfa>
 80057da:	0000      	movs	r0, r0
 80057dc:	0000      	movs	r0, r0
	...

080057e0 <_dtoa_r>:
 80057e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e4:	4616      	mov	r6, r2
 80057e6:	461f      	mov	r7, r3
 80057e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80057ea:	b095      	sub	sp, #84	; 0x54
 80057ec:	4604      	mov	r4, r0
 80057ee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80057f2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80057f6:	b93d      	cbnz	r5, 8005808 <_dtoa_r+0x28>
 80057f8:	2010      	movs	r0, #16
 80057fa:	f000 fdb3 	bl	8006364 <malloc>
 80057fe:	6260      	str	r0, [r4, #36]	; 0x24
 8005800:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005804:	6005      	str	r5, [r0, #0]
 8005806:	60c5      	str	r5, [r0, #12]
 8005808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800580a:	6819      	ldr	r1, [r3, #0]
 800580c:	b151      	cbz	r1, 8005824 <_dtoa_r+0x44>
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	2301      	movs	r3, #1
 8005812:	4093      	lsls	r3, r2
 8005814:	604a      	str	r2, [r1, #4]
 8005816:	608b      	str	r3, [r1, #8]
 8005818:	4620      	mov	r0, r4
 800581a:	f000 fddf 	bl	80063dc <_Bfree>
 800581e:	2200      	movs	r2, #0
 8005820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	1e3b      	subs	r3, r7, #0
 8005826:	bfaf      	iteee	ge
 8005828:	2300      	movge	r3, #0
 800582a:	2201      	movlt	r2, #1
 800582c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005830:	9303      	strlt	r3, [sp, #12]
 8005832:	bfac      	ite	ge
 8005834:	f8c8 3000 	strge.w	r3, [r8]
 8005838:	f8c8 2000 	strlt.w	r2, [r8]
 800583c:	4bae      	ldr	r3, [pc, #696]	; (8005af8 <_dtoa_r+0x318>)
 800583e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005842:	ea33 0308 	bics.w	r3, r3, r8
 8005846:	d11b      	bne.n	8005880 <_dtoa_r+0xa0>
 8005848:	f242 730f 	movw	r3, #9999	; 0x270f
 800584c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	9b02      	ldr	r3, [sp, #8]
 8005852:	b923      	cbnz	r3, 800585e <_dtoa_r+0x7e>
 8005854:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005858:	2800      	cmp	r0, #0
 800585a:	f000 8545 	beq.w	80062e8 <_dtoa_r+0xb08>
 800585e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005860:	b953      	cbnz	r3, 8005878 <_dtoa_r+0x98>
 8005862:	4ba6      	ldr	r3, [pc, #664]	; (8005afc <_dtoa_r+0x31c>)
 8005864:	e021      	b.n	80058aa <_dtoa_r+0xca>
 8005866:	4ba6      	ldr	r3, [pc, #664]	; (8005b00 <_dtoa_r+0x320>)
 8005868:	9306      	str	r3, [sp, #24]
 800586a:	3308      	adds	r3, #8
 800586c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	9806      	ldr	r0, [sp, #24]
 8005872:	b015      	add	sp, #84	; 0x54
 8005874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005878:	4ba0      	ldr	r3, [pc, #640]	; (8005afc <_dtoa_r+0x31c>)
 800587a:	9306      	str	r3, [sp, #24]
 800587c:	3303      	adds	r3, #3
 800587e:	e7f5      	b.n	800586c <_dtoa_r+0x8c>
 8005880:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005884:	2200      	movs	r2, #0
 8005886:	2300      	movs	r3, #0
 8005888:	4630      	mov	r0, r6
 800588a:	4639      	mov	r1, r7
 800588c:	f7fb f88c 	bl	80009a8 <__aeabi_dcmpeq>
 8005890:	4682      	mov	sl, r0
 8005892:	b160      	cbz	r0, 80058ae <_dtoa_r+0xce>
 8005894:	2301      	movs	r3, #1
 8005896:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 8520 	beq.w	80062e2 <_dtoa_r+0xb02>
 80058a2:	4b98      	ldr	r3, [pc, #608]	; (8005b04 <_dtoa_r+0x324>)
 80058a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	9306      	str	r3, [sp, #24]
 80058ac:	e7e0      	b.n	8005870 <_dtoa_r+0x90>
 80058ae:	ab12      	add	r3, sp, #72	; 0x48
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	ab13      	add	r3, sp, #76	; 0x4c
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	4632      	mov	r2, r6
 80058b8:	463b      	mov	r3, r7
 80058ba:	4620      	mov	r0, r4
 80058bc:	f000 ffe6 	bl	800688c <__d2b>
 80058c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80058c4:	4683      	mov	fp, r0
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	d07d      	beq.n	80059c6 <_dtoa_r+0x1e6>
 80058ca:	46b0      	mov	r8, r6
 80058cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80058d0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80058d4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80058d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80058dc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80058e0:	2200      	movs	r2, #0
 80058e2:	4b89      	ldr	r3, [pc, #548]	; (8005b08 <_dtoa_r+0x328>)
 80058e4:	4640      	mov	r0, r8
 80058e6:	4649      	mov	r1, r9
 80058e8:	f7fa fc3e 	bl	8000168 <__aeabi_dsub>
 80058ec:	a37c      	add	r3, pc, #496	; (adr r3, 8005ae0 <_dtoa_r+0x300>)
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	f7fa fdf1 	bl	80004d8 <__aeabi_dmul>
 80058f6:	a37c      	add	r3, pc, #496	; (adr r3, 8005ae8 <_dtoa_r+0x308>)
 80058f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fc:	f7fa fc36 	bl	800016c <__adddf3>
 8005900:	4606      	mov	r6, r0
 8005902:	4628      	mov	r0, r5
 8005904:	460f      	mov	r7, r1
 8005906:	f7fa fd7d 	bl	8000404 <__aeabi_i2d>
 800590a:	a379      	add	r3, pc, #484	; (adr r3, 8005af0 <_dtoa_r+0x310>)
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	f7fa fde2 	bl	80004d8 <__aeabi_dmul>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4630      	mov	r0, r6
 800591a:	4639      	mov	r1, r7
 800591c:	f7fa fc26 	bl	800016c <__adddf3>
 8005920:	4606      	mov	r6, r0
 8005922:	460f      	mov	r7, r1
 8005924:	f7fb f888 	bl	8000a38 <__aeabi_d2iz>
 8005928:	2200      	movs	r2, #0
 800592a:	4682      	mov	sl, r0
 800592c:	2300      	movs	r3, #0
 800592e:	4630      	mov	r0, r6
 8005930:	4639      	mov	r1, r7
 8005932:	f7fb f843 	bl	80009bc <__aeabi_dcmplt>
 8005936:	b148      	cbz	r0, 800594c <_dtoa_r+0x16c>
 8005938:	4650      	mov	r0, sl
 800593a:	f7fa fd63 	bl	8000404 <__aeabi_i2d>
 800593e:	4632      	mov	r2, r6
 8005940:	463b      	mov	r3, r7
 8005942:	f7fb f831 	bl	80009a8 <__aeabi_dcmpeq>
 8005946:	b908      	cbnz	r0, 800594c <_dtoa_r+0x16c>
 8005948:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800594c:	f1ba 0f16 	cmp.w	sl, #22
 8005950:	d85a      	bhi.n	8005a08 <_dtoa_r+0x228>
 8005952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005956:	496d      	ldr	r1, [pc, #436]	; (8005b0c <_dtoa_r+0x32c>)
 8005958:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800595c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005960:	f7fb f84a 	bl	80009f8 <__aeabi_dcmpgt>
 8005964:	2800      	cmp	r0, #0
 8005966:	d051      	beq.n	8005a0c <_dtoa_r+0x22c>
 8005968:	2300      	movs	r3, #0
 800596a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800596e:	930d      	str	r3, [sp, #52]	; 0x34
 8005970:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005972:	1b5d      	subs	r5, r3, r5
 8005974:	1e6b      	subs	r3, r5, #1
 8005976:	9307      	str	r3, [sp, #28]
 8005978:	bf43      	ittte	mi
 800597a:	2300      	movmi	r3, #0
 800597c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005980:	9307      	strmi	r3, [sp, #28]
 8005982:	f04f 0900 	movpl.w	r9, #0
 8005986:	f1ba 0f00 	cmp.w	sl, #0
 800598a:	db41      	blt.n	8005a10 <_dtoa_r+0x230>
 800598c:	9b07      	ldr	r3, [sp, #28]
 800598e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005992:	4453      	add	r3, sl
 8005994:	9307      	str	r3, [sp, #28]
 8005996:	2300      	movs	r3, #0
 8005998:	9308      	str	r3, [sp, #32]
 800599a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800599c:	2b09      	cmp	r3, #9
 800599e:	f200 808f 	bhi.w	8005ac0 <_dtoa_r+0x2e0>
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	bfc4      	itt	gt
 80059a6:	3b04      	subgt	r3, #4
 80059a8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80059aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80059ac:	bfc8      	it	gt
 80059ae:	2500      	movgt	r5, #0
 80059b0:	f1a3 0302 	sub.w	r3, r3, #2
 80059b4:	bfd8      	it	le
 80059b6:	2501      	movle	r5, #1
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	f200 808d 	bhi.w	8005ad8 <_dtoa_r+0x2f8>
 80059be:	e8df f003 	tbb	[pc, r3]
 80059c2:	7d7b      	.short	0x7d7b
 80059c4:	6f2f      	.short	0x6f2f
 80059c6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80059ca:	441d      	add	r5, r3
 80059cc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80059d0:	2820      	cmp	r0, #32
 80059d2:	dd13      	ble.n	80059fc <_dtoa_r+0x21c>
 80059d4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80059d8:	9b02      	ldr	r3, [sp, #8]
 80059da:	fa08 f800 	lsl.w	r8, r8, r0
 80059de:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80059e2:	fa23 f000 	lsr.w	r0, r3, r0
 80059e6:	ea48 0000 	orr.w	r0, r8, r0
 80059ea:	f7fa fcfb 	bl	80003e4 <__aeabi_ui2d>
 80059ee:	2301      	movs	r3, #1
 80059f0:	4680      	mov	r8, r0
 80059f2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80059f6:	3d01      	subs	r5, #1
 80059f8:	9310      	str	r3, [sp, #64]	; 0x40
 80059fa:	e771      	b.n	80058e0 <_dtoa_r+0x100>
 80059fc:	9b02      	ldr	r3, [sp, #8]
 80059fe:	f1c0 0020 	rsb	r0, r0, #32
 8005a02:	fa03 f000 	lsl.w	r0, r3, r0
 8005a06:	e7f0      	b.n	80059ea <_dtoa_r+0x20a>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e7b0      	b.n	800596e <_dtoa_r+0x18e>
 8005a0c:	900d      	str	r0, [sp, #52]	; 0x34
 8005a0e:	e7af      	b.n	8005970 <_dtoa_r+0x190>
 8005a10:	f1ca 0300 	rsb	r3, sl, #0
 8005a14:	9308      	str	r3, [sp, #32]
 8005a16:	2300      	movs	r3, #0
 8005a18:	eba9 090a 	sub.w	r9, r9, sl
 8005a1c:	930c      	str	r3, [sp, #48]	; 0x30
 8005a1e:	e7bc      	b.n	800599a <_dtoa_r+0x1ba>
 8005a20:	2301      	movs	r3, #1
 8005a22:	9309      	str	r3, [sp, #36]	; 0x24
 8005a24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	dd74      	ble.n	8005b14 <_dtoa_r+0x334>
 8005a2a:	4698      	mov	r8, r3
 8005a2c:	9304      	str	r3, [sp, #16]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a32:	6072      	str	r2, [r6, #4]
 8005a34:	2204      	movs	r2, #4
 8005a36:	f102 0014 	add.w	r0, r2, #20
 8005a3a:	4298      	cmp	r0, r3
 8005a3c:	6871      	ldr	r1, [r6, #4]
 8005a3e:	d96e      	bls.n	8005b1e <_dtoa_r+0x33e>
 8005a40:	4620      	mov	r0, r4
 8005a42:	f000 fc97 	bl	8006374 <_Balloc>
 8005a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a48:	6030      	str	r0, [r6, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f1b8 0f0e 	cmp.w	r8, #14
 8005a50:	9306      	str	r3, [sp, #24]
 8005a52:	f200 80ed 	bhi.w	8005c30 <_dtoa_r+0x450>
 8005a56:	2d00      	cmp	r5, #0
 8005a58:	f000 80ea 	beq.w	8005c30 <_dtoa_r+0x450>
 8005a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a60:	f1ba 0f00 	cmp.w	sl, #0
 8005a64:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005a68:	dd77      	ble.n	8005b5a <_dtoa_r+0x37a>
 8005a6a:	4a28      	ldr	r2, [pc, #160]	; (8005b0c <_dtoa_r+0x32c>)
 8005a6c:	f00a 030f 	and.w	r3, sl, #15
 8005a70:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005a74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a78:	06f0      	lsls	r0, r6, #27
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005a82:	d568      	bpl.n	8005b56 <_dtoa_r+0x376>
 8005a84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005a88:	4b21      	ldr	r3, [pc, #132]	; (8005b10 <_dtoa_r+0x330>)
 8005a8a:	2503      	movs	r5, #3
 8005a8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a90:	f7fa fe4c 	bl	800072c <__aeabi_ddiv>
 8005a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a98:	f006 060f 	and.w	r6, r6, #15
 8005a9c:	4f1c      	ldr	r7, [pc, #112]	; (8005b10 <_dtoa_r+0x330>)
 8005a9e:	e04f      	b.n	8005b40 <_dtoa_r+0x360>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005aa6:	4453      	add	r3, sl
 8005aa8:	f103 0801 	add.w	r8, r3, #1
 8005aac:	9304      	str	r3, [sp, #16]
 8005aae:	4643      	mov	r3, r8
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	bfb8      	it	lt
 8005ab4:	2301      	movlt	r3, #1
 8005ab6:	e7ba      	b.n	8005a2e <_dtoa_r+0x24e>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e7b2      	b.n	8005a22 <_dtoa_r+0x242>
 8005abc:	2300      	movs	r3, #0
 8005abe:	e7f0      	b.n	8005aa2 <_dtoa_r+0x2c2>
 8005ac0:	2501      	movs	r5, #1
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	9509      	str	r5, [sp, #36]	; 0x24
 8005ac6:	931e      	str	r3, [sp, #120]	; 0x78
 8005ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005acc:	2200      	movs	r2, #0
 8005ace:	9304      	str	r3, [sp, #16]
 8005ad0:	4698      	mov	r8, r3
 8005ad2:	2312      	movs	r3, #18
 8005ad4:	921f      	str	r2, [sp, #124]	; 0x7c
 8005ad6:	e7aa      	b.n	8005a2e <_dtoa_r+0x24e>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	9309      	str	r3, [sp, #36]	; 0x24
 8005adc:	e7f4      	b.n	8005ac8 <_dtoa_r+0x2e8>
 8005ade:	bf00      	nop
 8005ae0:	636f4361 	.word	0x636f4361
 8005ae4:	3fd287a7 	.word	0x3fd287a7
 8005ae8:	8b60c8b3 	.word	0x8b60c8b3
 8005aec:	3fc68a28 	.word	0x3fc68a28
 8005af0:	509f79fb 	.word	0x509f79fb
 8005af4:	3fd34413 	.word	0x3fd34413
 8005af8:	7ff00000 	.word	0x7ff00000
 8005afc:	08007388 	.word	0x08007388
 8005b00:	0800737f 	.word	0x0800737f
 8005b04:	0800725b 	.word	0x0800725b
 8005b08:	3ff80000 	.word	0x3ff80000
 8005b0c:	080073b8 	.word	0x080073b8
 8005b10:	08007390 	.word	0x08007390
 8005b14:	2301      	movs	r3, #1
 8005b16:	9304      	str	r3, [sp, #16]
 8005b18:	4698      	mov	r8, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	e7da      	b.n	8005ad4 <_dtoa_r+0x2f4>
 8005b1e:	3101      	adds	r1, #1
 8005b20:	6071      	str	r1, [r6, #4]
 8005b22:	0052      	lsls	r2, r2, #1
 8005b24:	e787      	b.n	8005a36 <_dtoa_r+0x256>
 8005b26:	07f1      	lsls	r1, r6, #31
 8005b28:	d508      	bpl.n	8005b3c <_dtoa_r+0x35c>
 8005b2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b32:	f7fa fcd1 	bl	80004d8 <__aeabi_dmul>
 8005b36:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b3a:	3501      	adds	r5, #1
 8005b3c:	1076      	asrs	r6, r6, #1
 8005b3e:	3708      	adds	r7, #8
 8005b40:	2e00      	cmp	r6, #0
 8005b42:	d1f0      	bne.n	8005b26 <_dtoa_r+0x346>
 8005b44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b4c:	f7fa fdee 	bl	800072c <__aeabi_ddiv>
 8005b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b54:	e01b      	b.n	8005b8e <_dtoa_r+0x3ae>
 8005b56:	2502      	movs	r5, #2
 8005b58:	e7a0      	b.n	8005a9c <_dtoa_r+0x2bc>
 8005b5a:	f000 80a4 	beq.w	8005ca6 <_dtoa_r+0x4c6>
 8005b5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005b62:	f1ca 0600 	rsb	r6, sl, #0
 8005b66:	4ba0      	ldr	r3, [pc, #640]	; (8005de8 <_dtoa_r+0x608>)
 8005b68:	f006 020f 	and.w	r2, r6, #15
 8005b6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f7fa fcb0 	bl	80004d8 <__aeabi_dmul>
 8005b78:	2502      	movs	r5, #2
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b80:	4f9a      	ldr	r7, [pc, #616]	; (8005dec <_dtoa_r+0x60c>)
 8005b82:	1136      	asrs	r6, r6, #4
 8005b84:	2e00      	cmp	r6, #0
 8005b86:	f040 8083 	bne.w	8005c90 <_dtoa_r+0x4b0>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e0      	bne.n	8005b50 <_dtoa_r+0x370>
 8005b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 808a 	beq.w	8005caa <_dtoa_r+0x4ca>
 8005b96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005b9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	4b92      	ldr	r3, [pc, #584]	; (8005df0 <_dtoa_r+0x610>)
 8005ba6:	f7fa ff09 	bl	80009bc <__aeabi_dcmplt>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d07d      	beq.n	8005caa <_dtoa_r+0x4ca>
 8005bae:	f1b8 0f00 	cmp.w	r8, #0
 8005bb2:	d07a      	beq.n	8005caa <_dtoa_r+0x4ca>
 8005bb4:	9b04      	ldr	r3, [sp, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	dd36      	ble.n	8005c28 <_dtoa_r+0x448>
 8005bba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	4b8c      	ldr	r3, [pc, #560]	; (8005df4 <_dtoa_r+0x614>)
 8005bc2:	f7fa fc89 	bl	80004d8 <__aeabi_dmul>
 8005bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bca:	9e04      	ldr	r6, [sp, #16]
 8005bcc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8005bd0:	3501      	adds	r5, #1
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f7fa fc16 	bl	8000404 <__aeabi_i2d>
 8005bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bdc:	f7fa fc7c 	bl	80004d8 <__aeabi_dmul>
 8005be0:	2200      	movs	r2, #0
 8005be2:	4b85      	ldr	r3, [pc, #532]	; (8005df8 <_dtoa_r+0x618>)
 8005be4:	f7fa fac2 	bl	800016c <__adddf3>
 8005be8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005bec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005bf0:	950b      	str	r5, [sp, #44]	; 0x2c
 8005bf2:	2e00      	cmp	r6, #0
 8005bf4:	d15c      	bne.n	8005cb0 <_dtoa_r+0x4d0>
 8005bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	4b7f      	ldr	r3, [pc, #508]	; (8005dfc <_dtoa_r+0x61c>)
 8005bfe:	f7fa fab3 	bl	8000168 <__aeabi_dsub>
 8005c02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c04:	462b      	mov	r3, r5
 8005c06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c0a:	f7fa fef5 	bl	80009f8 <__aeabi_dcmpgt>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	f040 8281 	bne.w	8006116 <_dtoa_r+0x936>
 8005c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c1a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005c1e:	f7fa fecd 	bl	80009bc <__aeabi_dcmplt>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	f040 8275 	bne.w	8006112 <_dtoa_r+0x932>
 8005c28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005c2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f2c0 814b 	blt.w	8005ece <_dtoa_r+0x6ee>
 8005c38:	f1ba 0f0e 	cmp.w	sl, #14
 8005c3c:	f300 8147 	bgt.w	8005ece <_dtoa_r+0x6ee>
 8005c40:	4b69      	ldr	r3, [pc, #420]	; (8005de8 <_dtoa_r+0x608>)
 8005c42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f280 80d7 	bge.w	8005e04 <_dtoa_r+0x624>
 8005c56:	f1b8 0f00 	cmp.w	r8, #0
 8005c5a:	f300 80d3 	bgt.w	8005e04 <_dtoa_r+0x624>
 8005c5e:	f040 8257 	bne.w	8006110 <_dtoa_r+0x930>
 8005c62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c66:	2200      	movs	r2, #0
 8005c68:	4b64      	ldr	r3, [pc, #400]	; (8005dfc <_dtoa_r+0x61c>)
 8005c6a:	f7fa fc35 	bl	80004d8 <__aeabi_dmul>
 8005c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c72:	f7fa feb7 	bl	80009e4 <__aeabi_dcmpge>
 8005c76:	4646      	mov	r6, r8
 8005c78:	4647      	mov	r7, r8
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	f040 822d 	bne.w	80060da <_dtoa_r+0x8fa>
 8005c80:	9b06      	ldr	r3, [sp, #24]
 8005c82:	9a06      	ldr	r2, [sp, #24]
 8005c84:	1c5d      	adds	r5, r3, #1
 8005c86:	2331      	movs	r3, #49	; 0x31
 8005c88:	f10a 0a01 	add.w	sl, sl, #1
 8005c8c:	7013      	strb	r3, [r2, #0]
 8005c8e:	e228      	b.n	80060e2 <_dtoa_r+0x902>
 8005c90:	07f2      	lsls	r2, r6, #31
 8005c92:	d505      	bpl.n	8005ca0 <_dtoa_r+0x4c0>
 8005c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c98:	f7fa fc1e 	bl	80004d8 <__aeabi_dmul>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	3501      	adds	r5, #1
 8005ca0:	1076      	asrs	r6, r6, #1
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	e76e      	b.n	8005b84 <_dtoa_r+0x3a4>
 8005ca6:	2502      	movs	r5, #2
 8005ca8:	e771      	b.n	8005b8e <_dtoa_r+0x3ae>
 8005caa:	4657      	mov	r7, sl
 8005cac:	4646      	mov	r6, r8
 8005cae:	e790      	b.n	8005bd2 <_dtoa_r+0x3f2>
 8005cb0:	4b4d      	ldr	r3, [pc, #308]	; (8005de8 <_dtoa_r+0x608>)
 8005cb2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005cb6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d048      	beq.n	8005d52 <_dtoa_r+0x572>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	494e      	ldr	r1, [pc, #312]	; (8005e00 <_dtoa_r+0x620>)
 8005cc8:	f7fa fd30 	bl	800072c <__aeabi_ddiv>
 8005ccc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005cd0:	f7fa fa4a 	bl	8000168 <__aeabi_dsub>
 8005cd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005cd8:	9d06      	ldr	r5, [sp, #24]
 8005cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cde:	f7fa feab 	bl	8000a38 <__aeabi_d2iz>
 8005ce2:	9011      	str	r0, [sp, #68]	; 0x44
 8005ce4:	f7fa fb8e 	bl	8000404 <__aeabi_i2d>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cf0:	f7fa fa3a 	bl	8000168 <__aeabi_dsub>
 8005cf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cfa:	3330      	adds	r3, #48	; 0x30
 8005cfc:	f805 3b01 	strb.w	r3, [r5], #1
 8005d00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d04:	f7fa fe5a 	bl	80009bc <__aeabi_dcmplt>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d163      	bne.n	8005dd4 <_dtoa_r+0x5f4>
 8005d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d10:	2000      	movs	r0, #0
 8005d12:	4937      	ldr	r1, [pc, #220]	; (8005df0 <_dtoa_r+0x610>)
 8005d14:	f7fa fa28 	bl	8000168 <__aeabi_dsub>
 8005d18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d1c:	f7fa fe4e 	bl	80009bc <__aeabi_dcmplt>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	f040 80b5 	bne.w	8005e90 <_dtoa_r+0x6b0>
 8005d26:	9b06      	ldr	r3, [sp, #24]
 8005d28:	1aeb      	subs	r3, r5, r3
 8005d2a:	429e      	cmp	r6, r3
 8005d2c:	f77f af7c 	ble.w	8005c28 <_dtoa_r+0x448>
 8005d30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d34:	2200      	movs	r2, #0
 8005d36:	4b2f      	ldr	r3, [pc, #188]	; (8005df4 <_dtoa_r+0x614>)
 8005d38:	f7fa fbce 	bl	80004d8 <__aeabi_dmul>
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d46:	4b2b      	ldr	r3, [pc, #172]	; (8005df4 <_dtoa_r+0x614>)
 8005d48:	f7fa fbc6 	bl	80004d8 <__aeabi_dmul>
 8005d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d50:	e7c3      	b.n	8005cda <_dtoa_r+0x4fa>
 8005d52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d56:	f7fa fbbf 	bl	80004d8 <__aeabi_dmul>
 8005d5a:	9b06      	ldr	r3, [sp, #24]
 8005d5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d60:	199d      	adds	r5, r3, r6
 8005d62:	461e      	mov	r6, r3
 8005d64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d68:	f7fa fe66 	bl	8000a38 <__aeabi_d2iz>
 8005d6c:	9011      	str	r0, [sp, #68]	; 0x44
 8005d6e:	f7fa fb49 	bl	8000404 <__aeabi_i2d>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d7a:	f7fa f9f5 	bl	8000168 <__aeabi_dsub>
 8005d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d84:	3330      	adds	r3, #48	; 0x30
 8005d86:	f806 3b01 	strb.w	r3, [r6], #1
 8005d8a:	42ae      	cmp	r6, r5
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	d124      	bne.n	8005ddc <_dtoa_r+0x5fc>
 8005d92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d96:	4b1a      	ldr	r3, [pc, #104]	; (8005e00 <_dtoa_r+0x620>)
 8005d98:	f7fa f9e8 	bl	800016c <__adddf3>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005da4:	f7fa fe28 	bl	80009f8 <__aeabi_dcmpgt>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d171      	bne.n	8005e90 <_dtoa_r+0x6b0>
 8005dac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005db0:	2000      	movs	r0, #0
 8005db2:	4913      	ldr	r1, [pc, #76]	; (8005e00 <_dtoa_r+0x620>)
 8005db4:	f7fa f9d8 	bl	8000168 <__aeabi_dsub>
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dc0:	f7fa fdfc 	bl	80009bc <__aeabi_dcmplt>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	f43f af2f 	beq.w	8005c28 <_dtoa_r+0x448>
 8005dca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005dce:	1e6a      	subs	r2, r5, #1
 8005dd0:	2b30      	cmp	r3, #48	; 0x30
 8005dd2:	d001      	beq.n	8005dd8 <_dtoa_r+0x5f8>
 8005dd4:	46ba      	mov	sl, r7
 8005dd6:	e04a      	b.n	8005e6e <_dtoa_r+0x68e>
 8005dd8:	4615      	mov	r5, r2
 8005dda:	e7f6      	b.n	8005dca <_dtoa_r+0x5ea>
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <_dtoa_r+0x614>)
 8005dde:	f7fa fb7b 	bl	80004d8 <__aeabi_dmul>
 8005de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005de6:	e7bd      	b.n	8005d64 <_dtoa_r+0x584>
 8005de8:	080073b8 	.word	0x080073b8
 8005dec:	08007390 	.word	0x08007390
 8005df0:	3ff00000 	.word	0x3ff00000
 8005df4:	40240000 	.word	0x40240000
 8005df8:	401c0000 	.word	0x401c0000
 8005dfc:	40140000 	.word	0x40140000
 8005e00:	3fe00000 	.word	0x3fe00000
 8005e04:	9d06      	ldr	r5, [sp, #24]
 8005e06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e0e:	4630      	mov	r0, r6
 8005e10:	4639      	mov	r1, r7
 8005e12:	f7fa fc8b 	bl	800072c <__aeabi_ddiv>
 8005e16:	f7fa fe0f 	bl	8000a38 <__aeabi_d2iz>
 8005e1a:	4681      	mov	r9, r0
 8005e1c:	f7fa faf2 	bl	8000404 <__aeabi_i2d>
 8005e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e24:	f7fa fb58 	bl	80004d8 <__aeabi_dmul>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	4639      	mov	r1, r7
 8005e30:	f7fa f99a 	bl	8000168 <__aeabi_dsub>
 8005e34:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005e38:	f805 6b01 	strb.w	r6, [r5], #1
 8005e3c:	9e06      	ldr	r6, [sp, #24]
 8005e3e:	4602      	mov	r2, r0
 8005e40:	1bae      	subs	r6, r5, r6
 8005e42:	45b0      	cmp	r8, r6
 8005e44:	460b      	mov	r3, r1
 8005e46:	d135      	bne.n	8005eb4 <_dtoa_r+0x6d4>
 8005e48:	f7fa f990 	bl	800016c <__adddf3>
 8005e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e50:	4606      	mov	r6, r0
 8005e52:	460f      	mov	r7, r1
 8005e54:	f7fa fdd0 	bl	80009f8 <__aeabi_dcmpgt>
 8005e58:	b9c8      	cbnz	r0, 8005e8e <_dtoa_r+0x6ae>
 8005e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e5e:	4630      	mov	r0, r6
 8005e60:	4639      	mov	r1, r7
 8005e62:	f7fa fda1 	bl	80009a8 <__aeabi_dcmpeq>
 8005e66:	b110      	cbz	r0, 8005e6e <_dtoa_r+0x68e>
 8005e68:	f019 0f01 	tst.w	r9, #1
 8005e6c:	d10f      	bne.n	8005e8e <_dtoa_r+0x6ae>
 8005e6e:	4659      	mov	r1, fp
 8005e70:	4620      	mov	r0, r4
 8005e72:	f000 fab3 	bl	80063dc <_Bfree>
 8005e76:	2300      	movs	r3, #0
 8005e78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e7a:	702b      	strb	r3, [r5, #0]
 8005e7c:	f10a 0301 	add.w	r3, sl, #1
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f43f acf3 	beq.w	8005870 <_dtoa_r+0x90>
 8005e8a:	601d      	str	r5, [r3, #0]
 8005e8c:	e4f0      	b.n	8005870 <_dtoa_r+0x90>
 8005e8e:	4657      	mov	r7, sl
 8005e90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e94:	1e6b      	subs	r3, r5, #1
 8005e96:	2a39      	cmp	r2, #57	; 0x39
 8005e98:	d106      	bne.n	8005ea8 <_dtoa_r+0x6c8>
 8005e9a:	9a06      	ldr	r2, [sp, #24]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d107      	bne.n	8005eb0 <_dtoa_r+0x6d0>
 8005ea0:	2330      	movs	r3, #48	; 0x30
 8005ea2:	7013      	strb	r3, [r2, #0]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	3701      	adds	r7, #1
 8005ea8:	781a      	ldrb	r2, [r3, #0]
 8005eaa:	3201      	adds	r2, #1
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e791      	b.n	8005dd4 <_dtoa_r+0x5f4>
 8005eb0:	461d      	mov	r5, r3
 8005eb2:	e7ed      	b.n	8005e90 <_dtoa_r+0x6b0>
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4b99      	ldr	r3, [pc, #612]	; (800611c <_dtoa_r+0x93c>)
 8005eb8:	f7fa fb0e 	bl	80004d8 <__aeabi_dmul>
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	460f      	mov	r7, r1
 8005ec4:	f7fa fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d09e      	beq.n	8005e0a <_dtoa_r+0x62a>
 8005ecc:	e7cf      	b.n	8005e6e <_dtoa_r+0x68e>
 8005ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed0:	2a00      	cmp	r2, #0
 8005ed2:	f000 8088 	beq.w	8005fe6 <_dtoa_r+0x806>
 8005ed6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ed8:	2a01      	cmp	r2, #1
 8005eda:	dc6d      	bgt.n	8005fb8 <_dtoa_r+0x7d8>
 8005edc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ede:	2a00      	cmp	r2, #0
 8005ee0:	d066      	beq.n	8005fb0 <_dtoa_r+0x7d0>
 8005ee2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ee6:	464d      	mov	r5, r9
 8005ee8:	9e08      	ldr	r6, [sp, #32]
 8005eea:	9a07      	ldr	r2, [sp, #28]
 8005eec:	2101      	movs	r1, #1
 8005eee:	441a      	add	r2, r3
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	4499      	add	r9, r3
 8005ef4:	9207      	str	r2, [sp, #28]
 8005ef6:	f000 fb11 	bl	800651c <__i2b>
 8005efa:	4607      	mov	r7, r0
 8005efc:	2d00      	cmp	r5, #0
 8005efe:	dd0b      	ble.n	8005f18 <_dtoa_r+0x738>
 8005f00:	9b07      	ldr	r3, [sp, #28]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	dd08      	ble.n	8005f18 <_dtoa_r+0x738>
 8005f06:	42ab      	cmp	r3, r5
 8005f08:	bfa8      	it	ge
 8005f0a:	462b      	movge	r3, r5
 8005f0c:	9a07      	ldr	r2, [sp, #28]
 8005f0e:	eba9 0903 	sub.w	r9, r9, r3
 8005f12:	1aed      	subs	r5, r5, r3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	9307      	str	r3, [sp, #28]
 8005f18:	9b08      	ldr	r3, [sp, #32]
 8005f1a:	b1eb      	cbz	r3, 8005f58 <_dtoa_r+0x778>
 8005f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d065      	beq.n	8005fee <_dtoa_r+0x80e>
 8005f22:	b18e      	cbz	r6, 8005f48 <_dtoa_r+0x768>
 8005f24:	4639      	mov	r1, r7
 8005f26:	4632      	mov	r2, r6
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f000 fb95 	bl	8006658 <__pow5mult>
 8005f2e:	465a      	mov	r2, fp
 8005f30:	4601      	mov	r1, r0
 8005f32:	4607      	mov	r7, r0
 8005f34:	4620      	mov	r0, r4
 8005f36:	f000 fafa 	bl	800652e <__multiply>
 8005f3a:	4659      	mov	r1, fp
 8005f3c:	900a      	str	r0, [sp, #40]	; 0x28
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f000 fa4c 	bl	80063dc <_Bfree>
 8005f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f46:	469b      	mov	fp, r3
 8005f48:	9b08      	ldr	r3, [sp, #32]
 8005f4a:	1b9a      	subs	r2, r3, r6
 8005f4c:	d004      	beq.n	8005f58 <_dtoa_r+0x778>
 8005f4e:	4659      	mov	r1, fp
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 fb81 	bl	8006658 <__pow5mult>
 8005f56:	4683      	mov	fp, r0
 8005f58:	2101      	movs	r1, #1
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 fade 	bl	800651c <__i2b>
 8005f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f62:	4606      	mov	r6, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 81c6 	beq.w	80062f6 <_dtoa_r+0xb16>
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4601      	mov	r1, r0
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f000 fb72 	bl	8006658 <__pow5mult>
 8005f74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f76:	4606      	mov	r6, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	dc3e      	bgt.n	8005ffa <_dtoa_r+0x81a>
 8005f7c:	9b02      	ldr	r3, [sp, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d137      	bne.n	8005ff2 <_dtoa_r+0x812>
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d134      	bne.n	8005ff6 <_dtoa_r+0x816>
 8005f8c:	9b03      	ldr	r3, [sp, #12]
 8005f8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f92:	0d1b      	lsrs	r3, r3, #20
 8005f94:	051b      	lsls	r3, r3, #20
 8005f96:	b12b      	cbz	r3, 8005fa4 <_dtoa_r+0x7c4>
 8005f98:	9b07      	ldr	r3, [sp, #28]
 8005f9a:	f109 0901 	add.w	r9, r9, #1
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	9307      	str	r3, [sp, #28]
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	9308      	str	r3, [sp, #32]
 8005fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d128      	bne.n	8005ffe <_dtoa_r+0x81e>
 8005fac:	2001      	movs	r0, #1
 8005fae:	e02e      	b.n	800600e <_dtoa_r+0x82e>
 8005fb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fb2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fb6:	e796      	b.n	8005ee6 <_dtoa_r+0x706>
 8005fb8:	9b08      	ldr	r3, [sp, #32]
 8005fba:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8005fbe:	42b3      	cmp	r3, r6
 8005fc0:	bfb7      	itett	lt
 8005fc2:	9b08      	ldrlt	r3, [sp, #32]
 8005fc4:	1b9e      	subge	r6, r3, r6
 8005fc6:	1af2      	sublt	r2, r6, r3
 8005fc8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005fca:	bfbf      	itttt	lt
 8005fcc:	9608      	strlt	r6, [sp, #32]
 8005fce:	189b      	addlt	r3, r3, r2
 8005fd0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005fd2:	2600      	movlt	r6, #0
 8005fd4:	f1b8 0f00 	cmp.w	r8, #0
 8005fd8:	bfb9      	ittee	lt
 8005fda:	eba9 0508 	sublt.w	r5, r9, r8
 8005fde:	2300      	movlt	r3, #0
 8005fe0:	464d      	movge	r5, r9
 8005fe2:	4643      	movge	r3, r8
 8005fe4:	e781      	b.n	8005eea <_dtoa_r+0x70a>
 8005fe6:	9e08      	ldr	r6, [sp, #32]
 8005fe8:	464d      	mov	r5, r9
 8005fea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005fec:	e786      	b.n	8005efc <_dtoa_r+0x71c>
 8005fee:	9a08      	ldr	r2, [sp, #32]
 8005ff0:	e7ad      	b.n	8005f4e <_dtoa_r+0x76e>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e7d6      	b.n	8005fa4 <_dtoa_r+0x7c4>
 8005ff6:	9b02      	ldr	r3, [sp, #8]
 8005ff8:	e7d4      	b.n	8005fa4 <_dtoa_r+0x7c4>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	9308      	str	r3, [sp, #32]
 8005ffe:	6933      	ldr	r3, [r6, #16]
 8006000:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006004:	6918      	ldr	r0, [r3, #16]
 8006006:	f000 fa3b 	bl	8006480 <__hi0bits>
 800600a:	f1c0 0020 	rsb	r0, r0, #32
 800600e:	9b07      	ldr	r3, [sp, #28]
 8006010:	4418      	add	r0, r3
 8006012:	f010 001f 	ands.w	r0, r0, #31
 8006016:	d047      	beq.n	80060a8 <_dtoa_r+0x8c8>
 8006018:	f1c0 0320 	rsb	r3, r0, #32
 800601c:	2b04      	cmp	r3, #4
 800601e:	dd3b      	ble.n	8006098 <_dtoa_r+0x8b8>
 8006020:	9b07      	ldr	r3, [sp, #28]
 8006022:	f1c0 001c 	rsb	r0, r0, #28
 8006026:	4481      	add	r9, r0
 8006028:	4405      	add	r5, r0
 800602a:	4403      	add	r3, r0
 800602c:	9307      	str	r3, [sp, #28]
 800602e:	f1b9 0f00 	cmp.w	r9, #0
 8006032:	dd05      	ble.n	8006040 <_dtoa_r+0x860>
 8006034:	4659      	mov	r1, fp
 8006036:	464a      	mov	r2, r9
 8006038:	4620      	mov	r0, r4
 800603a:	f000 fb5b 	bl	80066f4 <__lshift>
 800603e:	4683      	mov	fp, r0
 8006040:	9b07      	ldr	r3, [sp, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	dd05      	ble.n	8006052 <_dtoa_r+0x872>
 8006046:	4631      	mov	r1, r6
 8006048:	461a      	mov	r2, r3
 800604a:	4620      	mov	r0, r4
 800604c:	f000 fb52 	bl	80066f4 <__lshift>
 8006050:	4606      	mov	r6, r0
 8006052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006054:	b353      	cbz	r3, 80060ac <_dtoa_r+0x8cc>
 8006056:	4631      	mov	r1, r6
 8006058:	4658      	mov	r0, fp
 800605a:	f000 fb9f 	bl	800679c <__mcmp>
 800605e:	2800      	cmp	r0, #0
 8006060:	da24      	bge.n	80060ac <_dtoa_r+0x8cc>
 8006062:	2300      	movs	r3, #0
 8006064:	4659      	mov	r1, fp
 8006066:	220a      	movs	r2, #10
 8006068:	4620      	mov	r0, r4
 800606a:	f000 f9ce 	bl	800640a <__multadd>
 800606e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006070:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006074:	4683      	mov	fp, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 8144 	beq.w	8006304 <_dtoa_r+0xb24>
 800607c:	2300      	movs	r3, #0
 800607e:	4639      	mov	r1, r7
 8006080:	220a      	movs	r2, #10
 8006082:	4620      	mov	r0, r4
 8006084:	f000 f9c1 	bl	800640a <__multadd>
 8006088:	9b04      	ldr	r3, [sp, #16]
 800608a:	4607      	mov	r7, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	dc4d      	bgt.n	800612c <_dtoa_r+0x94c>
 8006090:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006092:	2b02      	cmp	r3, #2
 8006094:	dd4a      	ble.n	800612c <_dtoa_r+0x94c>
 8006096:	e011      	b.n	80060bc <_dtoa_r+0x8dc>
 8006098:	d0c9      	beq.n	800602e <_dtoa_r+0x84e>
 800609a:	9a07      	ldr	r2, [sp, #28]
 800609c:	331c      	adds	r3, #28
 800609e:	441a      	add	r2, r3
 80060a0:	4499      	add	r9, r3
 80060a2:	441d      	add	r5, r3
 80060a4:	4613      	mov	r3, r2
 80060a6:	e7c1      	b.n	800602c <_dtoa_r+0x84c>
 80060a8:	4603      	mov	r3, r0
 80060aa:	e7f6      	b.n	800609a <_dtoa_r+0x8ba>
 80060ac:	f1b8 0f00 	cmp.w	r8, #0
 80060b0:	dc36      	bgt.n	8006120 <_dtoa_r+0x940>
 80060b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	dd33      	ble.n	8006120 <_dtoa_r+0x940>
 80060b8:	f8cd 8010 	str.w	r8, [sp, #16]
 80060bc:	9b04      	ldr	r3, [sp, #16]
 80060be:	b963      	cbnz	r3, 80060da <_dtoa_r+0x8fa>
 80060c0:	4631      	mov	r1, r6
 80060c2:	2205      	movs	r2, #5
 80060c4:	4620      	mov	r0, r4
 80060c6:	f000 f9a0 	bl	800640a <__multadd>
 80060ca:	4601      	mov	r1, r0
 80060cc:	4606      	mov	r6, r0
 80060ce:	4658      	mov	r0, fp
 80060d0:	f000 fb64 	bl	800679c <__mcmp>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	f73f add3 	bgt.w	8005c80 <_dtoa_r+0x4a0>
 80060da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80060dc:	9d06      	ldr	r5, [sp, #24]
 80060de:	ea6f 0a03 	mvn.w	sl, r3
 80060e2:	f04f 0900 	mov.w	r9, #0
 80060e6:	4631      	mov	r1, r6
 80060e8:	4620      	mov	r0, r4
 80060ea:	f000 f977 	bl	80063dc <_Bfree>
 80060ee:	2f00      	cmp	r7, #0
 80060f0:	f43f aebd 	beq.w	8005e6e <_dtoa_r+0x68e>
 80060f4:	f1b9 0f00 	cmp.w	r9, #0
 80060f8:	d005      	beq.n	8006106 <_dtoa_r+0x926>
 80060fa:	45b9      	cmp	r9, r7
 80060fc:	d003      	beq.n	8006106 <_dtoa_r+0x926>
 80060fe:	4649      	mov	r1, r9
 8006100:	4620      	mov	r0, r4
 8006102:	f000 f96b 	bl	80063dc <_Bfree>
 8006106:	4639      	mov	r1, r7
 8006108:	4620      	mov	r0, r4
 800610a:	f000 f967 	bl	80063dc <_Bfree>
 800610e:	e6ae      	b.n	8005e6e <_dtoa_r+0x68e>
 8006110:	2600      	movs	r6, #0
 8006112:	4637      	mov	r7, r6
 8006114:	e7e1      	b.n	80060da <_dtoa_r+0x8fa>
 8006116:	46ba      	mov	sl, r7
 8006118:	4637      	mov	r7, r6
 800611a:	e5b1      	b.n	8005c80 <_dtoa_r+0x4a0>
 800611c:	40240000 	.word	0x40240000
 8006120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006122:	f8cd 8010 	str.w	r8, [sp, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 80f3 	beq.w	8006312 <_dtoa_r+0xb32>
 800612c:	2d00      	cmp	r5, #0
 800612e:	dd05      	ble.n	800613c <_dtoa_r+0x95c>
 8006130:	4639      	mov	r1, r7
 8006132:	462a      	mov	r2, r5
 8006134:	4620      	mov	r0, r4
 8006136:	f000 fadd 	bl	80066f4 <__lshift>
 800613a:	4607      	mov	r7, r0
 800613c:	9b08      	ldr	r3, [sp, #32]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d04c      	beq.n	80061dc <_dtoa_r+0x9fc>
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	4620      	mov	r0, r4
 8006146:	f000 f915 	bl	8006374 <_Balloc>
 800614a:	4605      	mov	r5, r0
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	f107 010c 	add.w	r1, r7, #12
 8006152:	3202      	adds	r2, #2
 8006154:	0092      	lsls	r2, r2, #2
 8006156:	300c      	adds	r0, #12
 8006158:	f7fe fd75 	bl	8004c46 <memcpy>
 800615c:	2201      	movs	r2, #1
 800615e:	4629      	mov	r1, r5
 8006160:	4620      	mov	r0, r4
 8006162:	f000 fac7 	bl	80066f4 <__lshift>
 8006166:	46b9      	mov	r9, r7
 8006168:	4607      	mov	r7, r0
 800616a:	9b06      	ldr	r3, [sp, #24]
 800616c:	9307      	str	r3, [sp, #28]
 800616e:	9b02      	ldr	r3, [sp, #8]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	9308      	str	r3, [sp, #32]
 8006176:	4631      	mov	r1, r6
 8006178:	4658      	mov	r0, fp
 800617a:	f7ff faa0 	bl	80056be <quorem>
 800617e:	4649      	mov	r1, r9
 8006180:	4605      	mov	r5, r0
 8006182:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006186:	4658      	mov	r0, fp
 8006188:	f000 fb08 	bl	800679c <__mcmp>
 800618c:	463a      	mov	r2, r7
 800618e:	9002      	str	r0, [sp, #8]
 8006190:	4631      	mov	r1, r6
 8006192:	4620      	mov	r0, r4
 8006194:	f000 fb1c 	bl	80067d0 <__mdiff>
 8006198:	68c3      	ldr	r3, [r0, #12]
 800619a:	4602      	mov	r2, r0
 800619c:	bb03      	cbnz	r3, 80061e0 <_dtoa_r+0xa00>
 800619e:	4601      	mov	r1, r0
 80061a0:	9009      	str	r0, [sp, #36]	; 0x24
 80061a2:	4658      	mov	r0, fp
 80061a4:	f000 fafa 	bl	800679c <__mcmp>
 80061a8:	4603      	mov	r3, r0
 80061aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061ac:	4611      	mov	r1, r2
 80061ae:	4620      	mov	r0, r4
 80061b0:	9309      	str	r3, [sp, #36]	; 0x24
 80061b2:	f000 f913 	bl	80063dc <_Bfree>
 80061b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b8:	b9a3      	cbnz	r3, 80061e4 <_dtoa_r+0xa04>
 80061ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80061bc:	b992      	cbnz	r2, 80061e4 <_dtoa_r+0xa04>
 80061be:	9a08      	ldr	r2, [sp, #32]
 80061c0:	b982      	cbnz	r2, 80061e4 <_dtoa_r+0xa04>
 80061c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80061c6:	d029      	beq.n	800621c <_dtoa_r+0xa3c>
 80061c8:	9b02      	ldr	r3, [sp, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	dd01      	ble.n	80061d2 <_dtoa_r+0x9f2>
 80061ce:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80061d2:	9b07      	ldr	r3, [sp, #28]
 80061d4:	1c5d      	adds	r5, r3, #1
 80061d6:	f883 8000 	strb.w	r8, [r3]
 80061da:	e784      	b.n	80060e6 <_dtoa_r+0x906>
 80061dc:	4638      	mov	r0, r7
 80061de:	e7c2      	b.n	8006166 <_dtoa_r+0x986>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e7e3      	b.n	80061ac <_dtoa_r+0x9cc>
 80061e4:	9a02      	ldr	r2, [sp, #8]
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	db04      	blt.n	80061f4 <_dtoa_r+0xa14>
 80061ea:	d123      	bne.n	8006234 <_dtoa_r+0xa54>
 80061ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80061ee:	bb0a      	cbnz	r2, 8006234 <_dtoa_r+0xa54>
 80061f0:	9a08      	ldr	r2, [sp, #32]
 80061f2:	b9fa      	cbnz	r2, 8006234 <_dtoa_r+0xa54>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	ddec      	ble.n	80061d2 <_dtoa_r+0x9f2>
 80061f8:	4659      	mov	r1, fp
 80061fa:	2201      	movs	r2, #1
 80061fc:	4620      	mov	r0, r4
 80061fe:	f000 fa79 	bl	80066f4 <__lshift>
 8006202:	4631      	mov	r1, r6
 8006204:	4683      	mov	fp, r0
 8006206:	f000 fac9 	bl	800679c <__mcmp>
 800620a:	2800      	cmp	r0, #0
 800620c:	dc03      	bgt.n	8006216 <_dtoa_r+0xa36>
 800620e:	d1e0      	bne.n	80061d2 <_dtoa_r+0x9f2>
 8006210:	f018 0f01 	tst.w	r8, #1
 8006214:	d0dd      	beq.n	80061d2 <_dtoa_r+0x9f2>
 8006216:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800621a:	d1d8      	bne.n	80061ce <_dtoa_r+0x9ee>
 800621c:	9b07      	ldr	r3, [sp, #28]
 800621e:	9a07      	ldr	r2, [sp, #28]
 8006220:	1c5d      	adds	r5, r3, #1
 8006222:	2339      	movs	r3, #57	; 0x39
 8006224:	7013      	strb	r3, [r2, #0]
 8006226:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800622a:	1e6a      	subs	r2, r5, #1
 800622c:	2b39      	cmp	r3, #57	; 0x39
 800622e:	d04d      	beq.n	80062cc <_dtoa_r+0xaec>
 8006230:	3301      	adds	r3, #1
 8006232:	e052      	b.n	80062da <_dtoa_r+0xafa>
 8006234:	9a07      	ldr	r2, [sp, #28]
 8006236:	2b00      	cmp	r3, #0
 8006238:	f102 0501 	add.w	r5, r2, #1
 800623c:	dd06      	ble.n	800624c <_dtoa_r+0xa6c>
 800623e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006242:	d0eb      	beq.n	800621c <_dtoa_r+0xa3c>
 8006244:	f108 0801 	add.w	r8, r8, #1
 8006248:	9b07      	ldr	r3, [sp, #28]
 800624a:	e7c4      	b.n	80061d6 <_dtoa_r+0x9f6>
 800624c:	9b06      	ldr	r3, [sp, #24]
 800624e:	9a04      	ldr	r2, [sp, #16]
 8006250:	1aeb      	subs	r3, r5, r3
 8006252:	4293      	cmp	r3, r2
 8006254:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006258:	d021      	beq.n	800629e <_dtoa_r+0xabe>
 800625a:	4659      	mov	r1, fp
 800625c:	2300      	movs	r3, #0
 800625e:	220a      	movs	r2, #10
 8006260:	4620      	mov	r0, r4
 8006262:	f000 f8d2 	bl	800640a <__multadd>
 8006266:	45b9      	cmp	r9, r7
 8006268:	4683      	mov	fp, r0
 800626a:	f04f 0300 	mov.w	r3, #0
 800626e:	f04f 020a 	mov.w	r2, #10
 8006272:	4649      	mov	r1, r9
 8006274:	4620      	mov	r0, r4
 8006276:	d105      	bne.n	8006284 <_dtoa_r+0xaa4>
 8006278:	f000 f8c7 	bl	800640a <__multadd>
 800627c:	4681      	mov	r9, r0
 800627e:	4607      	mov	r7, r0
 8006280:	9507      	str	r5, [sp, #28]
 8006282:	e778      	b.n	8006176 <_dtoa_r+0x996>
 8006284:	f000 f8c1 	bl	800640a <__multadd>
 8006288:	4639      	mov	r1, r7
 800628a:	4681      	mov	r9, r0
 800628c:	2300      	movs	r3, #0
 800628e:	220a      	movs	r2, #10
 8006290:	4620      	mov	r0, r4
 8006292:	f000 f8ba 	bl	800640a <__multadd>
 8006296:	4607      	mov	r7, r0
 8006298:	e7f2      	b.n	8006280 <_dtoa_r+0xaa0>
 800629a:	f04f 0900 	mov.w	r9, #0
 800629e:	4659      	mov	r1, fp
 80062a0:	2201      	movs	r2, #1
 80062a2:	4620      	mov	r0, r4
 80062a4:	f000 fa26 	bl	80066f4 <__lshift>
 80062a8:	4631      	mov	r1, r6
 80062aa:	4683      	mov	fp, r0
 80062ac:	f000 fa76 	bl	800679c <__mcmp>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	dcb8      	bgt.n	8006226 <_dtoa_r+0xa46>
 80062b4:	d102      	bne.n	80062bc <_dtoa_r+0xadc>
 80062b6:	f018 0f01 	tst.w	r8, #1
 80062ba:	d1b4      	bne.n	8006226 <_dtoa_r+0xa46>
 80062bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062c0:	1e6a      	subs	r2, r5, #1
 80062c2:	2b30      	cmp	r3, #48	; 0x30
 80062c4:	f47f af0f 	bne.w	80060e6 <_dtoa_r+0x906>
 80062c8:	4615      	mov	r5, r2
 80062ca:	e7f7      	b.n	80062bc <_dtoa_r+0xadc>
 80062cc:	9b06      	ldr	r3, [sp, #24]
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d105      	bne.n	80062de <_dtoa_r+0xafe>
 80062d2:	2331      	movs	r3, #49	; 0x31
 80062d4:	9a06      	ldr	r2, [sp, #24]
 80062d6:	f10a 0a01 	add.w	sl, sl, #1
 80062da:	7013      	strb	r3, [r2, #0]
 80062dc:	e703      	b.n	80060e6 <_dtoa_r+0x906>
 80062de:	4615      	mov	r5, r2
 80062e0:	e7a1      	b.n	8006226 <_dtoa_r+0xa46>
 80062e2:	4b17      	ldr	r3, [pc, #92]	; (8006340 <_dtoa_r+0xb60>)
 80062e4:	f7ff bae1 	b.w	80058aa <_dtoa_r+0xca>
 80062e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f47f aabb 	bne.w	8005866 <_dtoa_r+0x86>
 80062f0:	4b14      	ldr	r3, [pc, #80]	; (8006344 <_dtoa_r+0xb64>)
 80062f2:	f7ff bada 	b.w	80058aa <_dtoa_r+0xca>
 80062f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	f77f ae3f 	ble.w	8005f7c <_dtoa_r+0x79c>
 80062fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006300:	9308      	str	r3, [sp, #32]
 8006302:	e653      	b.n	8005fac <_dtoa_r+0x7cc>
 8006304:	9b04      	ldr	r3, [sp, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	dc03      	bgt.n	8006312 <_dtoa_r+0xb32>
 800630a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800630c:	2b02      	cmp	r3, #2
 800630e:	f73f aed5 	bgt.w	80060bc <_dtoa_r+0x8dc>
 8006312:	9d06      	ldr	r5, [sp, #24]
 8006314:	4631      	mov	r1, r6
 8006316:	4658      	mov	r0, fp
 8006318:	f7ff f9d1 	bl	80056be <quorem>
 800631c:	9b06      	ldr	r3, [sp, #24]
 800631e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006322:	f805 8b01 	strb.w	r8, [r5], #1
 8006326:	9a04      	ldr	r2, [sp, #16]
 8006328:	1aeb      	subs	r3, r5, r3
 800632a:	429a      	cmp	r2, r3
 800632c:	ddb5      	ble.n	800629a <_dtoa_r+0xaba>
 800632e:	4659      	mov	r1, fp
 8006330:	2300      	movs	r3, #0
 8006332:	220a      	movs	r2, #10
 8006334:	4620      	mov	r0, r4
 8006336:	f000 f868 	bl	800640a <__multadd>
 800633a:	4683      	mov	fp, r0
 800633c:	e7ea      	b.n	8006314 <_dtoa_r+0xb34>
 800633e:	bf00      	nop
 8006340:	0800725a 	.word	0x0800725a
 8006344:	0800737f 	.word	0x0800737f

08006348 <_localeconv_r>:
 8006348:	4b04      	ldr	r3, [pc, #16]	; (800635c <_localeconv_r+0x14>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6a18      	ldr	r0, [r3, #32]
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <_localeconv_r+0x18>)
 8006350:	2800      	cmp	r0, #0
 8006352:	bf08      	it	eq
 8006354:	4618      	moveq	r0, r3
 8006356:	30f0      	adds	r0, #240	; 0xf0
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000004 	.word	0x20000004
 8006360:	20000068 	.word	0x20000068

08006364 <malloc>:
 8006364:	4b02      	ldr	r3, [pc, #8]	; (8006370 <malloc+0xc>)
 8006366:	4601      	mov	r1, r0
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	f000 bb39 	b.w	80069e0 <_malloc_r>
 800636e:	bf00      	nop
 8006370:	20000004 	.word	0x20000004

08006374 <_Balloc>:
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006378:	4604      	mov	r4, r0
 800637a:	460e      	mov	r6, r1
 800637c:	b93d      	cbnz	r5, 800638e <_Balloc+0x1a>
 800637e:	2010      	movs	r0, #16
 8006380:	f7ff fff0 	bl	8006364 <malloc>
 8006384:	6260      	str	r0, [r4, #36]	; 0x24
 8006386:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800638a:	6005      	str	r5, [r0, #0]
 800638c:	60c5      	str	r5, [r0, #12]
 800638e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006390:	68eb      	ldr	r3, [r5, #12]
 8006392:	b183      	cbz	r3, 80063b6 <_Balloc+0x42>
 8006394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800639c:	b9b8      	cbnz	r0, 80063ce <_Balloc+0x5a>
 800639e:	2101      	movs	r1, #1
 80063a0:	fa01 f506 	lsl.w	r5, r1, r6
 80063a4:	1d6a      	adds	r2, r5, #5
 80063a6:	0092      	lsls	r2, r2, #2
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 fabe 	bl	800692a <_calloc_r>
 80063ae:	b160      	cbz	r0, 80063ca <_Balloc+0x56>
 80063b0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80063b4:	e00e      	b.n	80063d4 <_Balloc+0x60>
 80063b6:	2221      	movs	r2, #33	; 0x21
 80063b8:	2104      	movs	r1, #4
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 fab5 	bl	800692a <_calloc_r>
 80063c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063c2:	60e8      	str	r0, [r5, #12]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e4      	bne.n	8006394 <_Balloc+0x20>
 80063ca:	2000      	movs	r0, #0
 80063cc:	bd70      	pop	{r4, r5, r6, pc}
 80063ce:	6802      	ldr	r2, [r0, #0]
 80063d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80063d4:	2300      	movs	r3, #0
 80063d6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063da:	e7f7      	b.n	80063cc <_Balloc+0x58>

080063dc <_Bfree>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80063e0:	4606      	mov	r6, r0
 80063e2:	460d      	mov	r5, r1
 80063e4:	b93c      	cbnz	r4, 80063f6 <_Bfree+0x1a>
 80063e6:	2010      	movs	r0, #16
 80063e8:	f7ff ffbc 	bl	8006364 <malloc>
 80063ec:	6270      	str	r0, [r6, #36]	; 0x24
 80063ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063f2:	6004      	str	r4, [r0, #0]
 80063f4:	60c4      	str	r4, [r0, #12]
 80063f6:	b13d      	cbz	r5, 8006408 <_Bfree+0x2c>
 80063f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80063fa:	686a      	ldr	r2, [r5, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006402:	6029      	str	r1, [r5, #0]
 8006404:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006408:	bd70      	pop	{r4, r5, r6, pc}

0800640a <__multadd>:
 800640a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800640e:	461f      	mov	r7, r3
 8006410:	4606      	mov	r6, r0
 8006412:	460c      	mov	r4, r1
 8006414:	2300      	movs	r3, #0
 8006416:	690d      	ldr	r5, [r1, #16]
 8006418:	f101 0c14 	add.w	ip, r1, #20
 800641c:	f8dc 0000 	ldr.w	r0, [ip]
 8006420:	3301      	adds	r3, #1
 8006422:	b281      	uxth	r1, r0
 8006424:	fb02 7101 	mla	r1, r2, r1, r7
 8006428:	0c00      	lsrs	r0, r0, #16
 800642a:	0c0f      	lsrs	r7, r1, #16
 800642c:	fb02 7000 	mla	r0, r2, r0, r7
 8006430:	b289      	uxth	r1, r1
 8006432:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006436:	429d      	cmp	r5, r3
 8006438:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800643c:	f84c 1b04 	str.w	r1, [ip], #4
 8006440:	dcec      	bgt.n	800641c <__multadd+0x12>
 8006442:	b1d7      	cbz	r7, 800647a <__multadd+0x70>
 8006444:	68a3      	ldr	r3, [r4, #8]
 8006446:	42ab      	cmp	r3, r5
 8006448:	dc12      	bgt.n	8006470 <__multadd+0x66>
 800644a:	6861      	ldr	r1, [r4, #4]
 800644c:	4630      	mov	r0, r6
 800644e:	3101      	adds	r1, #1
 8006450:	f7ff ff90 	bl	8006374 <_Balloc>
 8006454:	4680      	mov	r8, r0
 8006456:	6922      	ldr	r2, [r4, #16]
 8006458:	f104 010c 	add.w	r1, r4, #12
 800645c:	3202      	adds	r2, #2
 800645e:	0092      	lsls	r2, r2, #2
 8006460:	300c      	adds	r0, #12
 8006462:	f7fe fbf0 	bl	8004c46 <memcpy>
 8006466:	4621      	mov	r1, r4
 8006468:	4630      	mov	r0, r6
 800646a:	f7ff ffb7 	bl	80063dc <_Bfree>
 800646e:	4644      	mov	r4, r8
 8006470:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006474:	3501      	adds	r5, #1
 8006476:	615f      	str	r7, [r3, #20]
 8006478:	6125      	str	r5, [r4, #16]
 800647a:	4620      	mov	r0, r4
 800647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006480 <__hi0bits>:
 8006480:	0c02      	lsrs	r2, r0, #16
 8006482:	0412      	lsls	r2, r2, #16
 8006484:	4603      	mov	r3, r0
 8006486:	b9b2      	cbnz	r2, 80064b6 <__hi0bits+0x36>
 8006488:	0403      	lsls	r3, r0, #16
 800648a:	2010      	movs	r0, #16
 800648c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006490:	bf04      	itt	eq
 8006492:	021b      	lsleq	r3, r3, #8
 8006494:	3008      	addeq	r0, #8
 8006496:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800649a:	bf04      	itt	eq
 800649c:	011b      	lsleq	r3, r3, #4
 800649e:	3004      	addeq	r0, #4
 80064a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064a4:	bf04      	itt	eq
 80064a6:	009b      	lsleq	r3, r3, #2
 80064a8:	3002      	addeq	r0, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	db06      	blt.n	80064bc <__hi0bits+0x3c>
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	d503      	bpl.n	80064ba <__hi0bits+0x3a>
 80064b2:	3001      	adds	r0, #1
 80064b4:	4770      	bx	lr
 80064b6:	2000      	movs	r0, #0
 80064b8:	e7e8      	b.n	800648c <__hi0bits+0xc>
 80064ba:	2020      	movs	r0, #32
 80064bc:	4770      	bx	lr

080064be <__lo0bits>:
 80064be:	6803      	ldr	r3, [r0, #0]
 80064c0:	4601      	mov	r1, r0
 80064c2:	f013 0207 	ands.w	r2, r3, #7
 80064c6:	d00b      	beq.n	80064e0 <__lo0bits+0x22>
 80064c8:	07da      	lsls	r2, r3, #31
 80064ca:	d423      	bmi.n	8006514 <__lo0bits+0x56>
 80064cc:	0798      	lsls	r0, r3, #30
 80064ce:	bf49      	itett	mi
 80064d0:	085b      	lsrmi	r3, r3, #1
 80064d2:	089b      	lsrpl	r3, r3, #2
 80064d4:	2001      	movmi	r0, #1
 80064d6:	600b      	strmi	r3, [r1, #0]
 80064d8:	bf5c      	itt	pl
 80064da:	600b      	strpl	r3, [r1, #0]
 80064dc:	2002      	movpl	r0, #2
 80064de:	4770      	bx	lr
 80064e0:	b298      	uxth	r0, r3
 80064e2:	b9a8      	cbnz	r0, 8006510 <__lo0bits+0x52>
 80064e4:	2010      	movs	r0, #16
 80064e6:	0c1b      	lsrs	r3, r3, #16
 80064e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80064ec:	bf04      	itt	eq
 80064ee:	0a1b      	lsreq	r3, r3, #8
 80064f0:	3008      	addeq	r0, #8
 80064f2:	071a      	lsls	r2, r3, #28
 80064f4:	bf04      	itt	eq
 80064f6:	091b      	lsreq	r3, r3, #4
 80064f8:	3004      	addeq	r0, #4
 80064fa:	079a      	lsls	r2, r3, #30
 80064fc:	bf04      	itt	eq
 80064fe:	089b      	lsreq	r3, r3, #2
 8006500:	3002      	addeq	r0, #2
 8006502:	07da      	lsls	r2, r3, #31
 8006504:	d402      	bmi.n	800650c <__lo0bits+0x4e>
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	d006      	beq.n	8006518 <__lo0bits+0x5a>
 800650a:	3001      	adds	r0, #1
 800650c:	600b      	str	r3, [r1, #0]
 800650e:	4770      	bx	lr
 8006510:	4610      	mov	r0, r2
 8006512:	e7e9      	b.n	80064e8 <__lo0bits+0x2a>
 8006514:	2000      	movs	r0, #0
 8006516:	4770      	bx	lr
 8006518:	2020      	movs	r0, #32
 800651a:	4770      	bx	lr

0800651c <__i2b>:
 800651c:	b510      	push	{r4, lr}
 800651e:	460c      	mov	r4, r1
 8006520:	2101      	movs	r1, #1
 8006522:	f7ff ff27 	bl	8006374 <_Balloc>
 8006526:	2201      	movs	r2, #1
 8006528:	6144      	str	r4, [r0, #20]
 800652a:	6102      	str	r2, [r0, #16]
 800652c:	bd10      	pop	{r4, pc}

0800652e <__multiply>:
 800652e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006532:	4614      	mov	r4, r2
 8006534:	690a      	ldr	r2, [r1, #16]
 8006536:	6923      	ldr	r3, [r4, #16]
 8006538:	4688      	mov	r8, r1
 800653a:	429a      	cmp	r2, r3
 800653c:	bfbe      	ittt	lt
 800653e:	460b      	movlt	r3, r1
 8006540:	46a0      	movlt	r8, r4
 8006542:	461c      	movlt	r4, r3
 8006544:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006548:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800654c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006550:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006554:	eb07 0609 	add.w	r6, r7, r9
 8006558:	42b3      	cmp	r3, r6
 800655a:	bfb8      	it	lt
 800655c:	3101      	addlt	r1, #1
 800655e:	f7ff ff09 	bl	8006374 <_Balloc>
 8006562:	f100 0514 	add.w	r5, r0, #20
 8006566:	462b      	mov	r3, r5
 8006568:	2200      	movs	r2, #0
 800656a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800656e:	4573      	cmp	r3, lr
 8006570:	d316      	bcc.n	80065a0 <__multiply+0x72>
 8006572:	f104 0214 	add.w	r2, r4, #20
 8006576:	f108 0114 	add.w	r1, r8, #20
 800657a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800657e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	9201      	str	r2, [sp, #4]
 8006588:	4293      	cmp	r3, r2
 800658a:	d80c      	bhi.n	80065a6 <__multiply+0x78>
 800658c:	2e00      	cmp	r6, #0
 800658e:	dd03      	ble.n	8006598 <__multiply+0x6a>
 8006590:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006594:	2b00      	cmp	r3, #0
 8006596:	d05d      	beq.n	8006654 <__multiply+0x126>
 8006598:	6106      	str	r6, [r0, #16]
 800659a:	b003      	add	sp, #12
 800659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a0:	f843 2b04 	str.w	r2, [r3], #4
 80065a4:	e7e3      	b.n	800656e <__multiply+0x40>
 80065a6:	f8b2 b000 	ldrh.w	fp, [r2]
 80065aa:	f1bb 0f00 	cmp.w	fp, #0
 80065ae:	d023      	beq.n	80065f8 <__multiply+0xca>
 80065b0:	4689      	mov	r9, r1
 80065b2:	46ac      	mov	ip, r5
 80065b4:	f04f 0800 	mov.w	r8, #0
 80065b8:	f859 4b04 	ldr.w	r4, [r9], #4
 80065bc:	f8dc a000 	ldr.w	sl, [ip]
 80065c0:	b2a3      	uxth	r3, r4
 80065c2:	fa1f fa8a 	uxth.w	sl, sl
 80065c6:	fb0b a303 	mla	r3, fp, r3, sl
 80065ca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80065ce:	f8dc 4000 	ldr.w	r4, [ip]
 80065d2:	4443      	add	r3, r8
 80065d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80065d8:	fb0b 840a 	mla	r4, fp, sl, r8
 80065dc:	46e2      	mov	sl, ip
 80065de:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065e8:	454f      	cmp	r7, r9
 80065ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80065ee:	f84a 3b04 	str.w	r3, [sl], #4
 80065f2:	d82b      	bhi.n	800664c <__multiply+0x11e>
 80065f4:	f8cc 8004 	str.w	r8, [ip, #4]
 80065f8:	9b01      	ldr	r3, [sp, #4]
 80065fa:	3204      	adds	r2, #4
 80065fc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006600:	f1ba 0f00 	cmp.w	sl, #0
 8006604:	d020      	beq.n	8006648 <__multiply+0x11a>
 8006606:	4689      	mov	r9, r1
 8006608:	46a8      	mov	r8, r5
 800660a:	f04f 0b00 	mov.w	fp, #0
 800660e:	682b      	ldr	r3, [r5, #0]
 8006610:	f8b9 c000 	ldrh.w	ip, [r9]
 8006614:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006618:	b29b      	uxth	r3, r3
 800661a:	fb0a 440c 	mla	r4, sl, ip, r4
 800661e:	46c4      	mov	ip, r8
 8006620:	445c      	add	r4, fp
 8006622:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006626:	f84c 3b04 	str.w	r3, [ip], #4
 800662a:	f859 3b04 	ldr.w	r3, [r9], #4
 800662e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006632:	0c1b      	lsrs	r3, r3, #16
 8006634:	fb0a b303 	mla	r3, sl, r3, fp
 8006638:	454f      	cmp	r7, r9
 800663a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800663e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006642:	d805      	bhi.n	8006650 <__multiply+0x122>
 8006644:	f8c8 3004 	str.w	r3, [r8, #4]
 8006648:	3504      	adds	r5, #4
 800664a:	e79b      	b.n	8006584 <__multiply+0x56>
 800664c:	46d4      	mov	ip, sl
 800664e:	e7b3      	b.n	80065b8 <__multiply+0x8a>
 8006650:	46e0      	mov	r8, ip
 8006652:	e7dd      	b.n	8006610 <__multiply+0xe2>
 8006654:	3e01      	subs	r6, #1
 8006656:	e799      	b.n	800658c <__multiply+0x5e>

08006658 <__pow5mult>:
 8006658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800665c:	4615      	mov	r5, r2
 800665e:	f012 0203 	ands.w	r2, r2, #3
 8006662:	4606      	mov	r6, r0
 8006664:	460f      	mov	r7, r1
 8006666:	d007      	beq.n	8006678 <__pow5mult+0x20>
 8006668:	4c21      	ldr	r4, [pc, #132]	; (80066f0 <__pow5mult+0x98>)
 800666a:	3a01      	subs	r2, #1
 800666c:	2300      	movs	r3, #0
 800666e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006672:	f7ff feca 	bl	800640a <__multadd>
 8006676:	4607      	mov	r7, r0
 8006678:	10ad      	asrs	r5, r5, #2
 800667a:	d035      	beq.n	80066e8 <__pow5mult+0x90>
 800667c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800667e:	b93c      	cbnz	r4, 8006690 <__pow5mult+0x38>
 8006680:	2010      	movs	r0, #16
 8006682:	f7ff fe6f 	bl	8006364 <malloc>
 8006686:	6270      	str	r0, [r6, #36]	; 0x24
 8006688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800668c:	6004      	str	r4, [r0, #0]
 800668e:	60c4      	str	r4, [r0, #12]
 8006690:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006698:	b94c      	cbnz	r4, 80066ae <__pow5mult+0x56>
 800669a:	f240 2171 	movw	r1, #625	; 0x271
 800669e:	4630      	mov	r0, r6
 80066a0:	f7ff ff3c 	bl	800651c <__i2b>
 80066a4:	2300      	movs	r3, #0
 80066a6:	4604      	mov	r4, r0
 80066a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80066ac:	6003      	str	r3, [r0, #0]
 80066ae:	f04f 0800 	mov.w	r8, #0
 80066b2:	07eb      	lsls	r3, r5, #31
 80066b4:	d50a      	bpl.n	80066cc <__pow5mult+0x74>
 80066b6:	4639      	mov	r1, r7
 80066b8:	4622      	mov	r2, r4
 80066ba:	4630      	mov	r0, r6
 80066bc:	f7ff ff37 	bl	800652e <__multiply>
 80066c0:	4681      	mov	r9, r0
 80066c2:	4639      	mov	r1, r7
 80066c4:	4630      	mov	r0, r6
 80066c6:	f7ff fe89 	bl	80063dc <_Bfree>
 80066ca:	464f      	mov	r7, r9
 80066cc:	106d      	asrs	r5, r5, #1
 80066ce:	d00b      	beq.n	80066e8 <__pow5mult+0x90>
 80066d0:	6820      	ldr	r0, [r4, #0]
 80066d2:	b938      	cbnz	r0, 80066e4 <__pow5mult+0x8c>
 80066d4:	4622      	mov	r2, r4
 80066d6:	4621      	mov	r1, r4
 80066d8:	4630      	mov	r0, r6
 80066da:	f7ff ff28 	bl	800652e <__multiply>
 80066de:	6020      	str	r0, [r4, #0]
 80066e0:	f8c0 8000 	str.w	r8, [r0]
 80066e4:	4604      	mov	r4, r0
 80066e6:	e7e4      	b.n	80066b2 <__pow5mult+0x5a>
 80066e8:	4638      	mov	r0, r7
 80066ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ee:	bf00      	nop
 80066f0:	08007480 	.word	0x08007480

080066f4 <__lshift>:
 80066f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f8:	460c      	mov	r4, r1
 80066fa:	4607      	mov	r7, r0
 80066fc:	4616      	mov	r6, r2
 80066fe:	6923      	ldr	r3, [r4, #16]
 8006700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006704:	eb0a 0903 	add.w	r9, sl, r3
 8006708:	6849      	ldr	r1, [r1, #4]
 800670a:	68a3      	ldr	r3, [r4, #8]
 800670c:	f109 0501 	add.w	r5, r9, #1
 8006710:	42ab      	cmp	r3, r5
 8006712:	db32      	blt.n	800677a <__lshift+0x86>
 8006714:	4638      	mov	r0, r7
 8006716:	f7ff fe2d 	bl	8006374 <_Balloc>
 800671a:	2300      	movs	r3, #0
 800671c:	4680      	mov	r8, r0
 800671e:	461a      	mov	r2, r3
 8006720:	f100 0114 	add.w	r1, r0, #20
 8006724:	4553      	cmp	r3, sl
 8006726:	db2b      	blt.n	8006780 <__lshift+0x8c>
 8006728:	6920      	ldr	r0, [r4, #16]
 800672a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800672e:	f104 0314 	add.w	r3, r4, #20
 8006732:	f016 021f 	ands.w	r2, r6, #31
 8006736:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800673a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800673e:	d025      	beq.n	800678c <__lshift+0x98>
 8006740:	2000      	movs	r0, #0
 8006742:	f1c2 0e20 	rsb	lr, r2, #32
 8006746:	468a      	mov	sl, r1
 8006748:	681e      	ldr	r6, [r3, #0]
 800674a:	4096      	lsls	r6, r2
 800674c:	4330      	orrs	r0, r6
 800674e:	f84a 0b04 	str.w	r0, [sl], #4
 8006752:	f853 0b04 	ldr.w	r0, [r3], #4
 8006756:	459c      	cmp	ip, r3
 8006758:	fa20 f00e 	lsr.w	r0, r0, lr
 800675c:	d814      	bhi.n	8006788 <__lshift+0x94>
 800675e:	6048      	str	r0, [r1, #4]
 8006760:	b108      	cbz	r0, 8006766 <__lshift+0x72>
 8006762:	f109 0502 	add.w	r5, r9, #2
 8006766:	3d01      	subs	r5, #1
 8006768:	4638      	mov	r0, r7
 800676a:	f8c8 5010 	str.w	r5, [r8, #16]
 800676e:	4621      	mov	r1, r4
 8006770:	f7ff fe34 	bl	80063dc <_Bfree>
 8006774:	4640      	mov	r0, r8
 8006776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677a:	3101      	adds	r1, #1
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	e7c7      	b.n	8006710 <__lshift+0x1c>
 8006780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006784:	3301      	adds	r3, #1
 8006786:	e7cd      	b.n	8006724 <__lshift+0x30>
 8006788:	4651      	mov	r1, sl
 800678a:	e7dc      	b.n	8006746 <__lshift+0x52>
 800678c:	3904      	subs	r1, #4
 800678e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006792:	459c      	cmp	ip, r3
 8006794:	f841 2f04 	str.w	r2, [r1, #4]!
 8006798:	d8f9      	bhi.n	800678e <__lshift+0x9a>
 800679a:	e7e4      	b.n	8006766 <__lshift+0x72>

0800679c <__mcmp>:
 800679c:	6903      	ldr	r3, [r0, #16]
 800679e:	690a      	ldr	r2, [r1, #16]
 80067a0:	b530      	push	{r4, r5, lr}
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	d10c      	bne.n	80067c0 <__mcmp+0x24>
 80067a6:	0092      	lsls	r2, r2, #2
 80067a8:	3014      	adds	r0, #20
 80067aa:	3114      	adds	r1, #20
 80067ac:	1884      	adds	r4, r0, r2
 80067ae:	4411      	add	r1, r2
 80067b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80067b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80067b8:	4295      	cmp	r5, r2
 80067ba:	d003      	beq.n	80067c4 <__mcmp+0x28>
 80067bc:	d305      	bcc.n	80067ca <__mcmp+0x2e>
 80067be:	2301      	movs	r3, #1
 80067c0:	4618      	mov	r0, r3
 80067c2:	bd30      	pop	{r4, r5, pc}
 80067c4:	42a0      	cmp	r0, r4
 80067c6:	d3f3      	bcc.n	80067b0 <__mcmp+0x14>
 80067c8:	e7fa      	b.n	80067c0 <__mcmp+0x24>
 80067ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067ce:	e7f7      	b.n	80067c0 <__mcmp+0x24>

080067d0 <__mdiff>:
 80067d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d4:	460d      	mov	r5, r1
 80067d6:	4607      	mov	r7, r0
 80067d8:	4611      	mov	r1, r2
 80067da:	4628      	mov	r0, r5
 80067dc:	4614      	mov	r4, r2
 80067de:	f7ff ffdd 	bl	800679c <__mcmp>
 80067e2:	1e06      	subs	r6, r0, #0
 80067e4:	d108      	bne.n	80067f8 <__mdiff+0x28>
 80067e6:	4631      	mov	r1, r6
 80067e8:	4638      	mov	r0, r7
 80067ea:	f7ff fdc3 	bl	8006374 <_Balloc>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f8:	bfa4      	itt	ge
 80067fa:	4623      	movge	r3, r4
 80067fc:	462c      	movge	r4, r5
 80067fe:	4638      	mov	r0, r7
 8006800:	6861      	ldr	r1, [r4, #4]
 8006802:	bfa6      	itte	ge
 8006804:	461d      	movge	r5, r3
 8006806:	2600      	movge	r6, #0
 8006808:	2601      	movlt	r6, #1
 800680a:	f7ff fdb3 	bl	8006374 <_Balloc>
 800680e:	f04f 0e00 	mov.w	lr, #0
 8006812:	60c6      	str	r6, [r0, #12]
 8006814:	692b      	ldr	r3, [r5, #16]
 8006816:	6926      	ldr	r6, [r4, #16]
 8006818:	f104 0214 	add.w	r2, r4, #20
 800681c:	f105 0914 	add.w	r9, r5, #20
 8006820:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006824:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006828:	f100 0114 	add.w	r1, r0, #20
 800682c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006830:	f859 5b04 	ldr.w	r5, [r9], #4
 8006834:	fa1f f38a 	uxth.w	r3, sl
 8006838:	4473      	add	r3, lr
 800683a:	b2ac      	uxth	r4, r5
 800683c:	1b1b      	subs	r3, r3, r4
 800683e:	0c2c      	lsrs	r4, r5, #16
 8006840:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006844:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006848:	b29b      	uxth	r3, r3
 800684a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800684e:	45c8      	cmp	r8, r9
 8006850:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006854:	4694      	mov	ip, r2
 8006856:	f841 4b04 	str.w	r4, [r1], #4
 800685a:	d8e7      	bhi.n	800682c <__mdiff+0x5c>
 800685c:	45bc      	cmp	ip, r7
 800685e:	d304      	bcc.n	800686a <__mdiff+0x9a>
 8006860:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006864:	b183      	cbz	r3, 8006888 <__mdiff+0xb8>
 8006866:	6106      	str	r6, [r0, #16]
 8006868:	e7c4      	b.n	80067f4 <__mdiff+0x24>
 800686a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800686e:	b2a2      	uxth	r2, r4
 8006870:	4472      	add	r2, lr
 8006872:	1413      	asrs	r3, r2, #16
 8006874:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006878:	b292      	uxth	r2, r2
 800687a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800687e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006882:	f841 2b04 	str.w	r2, [r1], #4
 8006886:	e7e9      	b.n	800685c <__mdiff+0x8c>
 8006888:	3e01      	subs	r6, #1
 800688a:	e7e9      	b.n	8006860 <__mdiff+0x90>

0800688c <__d2b>:
 800688c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006890:	461c      	mov	r4, r3
 8006892:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006896:	2101      	movs	r1, #1
 8006898:	4690      	mov	r8, r2
 800689a:	f7ff fd6b 	bl	8006374 <_Balloc>
 800689e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80068a2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80068a6:	4607      	mov	r7, r0
 80068a8:	bb34      	cbnz	r4, 80068f8 <__d2b+0x6c>
 80068aa:	9201      	str	r2, [sp, #4]
 80068ac:	f1b8 0200 	subs.w	r2, r8, #0
 80068b0:	d027      	beq.n	8006902 <__d2b+0x76>
 80068b2:	a802      	add	r0, sp, #8
 80068b4:	f840 2d08 	str.w	r2, [r0, #-8]!
 80068b8:	f7ff fe01 	bl	80064be <__lo0bits>
 80068bc:	9900      	ldr	r1, [sp, #0]
 80068be:	b1f0      	cbz	r0, 80068fe <__d2b+0x72>
 80068c0:	9a01      	ldr	r2, [sp, #4]
 80068c2:	f1c0 0320 	rsb	r3, r0, #32
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	430b      	orrs	r3, r1
 80068cc:	40c2      	lsrs	r2, r0
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	9201      	str	r2, [sp, #4]
 80068d2:	9b01      	ldr	r3, [sp, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	bf14      	ite	ne
 80068d8:	2102      	movne	r1, #2
 80068da:	2101      	moveq	r1, #1
 80068dc:	61bb      	str	r3, [r7, #24]
 80068de:	6139      	str	r1, [r7, #16]
 80068e0:	b1c4      	cbz	r4, 8006914 <__d2b+0x88>
 80068e2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80068e6:	4404      	add	r4, r0
 80068e8:	6034      	str	r4, [r6, #0]
 80068ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068ee:	6028      	str	r0, [r5, #0]
 80068f0:	4638      	mov	r0, r7
 80068f2:	b002      	add	sp, #8
 80068f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80068fc:	e7d5      	b.n	80068aa <__d2b+0x1e>
 80068fe:	6179      	str	r1, [r7, #20]
 8006900:	e7e7      	b.n	80068d2 <__d2b+0x46>
 8006902:	a801      	add	r0, sp, #4
 8006904:	f7ff fddb 	bl	80064be <__lo0bits>
 8006908:	2101      	movs	r1, #1
 800690a:	9b01      	ldr	r3, [sp, #4]
 800690c:	6139      	str	r1, [r7, #16]
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	3020      	adds	r0, #32
 8006912:	e7e5      	b.n	80068e0 <__d2b+0x54>
 8006914:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006918:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800691c:	6030      	str	r0, [r6, #0]
 800691e:	6918      	ldr	r0, [r3, #16]
 8006920:	f7ff fdae 	bl	8006480 <__hi0bits>
 8006924:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006928:	e7e1      	b.n	80068ee <__d2b+0x62>

0800692a <_calloc_r>:
 800692a:	b538      	push	{r3, r4, r5, lr}
 800692c:	fb02 f401 	mul.w	r4, r2, r1
 8006930:	4621      	mov	r1, r4
 8006932:	f000 f855 	bl	80069e0 <_malloc_r>
 8006936:	4605      	mov	r5, r0
 8006938:	b118      	cbz	r0, 8006942 <_calloc_r+0x18>
 800693a:	4622      	mov	r2, r4
 800693c:	2100      	movs	r1, #0
 800693e:	f7fe f98d 	bl	8004c5c <memset>
 8006942:	4628      	mov	r0, r5
 8006944:	bd38      	pop	{r3, r4, r5, pc}
	...

08006948 <_free_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4605      	mov	r5, r0
 800694c:	2900      	cmp	r1, #0
 800694e:	d043      	beq.n	80069d8 <_free_r+0x90>
 8006950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006954:	1f0c      	subs	r4, r1, #4
 8006956:	2b00      	cmp	r3, #0
 8006958:	bfb8      	it	lt
 800695a:	18e4      	addlt	r4, r4, r3
 800695c:	f000 fa15 	bl	8006d8a <__malloc_lock>
 8006960:	4a1e      	ldr	r2, [pc, #120]	; (80069dc <_free_r+0x94>)
 8006962:	6813      	ldr	r3, [r2, #0]
 8006964:	4610      	mov	r0, r2
 8006966:	b933      	cbnz	r3, 8006976 <_free_r+0x2e>
 8006968:	6063      	str	r3, [r4, #4]
 800696a:	6014      	str	r4, [r2, #0]
 800696c:	4628      	mov	r0, r5
 800696e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006972:	f000 ba0b 	b.w	8006d8c <__malloc_unlock>
 8006976:	42a3      	cmp	r3, r4
 8006978:	d90b      	bls.n	8006992 <_free_r+0x4a>
 800697a:	6821      	ldr	r1, [r4, #0]
 800697c:	1862      	adds	r2, r4, r1
 800697e:	4293      	cmp	r3, r2
 8006980:	bf01      	itttt	eq
 8006982:	681a      	ldreq	r2, [r3, #0]
 8006984:	685b      	ldreq	r3, [r3, #4]
 8006986:	1852      	addeq	r2, r2, r1
 8006988:	6022      	streq	r2, [r4, #0]
 800698a:	6063      	str	r3, [r4, #4]
 800698c:	6004      	str	r4, [r0, #0]
 800698e:	e7ed      	b.n	800696c <_free_r+0x24>
 8006990:	4613      	mov	r3, r2
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	b10a      	cbz	r2, 800699a <_free_r+0x52>
 8006996:	42a2      	cmp	r2, r4
 8006998:	d9fa      	bls.n	8006990 <_free_r+0x48>
 800699a:	6819      	ldr	r1, [r3, #0]
 800699c:	1858      	adds	r0, r3, r1
 800699e:	42a0      	cmp	r0, r4
 80069a0:	d10b      	bne.n	80069ba <_free_r+0x72>
 80069a2:	6820      	ldr	r0, [r4, #0]
 80069a4:	4401      	add	r1, r0
 80069a6:	1858      	adds	r0, r3, r1
 80069a8:	4282      	cmp	r2, r0
 80069aa:	6019      	str	r1, [r3, #0]
 80069ac:	d1de      	bne.n	800696c <_free_r+0x24>
 80069ae:	6810      	ldr	r0, [r2, #0]
 80069b0:	6852      	ldr	r2, [r2, #4]
 80069b2:	4401      	add	r1, r0
 80069b4:	6019      	str	r1, [r3, #0]
 80069b6:	605a      	str	r2, [r3, #4]
 80069b8:	e7d8      	b.n	800696c <_free_r+0x24>
 80069ba:	d902      	bls.n	80069c2 <_free_r+0x7a>
 80069bc:	230c      	movs	r3, #12
 80069be:	602b      	str	r3, [r5, #0]
 80069c0:	e7d4      	b.n	800696c <_free_r+0x24>
 80069c2:	6820      	ldr	r0, [r4, #0]
 80069c4:	1821      	adds	r1, r4, r0
 80069c6:	428a      	cmp	r2, r1
 80069c8:	bf01      	itttt	eq
 80069ca:	6811      	ldreq	r1, [r2, #0]
 80069cc:	6852      	ldreq	r2, [r2, #4]
 80069ce:	1809      	addeq	r1, r1, r0
 80069d0:	6021      	streq	r1, [r4, #0]
 80069d2:	6062      	str	r2, [r4, #4]
 80069d4:	605c      	str	r4, [r3, #4]
 80069d6:	e7c9      	b.n	800696c <_free_r+0x24>
 80069d8:	bd38      	pop	{r3, r4, r5, pc}
 80069da:	bf00      	nop
 80069dc:	20003b6c 	.word	0x20003b6c

080069e0 <_malloc_r>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	1ccd      	adds	r5, r1, #3
 80069e4:	f025 0503 	bic.w	r5, r5, #3
 80069e8:	3508      	adds	r5, #8
 80069ea:	2d0c      	cmp	r5, #12
 80069ec:	bf38      	it	cc
 80069ee:	250c      	movcc	r5, #12
 80069f0:	2d00      	cmp	r5, #0
 80069f2:	4606      	mov	r6, r0
 80069f4:	db01      	blt.n	80069fa <_malloc_r+0x1a>
 80069f6:	42a9      	cmp	r1, r5
 80069f8:	d903      	bls.n	8006a02 <_malloc_r+0x22>
 80069fa:	230c      	movs	r3, #12
 80069fc:	6033      	str	r3, [r6, #0]
 80069fe:	2000      	movs	r0, #0
 8006a00:	bd70      	pop	{r4, r5, r6, pc}
 8006a02:	f000 f9c2 	bl	8006d8a <__malloc_lock>
 8006a06:	4a21      	ldr	r2, [pc, #132]	; (8006a8c <_malloc_r+0xac>)
 8006a08:	6814      	ldr	r4, [r2, #0]
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	b991      	cbnz	r1, 8006a34 <_malloc_r+0x54>
 8006a0e:	4c20      	ldr	r4, [pc, #128]	; (8006a90 <_malloc_r+0xb0>)
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	b91b      	cbnz	r3, 8006a1c <_malloc_r+0x3c>
 8006a14:	4630      	mov	r0, r6
 8006a16:	f000 f98f 	bl	8006d38 <_sbrk_r>
 8006a1a:	6020      	str	r0, [r4, #0]
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f000 f98a 	bl	8006d38 <_sbrk_r>
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	d124      	bne.n	8006a72 <_malloc_r+0x92>
 8006a28:	230c      	movs	r3, #12
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	6033      	str	r3, [r6, #0]
 8006a2e:	f000 f9ad 	bl	8006d8c <__malloc_unlock>
 8006a32:	e7e4      	b.n	80069fe <_malloc_r+0x1e>
 8006a34:	680b      	ldr	r3, [r1, #0]
 8006a36:	1b5b      	subs	r3, r3, r5
 8006a38:	d418      	bmi.n	8006a6c <_malloc_r+0x8c>
 8006a3a:	2b0b      	cmp	r3, #11
 8006a3c:	d90f      	bls.n	8006a5e <_malloc_r+0x7e>
 8006a3e:	600b      	str	r3, [r1, #0]
 8006a40:	18cc      	adds	r4, r1, r3
 8006a42:	50cd      	str	r5, [r1, r3]
 8006a44:	4630      	mov	r0, r6
 8006a46:	f000 f9a1 	bl	8006d8c <__malloc_unlock>
 8006a4a:	f104 000b 	add.w	r0, r4, #11
 8006a4e:	1d23      	adds	r3, r4, #4
 8006a50:	f020 0007 	bic.w	r0, r0, #7
 8006a54:	1ac3      	subs	r3, r0, r3
 8006a56:	d0d3      	beq.n	8006a00 <_malloc_r+0x20>
 8006a58:	425a      	negs	r2, r3
 8006a5a:	50e2      	str	r2, [r4, r3]
 8006a5c:	e7d0      	b.n	8006a00 <_malloc_r+0x20>
 8006a5e:	684b      	ldr	r3, [r1, #4]
 8006a60:	428c      	cmp	r4, r1
 8006a62:	bf16      	itet	ne
 8006a64:	6063      	strne	r3, [r4, #4]
 8006a66:	6013      	streq	r3, [r2, #0]
 8006a68:	460c      	movne	r4, r1
 8006a6a:	e7eb      	b.n	8006a44 <_malloc_r+0x64>
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	6849      	ldr	r1, [r1, #4]
 8006a70:	e7cc      	b.n	8006a0c <_malloc_r+0x2c>
 8006a72:	1cc4      	adds	r4, r0, #3
 8006a74:	f024 0403 	bic.w	r4, r4, #3
 8006a78:	42a0      	cmp	r0, r4
 8006a7a:	d005      	beq.n	8006a88 <_malloc_r+0xa8>
 8006a7c:	1a21      	subs	r1, r4, r0
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f000 f95a 	bl	8006d38 <_sbrk_r>
 8006a84:	3001      	adds	r0, #1
 8006a86:	d0cf      	beq.n	8006a28 <_malloc_r+0x48>
 8006a88:	6025      	str	r5, [r4, #0]
 8006a8a:	e7db      	b.n	8006a44 <_malloc_r+0x64>
 8006a8c:	20003b6c 	.word	0x20003b6c
 8006a90:	20003b70 	.word	0x20003b70

08006a94 <__ssputs_r>:
 8006a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a98:	688e      	ldr	r6, [r1, #8]
 8006a9a:	4682      	mov	sl, r0
 8006a9c:	429e      	cmp	r6, r3
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	4690      	mov	r8, r2
 8006aa2:	4699      	mov	r9, r3
 8006aa4:	d837      	bhi.n	8006b16 <__ssputs_r+0x82>
 8006aa6:	898a      	ldrh	r2, [r1, #12]
 8006aa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006aac:	d031      	beq.n	8006b12 <__ssputs_r+0x7e>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	6825      	ldr	r5, [r4, #0]
 8006ab2:	6909      	ldr	r1, [r1, #16]
 8006ab4:	1a6f      	subs	r7, r5, r1
 8006ab6:	6965      	ldr	r5, [r4, #20]
 8006ab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006abc:	fb95 f5f3 	sdiv	r5, r5, r3
 8006ac0:	f109 0301 	add.w	r3, r9, #1
 8006ac4:	443b      	add	r3, r7
 8006ac6:	429d      	cmp	r5, r3
 8006ac8:	bf38      	it	cc
 8006aca:	461d      	movcc	r5, r3
 8006acc:	0553      	lsls	r3, r2, #21
 8006ace:	d530      	bpl.n	8006b32 <__ssputs_r+0x9e>
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	f7ff ff85 	bl	80069e0 <_malloc_r>
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	b950      	cbnz	r0, 8006af0 <__ssputs_r+0x5c>
 8006ada:	230c      	movs	r3, #12
 8006adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ae0:	f8ca 3000 	str.w	r3, [sl]
 8006ae4:	89a3      	ldrh	r3, [r4, #12]
 8006ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aea:	81a3      	strh	r3, [r4, #12]
 8006aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af0:	463a      	mov	r2, r7
 8006af2:	6921      	ldr	r1, [r4, #16]
 8006af4:	f7fe f8a7 	bl	8004c46 <memcpy>
 8006af8:	89a3      	ldrh	r3, [r4, #12]
 8006afa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b02:	81a3      	strh	r3, [r4, #12]
 8006b04:	6126      	str	r6, [r4, #16]
 8006b06:	443e      	add	r6, r7
 8006b08:	6026      	str	r6, [r4, #0]
 8006b0a:	464e      	mov	r6, r9
 8006b0c:	6165      	str	r5, [r4, #20]
 8006b0e:	1bed      	subs	r5, r5, r7
 8006b10:	60a5      	str	r5, [r4, #8]
 8006b12:	454e      	cmp	r6, r9
 8006b14:	d900      	bls.n	8006b18 <__ssputs_r+0x84>
 8006b16:	464e      	mov	r6, r9
 8006b18:	4632      	mov	r2, r6
 8006b1a:	4641      	mov	r1, r8
 8006b1c:	6820      	ldr	r0, [r4, #0]
 8006b1e:	f000 f91b 	bl	8006d58 <memmove>
 8006b22:	68a3      	ldr	r3, [r4, #8]
 8006b24:	2000      	movs	r0, #0
 8006b26:	1b9b      	subs	r3, r3, r6
 8006b28:	60a3      	str	r3, [r4, #8]
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	441e      	add	r6, r3
 8006b2e:	6026      	str	r6, [r4, #0]
 8006b30:	e7dc      	b.n	8006aec <__ssputs_r+0x58>
 8006b32:	462a      	mov	r2, r5
 8006b34:	f000 f92b 	bl	8006d8e <_realloc_r>
 8006b38:	4606      	mov	r6, r0
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d1e2      	bne.n	8006b04 <__ssputs_r+0x70>
 8006b3e:	6921      	ldr	r1, [r4, #16]
 8006b40:	4650      	mov	r0, sl
 8006b42:	f7ff ff01 	bl	8006948 <_free_r>
 8006b46:	e7c8      	b.n	8006ada <__ssputs_r+0x46>

08006b48 <_svfiprintf_r>:
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	461d      	mov	r5, r3
 8006b4e:	898b      	ldrh	r3, [r1, #12]
 8006b50:	b09d      	sub	sp, #116	; 0x74
 8006b52:	061f      	lsls	r7, r3, #24
 8006b54:	4680      	mov	r8, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	4616      	mov	r6, r2
 8006b5a:	d50f      	bpl.n	8006b7c <_svfiprintf_r+0x34>
 8006b5c:	690b      	ldr	r3, [r1, #16]
 8006b5e:	b96b      	cbnz	r3, 8006b7c <_svfiprintf_r+0x34>
 8006b60:	2140      	movs	r1, #64	; 0x40
 8006b62:	f7ff ff3d 	bl	80069e0 <_malloc_r>
 8006b66:	6020      	str	r0, [r4, #0]
 8006b68:	6120      	str	r0, [r4, #16]
 8006b6a:	b928      	cbnz	r0, 8006b78 <_svfiprintf_r+0x30>
 8006b6c:	230c      	movs	r3, #12
 8006b6e:	f8c8 3000 	str.w	r3, [r8]
 8006b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b76:	e0c8      	b.n	8006d0a <_svfiprintf_r+0x1c2>
 8006b78:	2340      	movs	r3, #64	; 0x40
 8006b7a:	6163      	str	r3, [r4, #20]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b80:	2320      	movs	r3, #32
 8006b82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b86:	2330      	movs	r3, #48	; 0x30
 8006b88:	f04f 0b01 	mov.w	fp, #1
 8006b8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b90:	9503      	str	r5, [sp, #12]
 8006b92:	4637      	mov	r7, r6
 8006b94:	463d      	mov	r5, r7
 8006b96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b9a:	b10b      	cbz	r3, 8006ba0 <_svfiprintf_r+0x58>
 8006b9c:	2b25      	cmp	r3, #37	; 0x25
 8006b9e:	d13e      	bne.n	8006c1e <_svfiprintf_r+0xd6>
 8006ba0:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ba4:	d00b      	beq.n	8006bbe <_svfiprintf_r+0x76>
 8006ba6:	4653      	mov	r3, sl
 8006ba8:	4632      	mov	r2, r6
 8006baa:	4621      	mov	r1, r4
 8006bac:	4640      	mov	r0, r8
 8006bae:	f7ff ff71 	bl	8006a94 <__ssputs_r>
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	f000 80a4 	beq.w	8006d00 <_svfiprintf_r+0x1b8>
 8006bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bba:	4453      	add	r3, sl
 8006bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bbe:	783b      	ldrb	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 809d 	beq.w	8006d00 <_svfiprintf_r+0x1b8>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bd0:	9304      	str	r3, [sp, #16]
 8006bd2:	9307      	str	r3, [sp, #28]
 8006bd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bd8:	931a      	str	r3, [sp, #104]	; 0x68
 8006bda:	462f      	mov	r7, r5
 8006bdc:	2205      	movs	r2, #5
 8006bde:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006be2:	4850      	ldr	r0, [pc, #320]	; (8006d24 <_svfiprintf_r+0x1dc>)
 8006be4:	f7fe f812 	bl	8004c0c <memchr>
 8006be8:	9b04      	ldr	r3, [sp, #16]
 8006bea:	b9d0      	cbnz	r0, 8006c22 <_svfiprintf_r+0xda>
 8006bec:	06d9      	lsls	r1, r3, #27
 8006bee:	bf44      	itt	mi
 8006bf0:	2220      	movmi	r2, #32
 8006bf2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006bf6:	071a      	lsls	r2, r3, #28
 8006bf8:	bf44      	itt	mi
 8006bfa:	222b      	movmi	r2, #43	; 0x2b
 8006bfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c00:	782a      	ldrb	r2, [r5, #0]
 8006c02:	2a2a      	cmp	r2, #42	; 0x2a
 8006c04:	d015      	beq.n	8006c32 <_svfiprintf_r+0xea>
 8006c06:	462f      	mov	r7, r5
 8006c08:	2000      	movs	r0, #0
 8006c0a:	250a      	movs	r5, #10
 8006c0c:	9a07      	ldr	r2, [sp, #28]
 8006c0e:	4639      	mov	r1, r7
 8006c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c14:	3b30      	subs	r3, #48	; 0x30
 8006c16:	2b09      	cmp	r3, #9
 8006c18:	d94d      	bls.n	8006cb6 <_svfiprintf_r+0x16e>
 8006c1a:	b1b8      	cbz	r0, 8006c4c <_svfiprintf_r+0x104>
 8006c1c:	e00f      	b.n	8006c3e <_svfiprintf_r+0xf6>
 8006c1e:	462f      	mov	r7, r5
 8006c20:	e7b8      	b.n	8006b94 <_svfiprintf_r+0x4c>
 8006c22:	4a40      	ldr	r2, [pc, #256]	; (8006d24 <_svfiprintf_r+0x1dc>)
 8006c24:	463d      	mov	r5, r7
 8006c26:	1a80      	subs	r0, r0, r2
 8006c28:	fa0b f000 	lsl.w	r0, fp, r0
 8006c2c:	4318      	orrs	r0, r3
 8006c2e:	9004      	str	r0, [sp, #16]
 8006c30:	e7d3      	b.n	8006bda <_svfiprintf_r+0x92>
 8006c32:	9a03      	ldr	r2, [sp, #12]
 8006c34:	1d11      	adds	r1, r2, #4
 8006c36:	6812      	ldr	r2, [r2, #0]
 8006c38:	9103      	str	r1, [sp, #12]
 8006c3a:	2a00      	cmp	r2, #0
 8006c3c:	db01      	blt.n	8006c42 <_svfiprintf_r+0xfa>
 8006c3e:	9207      	str	r2, [sp, #28]
 8006c40:	e004      	b.n	8006c4c <_svfiprintf_r+0x104>
 8006c42:	4252      	negs	r2, r2
 8006c44:	f043 0302 	orr.w	r3, r3, #2
 8006c48:	9207      	str	r2, [sp, #28]
 8006c4a:	9304      	str	r3, [sp, #16]
 8006c4c:	783b      	ldrb	r3, [r7, #0]
 8006c4e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c50:	d10c      	bne.n	8006c6c <_svfiprintf_r+0x124>
 8006c52:	787b      	ldrb	r3, [r7, #1]
 8006c54:	2b2a      	cmp	r3, #42	; 0x2a
 8006c56:	d133      	bne.n	8006cc0 <_svfiprintf_r+0x178>
 8006c58:	9b03      	ldr	r3, [sp, #12]
 8006c5a:	3702      	adds	r7, #2
 8006c5c:	1d1a      	adds	r2, r3, #4
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	9203      	str	r2, [sp, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	bfb8      	it	lt
 8006c66:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c6a:	9305      	str	r3, [sp, #20]
 8006c6c:	4d2e      	ldr	r5, [pc, #184]	; (8006d28 <_svfiprintf_r+0x1e0>)
 8006c6e:	2203      	movs	r2, #3
 8006c70:	7839      	ldrb	r1, [r7, #0]
 8006c72:	4628      	mov	r0, r5
 8006c74:	f7fd ffca 	bl	8004c0c <memchr>
 8006c78:	b138      	cbz	r0, 8006c8a <_svfiprintf_r+0x142>
 8006c7a:	2340      	movs	r3, #64	; 0x40
 8006c7c:	1b40      	subs	r0, r0, r5
 8006c7e:	fa03 f000 	lsl.w	r0, r3, r0
 8006c82:	9b04      	ldr	r3, [sp, #16]
 8006c84:	3701      	adds	r7, #1
 8006c86:	4303      	orrs	r3, r0
 8006c88:	9304      	str	r3, [sp, #16]
 8006c8a:	7839      	ldrb	r1, [r7, #0]
 8006c8c:	2206      	movs	r2, #6
 8006c8e:	4827      	ldr	r0, [pc, #156]	; (8006d2c <_svfiprintf_r+0x1e4>)
 8006c90:	1c7e      	adds	r6, r7, #1
 8006c92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c96:	f7fd ffb9 	bl	8004c0c <memchr>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d038      	beq.n	8006d10 <_svfiprintf_r+0x1c8>
 8006c9e:	4b24      	ldr	r3, [pc, #144]	; (8006d30 <_svfiprintf_r+0x1e8>)
 8006ca0:	bb13      	cbnz	r3, 8006ce8 <_svfiprintf_r+0x1a0>
 8006ca2:	9b03      	ldr	r3, [sp, #12]
 8006ca4:	3307      	adds	r3, #7
 8006ca6:	f023 0307 	bic.w	r3, r3, #7
 8006caa:	3308      	adds	r3, #8
 8006cac:	9303      	str	r3, [sp, #12]
 8006cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb0:	444b      	add	r3, r9
 8006cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb4:	e76d      	b.n	8006b92 <_svfiprintf_r+0x4a>
 8006cb6:	fb05 3202 	mla	r2, r5, r2, r3
 8006cba:	2001      	movs	r0, #1
 8006cbc:	460f      	mov	r7, r1
 8006cbe:	e7a6      	b.n	8006c0e <_svfiprintf_r+0xc6>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	250a      	movs	r5, #10
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	3701      	adds	r7, #1
 8006cc8:	9305      	str	r3, [sp, #20]
 8006cca:	4638      	mov	r0, r7
 8006ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cd0:	3a30      	subs	r2, #48	; 0x30
 8006cd2:	2a09      	cmp	r2, #9
 8006cd4:	d903      	bls.n	8006cde <_svfiprintf_r+0x196>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0c8      	beq.n	8006c6c <_svfiprintf_r+0x124>
 8006cda:	9105      	str	r1, [sp, #20]
 8006cdc:	e7c6      	b.n	8006c6c <_svfiprintf_r+0x124>
 8006cde:	fb05 2101 	mla	r1, r5, r1, r2
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	4607      	mov	r7, r0
 8006ce6:	e7f0      	b.n	8006cca <_svfiprintf_r+0x182>
 8006ce8:	ab03      	add	r3, sp, #12
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	4622      	mov	r2, r4
 8006cee:	4b11      	ldr	r3, [pc, #68]	; (8006d34 <_svfiprintf_r+0x1ec>)
 8006cf0:	a904      	add	r1, sp, #16
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	f7fe f84c 	bl	8004d90 <_printf_float>
 8006cf8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006cfc:	4681      	mov	r9, r0
 8006cfe:	d1d6      	bne.n	8006cae <_svfiprintf_r+0x166>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	065b      	lsls	r3, r3, #25
 8006d04:	f53f af35 	bmi.w	8006b72 <_svfiprintf_r+0x2a>
 8006d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d0a:	b01d      	add	sp, #116	; 0x74
 8006d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d10:	ab03      	add	r3, sp, #12
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	4622      	mov	r2, r4
 8006d16:	4b07      	ldr	r3, [pc, #28]	; (8006d34 <_svfiprintf_r+0x1ec>)
 8006d18:	a904      	add	r1, sp, #16
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	f7fe fae4 	bl	80052e8 <_printf_i>
 8006d20:	e7ea      	b.n	8006cf8 <_svfiprintf_r+0x1b0>
 8006d22:	bf00      	nop
 8006d24:	0800748c 	.word	0x0800748c
 8006d28:	08007492 	.word	0x08007492
 8006d2c:	08007496 	.word	0x08007496
 8006d30:	08004d91 	.word	0x08004d91
 8006d34:	08006a95 	.word	0x08006a95

08006d38 <_sbrk_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	4c05      	ldr	r4, [pc, #20]	; (8006d54 <_sbrk_r+0x1c>)
 8006d3e:	4605      	mov	r5, r0
 8006d40:	4608      	mov	r0, r1
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	f000 f852 	bl	8006dec <_sbrk>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d102      	bne.n	8006d52 <_sbrk_r+0x1a>
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	b103      	cbz	r3, 8006d52 <_sbrk_r+0x1a>
 8006d50:	602b      	str	r3, [r5, #0]
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	20004400 	.word	0x20004400

08006d58 <memmove>:
 8006d58:	4288      	cmp	r0, r1
 8006d5a:	b510      	push	{r4, lr}
 8006d5c:	eb01 0302 	add.w	r3, r1, r2
 8006d60:	d807      	bhi.n	8006d72 <memmove+0x1a>
 8006d62:	1e42      	subs	r2, r0, #1
 8006d64:	4299      	cmp	r1, r3
 8006d66:	d00a      	beq.n	8006d7e <memmove+0x26>
 8006d68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d6c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006d70:	e7f8      	b.n	8006d64 <memmove+0xc>
 8006d72:	4283      	cmp	r3, r0
 8006d74:	d9f5      	bls.n	8006d62 <memmove+0xa>
 8006d76:	1881      	adds	r1, r0, r2
 8006d78:	1ad2      	subs	r2, r2, r3
 8006d7a:	42d3      	cmn	r3, r2
 8006d7c:	d100      	bne.n	8006d80 <memmove+0x28>
 8006d7e:	bd10      	pop	{r4, pc}
 8006d80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d84:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006d88:	e7f7      	b.n	8006d7a <memmove+0x22>

08006d8a <__malloc_lock>:
 8006d8a:	4770      	bx	lr

08006d8c <__malloc_unlock>:
 8006d8c:	4770      	bx	lr

08006d8e <_realloc_r>:
 8006d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d90:	4607      	mov	r7, r0
 8006d92:	4614      	mov	r4, r2
 8006d94:	460e      	mov	r6, r1
 8006d96:	b921      	cbnz	r1, 8006da2 <_realloc_r+0x14>
 8006d98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	f7ff be1f 	b.w	80069e0 <_malloc_r>
 8006da2:	b922      	cbnz	r2, 8006dae <_realloc_r+0x20>
 8006da4:	f7ff fdd0 	bl	8006948 <_free_r>
 8006da8:	4625      	mov	r5, r4
 8006daa:	4628      	mov	r0, r5
 8006dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dae:	f000 f814 	bl	8006dda <_malloc_usable_size_r>
 8006db2:	42a0      	cmp	r0, r4
 8006db4:	d20f      	bcs.n	8006dd6 <_realloc_r+0x48>
 8006db6:	4621      	mov	r1, r4
 8006db8:	4638      	mov	r0, r7
 8006dba:	f7ff fe11 	bl	80069e0 <_malloc_r>
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d0f2      	beq.n	8006daa <_realloc_r+0x1c>
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	f7fd ff3d 	bl	8004c46 <memcpy>
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f7ff fdba 	bl	8006948 <_free_r>
 8006dd4:	e7e9      	b.n	8006daa <_realloc_r+0x1c>
 8006dd6:	4635      	mov	r5, r6
 8006dd8:	e7e7      	b.n	8006daa <_realloc_r+0x1c>

08006dda <_malloc_usable_size_r>:
 8006dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dde:	1f18      	subs	r0, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bfbc      	itt	lt
 8006de4:	580b      	ldrlt	r3, [r1, r0]
 8006de6:	18c0      	addlt	r0, r0, r3
 8006de8:	4770      	bx	lr
	...

08006dec <_sbrk>:
 8006dec:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <_sbrk+0x14>)
 8006dee:	4602      	mov	r2, r0
 8006df0:	6819      	ldr	r1, [r3, #0]
 8006df2:	b909      	cbnz	r1, 8006df8 <_sbrk+0xc>
 8006df4:	4903      	ldr	r1, [pc, #12]	; (8006e04 <_sbrk+0x18>)
 8006df6:	6019      	str	r1, [r3, #0]
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	4402      	add	r2, r0
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	4770      	bx	lr
 8006e00:	20003b74 	.word	0x20003b74
 8006e04:	20004408 	.word	0x20004408

08006e08 <_init>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	bf00      	nop
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr

08006e14 <_fini>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr
